!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddLine	io/net/nposcpack.cpp	/^	void AddLine( const char* line )$/;"	f	class:LineList
AntzChMap	io/db/npauxdb.h	/^	AntzChMap = 1,$/;"	e	enum:__anon2
AntzNodeState	io/db/npauxdb.h	/^	AntzNodeState,$/;"	e	enum:__anon2
AntzTags	io/db/npauxdb.h	/^	AntzTags$/;"	e	enum:__anon2
BUGFIX_MATRIX	io/npgl.c	328;"	d	file:
BlockingReadLine	io/net/nposcpack.cpp	/^	char* BlockingReadLine() {$/;"	f	class:LineList
CreateCircle	io/gl/npgeometry.c	/^void CreateCircle (NPcirclePtr circle)$/;"	f
CreatePinDL	io/gl/npgeometry.c	/^GLuint CreatePinDL()$/;"	f
CreatePinWireDL	io/gl/npgeometry.c	/^GLuint CreatePinWireDL()$/;"	f
CreateTorus	io/gl/npgeometry.c	/^void CreateTorus (NPtorusPtr torus)$/;"	f
CreateTorusDL	io/gl/npgeometry.c	/^GLuint CreateTorusDL()$/;"	f
CreateTorusWireDL	io/gl/npgeometry.c	/^GLuint CreateTorusWireDL()$/;"	f
CreateTracks	io/npch.c	/^void CreateTracks (int numberTracks, void *dataRef)$/;"	f
CsvTrackPacketListener	io/net/nposcpack.cpp	/^	CsvTrackPacketListener( LineList* lines, void* dRef )$/;"	f	class:CsvTrackPacketListener
CsvTrackPacketListener	io/net/nposcpack.cpp	/^class CsvTrackPacketListener : public osc::OscPacketListener {$/;"	c	file:
DEF	io/db/npauxdb.h	/^	DEF = 0,$/;"	e	enum:__anon3
DUMP	io/net/nposcpack.h	102;"	d
Data	data/nptypes.h	/^struct Data {$/;"	s
Data	data/nptypes.h	/^typedef struct Data Data;$/;"	t	typeref:struct:Data
DeleteCircle	io/gl/npgeometry.c	/^void DeleteCircle (NPcirclePtr circle)$/;"	f
DrawCamera	io/gl/npgldraw.c	/^void DrawCamera (pNPnode node)$/;"	f
DrawConeDL	io/gl/npgeometry.c	/^void DrawConeDL()$/;"	f
DrawCylinderDL	io/gl/npgeometry.c	/^void DrawCylinderDL()$/;"	f
DrawCylinderWireDL	io/gl/npgeometry.c	/^void DrawCylinderWireDL()$/;"	f
DrawDefault	io/gl/npgldraw.c	/^void DrawDefault (pNPnode node)$/;"	f
DrawGrid	io/gl/npgldraw.c	/^void DrawGrid (pNPnode node, void* dataRef)$/;"	f
DrawLink	io/gl/npgldraw.c	/^void DrawLink (pNPnode node, void* dataRef)$/;"	f
DrawPin	io/gl/npgldraw.c	/^void DrawPin (int selectedRootNode, pNPnode node, void* dataRef)$/;"	f
DrawPinChild	io/gl/npgldraw.c	/^void DrawPinChild (pNPnode node, void* dataRef)$/;"	f
DrawPinDL	io/gl/npgeometry.c	/^void DrawPinDL() $/;"	f
DrawPinWireDL	io/gl/npgeometry.c	/^void DrawPinWireDL() $/;"	f
DrawPoints	io/gl/npgldraw.c	/^void DrawPoints (pNPnode node)$/;"	f
DrawSphereDL	io/gl/npgeometry.c	/^void DrawSphereDL()$/;"	f
DrawSphereWireDL	io/gl/npgeometry.c	/^void DrawSphereWireDL()$/;"	f
DrawSurface	io/gl/npgldraw.c	/^void DrawSurface (pNPnode node)$/;"	f
DrawTorusDL	io/gl/npgeometry.c	/^void DrawTorusDL() $/;"	f
DrawTorusWireDL	io/gl/npgeometry.c	/^void DrawTorusWireDL() $/;"	f
DrawVideo	io/gl/npgldraw.c	/^void DrawVideo (pNPnode node)$/;"	f
DumpChannel	io/npch.c	/^void DumpChannel(char* str, pNPch ch)$/;"	f
EchoFloat	io/net/nposcpack.cpp	/^	void EchoFloat( int registrationOffset, const char* outgoingMessage, int portNumber )$/;"	f	class:OscTrackPacketListener
GetOutgoingFloatAddress	io/net/nposcpack.cpp	/^   float* GetOutgoingFloatAddress( const char* floatTargetOscAddress )$/;"	f	class:OscTrackPacketListener
GetOutgoingFloatValue	io/net/nposcpack.cpp	/^	float GetOutgoingFloatValue(int offset)$/;"	f	class:OscTrackPacketListener
GetTableFields	data/nptypes.h	/^	void* (*GetTableFields)			();	\/\/\/creates the table fields descrisptor$/;"	m	struct:NPdbFuncSet
GetTrackOffset	io/npch.c	/^int GetTrackOffset(char** trackScanner, char* propertyName)$/;"	f
InitConnOptions	data/nptypes.h	/^	int   (*InitConnOptions)		();$/;"	m	struct:NPdbFuncSet
InitNodeGrid	data/npnode.c	/^void InitNodeGrid (pNPnode node)$/;"	f
InitNodePin	data/npnode.c	/^int InitNodePin (pNPnode node)$/;"	f
InitNodePoints	data/npnode.c	/^void InitNodePoints (pNPnode node)$/;"	f
InitNodeSurface	data/npnode.c	/^void InitNodeSurface (pNPnode node)$/;"	f
InitNodeVideo	data/npnode.c	/^void InitNodeVideo (pNPnode node)$/;"	f
InitTorus	io/gl/npgeometry.c	/^void InitTorus (void* dataRef)$/;"	f
KNPctrl	data/nptypes.h	/^	KNPctrl,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
LINE_BUFFER_SIZE	io/net/nposcpack.cpp	57;"	d	file:
LINE_WRAP_THRESHHOLD	io/net/nposcpack.cpp	58;"	d	file:
LineList	io/net/nposcpack.cpp	/^	LineList()$/;"	f	class:LineList
LineList	io/net/nposcpack.cpp	/^class LineList {$/;"	c	file:
MAX_OSC_LISTENERS	io/net/nposcpack.cpp	167;"	d	file:
MAX_OSC_SENDERS	io/net/nposcpack.cpp	643;"	d	file:
MapTrackOffset	io/npch.c	/^void MapTrackOffset(int trackOffset, pNPnode node, char* propertyName, void* dataRef)$/;"	f
MapTrackToFloatAttribute	io/npch.c	/^void MapTrackToFloatAttribute (int trackOffset, float* attributeValuePtr, void* dataRef)$/;"	f
MapTrackToIntAttribute	io/npch.c	/^void MapTrackToIntAttribute (int trackOffset, int* attributeValuePtr, void* dataRef)$/;"	f
MapTrackToUcharAttribute	io/npch.c	/^void MapTrackToUcharAttribute (int trackOffset, unsigned char* attributeValuePtr, void* dataRef)$/;"	f
NPAUXDB_H_	io/db/npauxdb.h	26;"	d
NPCH_H_	io/npch.h	26;"	d
NPCOLOR_H_	io/gl/npcolor.h	26;"	d
NPCONSOLE_H_	io/npconsole.h	26;"	d
NPCSV_H_	io/file/npcsv.h	26;"	d
NPCURL_H_	io/net/npcurl.h	26;"	d
NPDATA_H_	npdata.h	26;"	d
NPDBZ_H_	io/db/npdbz.h	26;"	d
NPDB_H_	io/db/npdb.h	26;"	d
NPDOT_H_	io/file/npdot.h	26;"	d
NPFILE_H_	io/npfile.h	26;"	d
NPGDAL_H_	io/file/npgdal.h	26;"	d
NPGLDRAW_H_	io/gl/npgldraw.h	26;"	d
NPGLSURFACE_H_	io/gl/npgeometry.h	26;"	d
NPGLUT_H_	io/npglut.h	26;"	d
NPGL_H_	io/npgl.h	26;"	d
NPHADOOP_H_	io/db/nphadoop.h	26;"	d
NPIO_H_	npio.h	26;"	d
NPJSON_H_	io/file/npjson.h	26;"	d
NPKEY_H_	io/npkey.h	26;"	d
NPKML_H_	io/file/npkml.h	26;"	d
NPMAPFILE_H_	data/npmapfile.h	34;"	d
NPMAP_H_	data/npmap.h	26;"	d
NPMATH_H_	data/npmath.h	26;"	d
NPMONGO_H_	io/db/npmongo.h	26;"	d
NPMOUSE_H_	io/npmouse.h	26;"	d
NPMYSQL_H_	io/db/npmysql.h	26;"	d
NPOBJ_H_	io/file/npobj.h	26;"	d
NPOSCPACK_H_	io/net/nposcpack.h	30;"	d
NPOSC_H_	io/net/nposc.h	26;"	d
NPOSTGRES_H_	io/db/npostgresql.h	26;"	d
NPOSX_H_	os/osx/nposx.h	26;"	d
NPOS_H_	os/npos.h	26;"	d
NPPLUGIN_H_	io/plugin/npplugin.h	26;"	d
NPSCRAPER_H_	io/net/npscraper.h	26;"	d
NPSQLITE_H_	io/db/npsqlite.h	26;"	d
NPSTR_H_	data/npstr.h	26;"	d
NPTAGS_H_	io/gl/nptags.h	26;"	d
NPTEXMAP_H_	io/gl/nptexmap.h	26;"	d
NPTYPES_H_	data/nptypes.h	26;"	d
NPVIDEO_H_	io/video/npvideo.h	26;"	d
NPWRANGLER_H_	data/npwrangler.h	26;"	d
NPXML_H_	io/file/npxml.h	26;"	d
NP_APP_FREEGLUT	data/nptypes.h	45;"	d
NP_DATABASE	data/nptypes.h	/^enum NP_DATABASE {$/;"	g
NP_DB_CONTENT_TYPES	data/nptypes.h	/^enum NP_DB_CONTENT_TYPES $/;"	g
NP_LINUX_	npdata.h	40;"	d
NP_MSW_	npdata.h	33;"	d
NP_OFXANTZ_H_	ofxantz.h	26;"	d
NP_OSX_	npdata.h	38;"	d
NP_PLUGIN_MYSQL	data/nptypes.h	58;"	d
NP_PLUGIN_OSCPACK	data/nptypes.h	59;"	d
NP_PLUGIN_SOIL	data/nptypes.h	61;"	d
NP_POSIX_	npdata.h	35;"	d
NPboolXYZ	data/nptypes.h	/^struct NPboolXYZ {$/;"	s
NPboolXYZ	data/nptypes.h	/^typedef struct NPboolXYZ NPboolXYZ;$/;"	t	typeref:struct:NPboolXYZ
NPboolXYZS	data/nptypes.h	/^struct NPboolXYZS {$/;"	s
NPboolXYZS	data/nptypes.h	/^typedef struct NPboolXYZS NPboolXYZS;$/;"	t	typeref:struct:NPboolXYZS
NPbuffer	data/npmapfile.c	/^struct NPbuffer			\/\/circular buffer$/;"	s	file:
NPbuffer	data/npmapfile.c	/^typedef struct NPbuffer NPbuffer;$/;"	t	typeref:struct:NPbuffer	file:
NPcamera	data/nptypes.h	/^struct NPcamera$/;"	s
NPcamera	data/nptypes.h	/^typedef struct NPcamera NPcamera;$/;"	t	typeref:struct:NPcamera
NPcameraPtr	data/nptypes.h	/^typedef struct NPcamera *NPcameraPtr;$/;"	t	typeref:struct:NPcamera
NPch	data/nptypes.h	/^struct NPch {$/;"	s
NPch	data/nptypes.h	/^typedef struct NPch NPch;$/;"	t	typeref:struct:NPch
NPcircle	io/gl/npgeometry.c	/^struct NPcircle {$/;"	s	file:
NPcircle	io/gl/npgeometry.c	/^typedef struct NPcircle NPcircle;$/;"	t	typeref:struct:NPcircle	file:
NPcirclePtr	io/gl/npgeometry.c	/^typedef struct NPcircle * NPcirclePtr;$/;"	t	typeref:struct:NPcircle	file:
NPconnect	data/nptypes.h	/^struct NPconnect$/;"	s
NPconnect	data/nptypes.h	/^typedef struct NPconnect NPconnect;$/;"	t	typeref:struct:NPconnect
NPconsole	data/nptypes.h	/^struct NPconsole {	$/;"	s
NPconsole	data/nptypes.h	/^typedef struct NPconsole NPconsole;$/;"	t	typeref:struct:NPconsole
NPcpu	data/nptypes.h	/^struct NPcpu {$/;"	s
NPcpu	data/nptypes.h	/^typedef struct NPcpu NPcpu;$/;"	t	typeref:struct:NPcpu
NPctrl	data/nptypes.h	/^struct NPctrl {$/;"	s
NPctrl	data/nptypes.h	/^typedef struct NPctrl NPctrl;$/;"	t	typeref:struct:NPctrl
NPdataItem	data/nptypes.h	/^struct NPdataItem$/;"	s
NPdataItem	data/nptypes.h	/^typedef struct NPdataItem NPdataItem;$/;"	t	typeref:struct:NPdataItem
NPdataItemPtr	data/nptypes.h	/^typedef struct NPdataItem * NPdataItemPtr;$/;"	t	typeref:struct:NPdataItem
NPdatabase	data/nptypes.h	/^struct NPdatabase{$/;"	s
NPdatabase	data/nptypes.h	/^typedef struct NPdatabase NPdatabase;$/;"	t	typeref:struct:NPdatabase
NPdatabase	io/db/npauxdb.h	/^struct NPdatabase {$/;"	s
NPdatabases	data/nptypes.h	/^struct NPdatabases {$/;"	s
NPdatabases	data/nptypes.h	/^typedef struct NPdatabases NPdatabases;$/;"	t	typeref:struct:NPdatabases
NPdbFields	data/nptypes.h	/^struct NPdbFields{$/;"	s
NPdbFields	data/nptypes.h	/^typedef struct NPdbFields NPdbFields;$/;"	t	typeref:struct:NPdbFields
NPdbFuncSet	data/nptypes.h	/^struct NPdbFuncSet{$/;"	s
NPdbFuncSet	data/nptypes.h	/^typedef struct NPdbFuncSet NPdbFuncSet;$/;"	t	typeref:struct:NPdbFuncSet
NPdbFunction	data/nptypes.h	/^struct NPdbFunction{$/;"	s
NPdbFunction	data/nptypes.h	/^typedef struct NPdbFunction NPdbFunction;$/;"	t	typeref:struct:NPdbFunction
NPdbHost	data/nptypes.h	/^struct NPdbHost{$/;"	s
NPdbHost	data/nptypes.h	/^typedef struct NPdbHost NPdbHost;$/;"	t	typeref:struct:NPdbHost
NPdbTable	data/nptypes.h	/^struct NPdbTable{$/;"	s
NPdbTable	data/nptypes.h	/^typedef struct NPdbTable NPdbTable;$/;"	t	typeref:struct:NPdbTable
NPdbs	data/nptypes.h	/^struct NPdbs {$/;"	s
NPdbs	data/nptypes.h	/^typedef struct NPdbs NPdbs;$/;"	t	typeref:struct:NPdbs
NPfile	data/nptypes.h	/^struct NPfile$/;"	s
NPfile	data/nptypes.h	/^typedef struct NPfile NPfile;$/;"	t	typeref:struct:NPfile
NPfloatRGB	data/nptypes.h	/^struct NPfloatRGB {$/;"	s
NPfloatRGB	data/nptypes.h	/^typedef struct NPfloatRGB NPfloatRGB;$/;"	t	typeref:struct:NPfloatRGB
NPfloatRGBA	data/nptypes.h	/^struct NPfloatRGBA {$/;"	s
NPfloatRGBA	data/nptypes.h	/^typedef struct NPfloatRGBA NPfloatRGBA;$/;"	t	typeref:struct:NPfloatRGBA
NPfloatXY	data/nptypes.h	/^struct NPfloatXY {$/;"	s
NPfloatXY	data/nptypes.h	/^typedef struct NPfloatXY NPfloatXY;$/;"	t	typeref:struct:NPfloatXY
NPfloatXYZ	data/nptypes.h	/^struct NPfloatXYZ {$/;"	s
NPfloatXYZ	data/nptypes.h	/^typedef struct NPfloatXYZ NPfloatXYZ;$/;"	t	typeref:struct:NPfloatXYZ
NPfloatXYZA	data/nptypes.h	/^struct NPfloatXYZA {$/;"	s
NPfloatXYZA	data/nptypes.h	/^typedef struct NPfloatXYZA NPfloatXYZA;$/;"	t	typeref:struct:NPfloatXYZA
NPfloatXYZS	data/nptypes.h	/^struct NPfloatXYZS {$/;"	s
NPfloatXYZS	data/nptypes.h	/^typedef struct NPfloatXYZS NPfloatXYZS;$/;"	t	typeref:struct:NPfloatXYZS
NPfuncDesc	data/npmap.c	/^struct NPfuncDesc {$/;"	s	file:
NPfuncDesc	data/npmap.c	/^typedef struct NPfuncDesc NPfuncDesc;$/;"	t	typeref:struct:NPfuncDesc	file:
NPfuncPtr	data/nptypes.h	/^typedef void (*NPfuncPtr)(int menuItem, void* dataRef);$/;"	t
NPgis	data/nptypes.h	/^struct NPgis$/;"	s
NPgis	data/nptypes.h	/^typedef struct NPgis NPgis;$/;"	t	typeref:struct:NPgis
NPgisPtr	data/nptypes.h	/^typedef struct NPgis *NPgisPtr;$/;"	t	typeref:struct:NPgis
NPgl	data/nptypes.h	/^struct NPgl {$/;"	s
NPgl	data/nptypes.h	/^typedef struct NPgl NPgl;$/;"	t	typeref:struct:NPgl
NPgrid	data/nptypes.h	/^struct NPgrid$/;"	s
NPgrid	data/nptypes.h	/^typedef struct NPgrid NPgrid;$/;"	t	typeref:struct:NPgrid
NPgridPtr	data/nptypes.h	/^typedef struct NPgrid * NPgridPtr;$/;"	t	typeref:struct:NPgrid
NPhud	data/nptypes.h	/^struct NPhud {$/;"	s
NPhud	data/nptypes.h	/^typedef struct NPhud NPhud;$/;"	t	typeref:struct:NPhud
NPintXY	data/nptypes.h	/^struct NPintXY {$/;"	s
NPintXY	data/nptypes.h	/^typedef struct NPintXY NPintXY;$/;"	t	typeref:struct:NPintXY
NPintXYZ	data/nptypes.h	/^struct NPintXYZ {$/;"	s
NPintXYZ	data/nptypes.h	/^typedef struct NPintXYZ NPintXYZ;$/;"	t	typeref:struct:NPintXYZ
NPintXYZS	data/nptypes.h	/^struct NPintXYZS {$/;"	s
NPintXYZS	data/nptypes.h	/^typedef struct NPintXYZS NPintXYZS;$/;"	t	typeref:struct:NPintXYZS
NPio	data/nptypes.h	/^struct NPio {$/;"	s
NPio	data/nptypes.h	/^typedef struct NPio NPio;$/;"	t	typeref:struct:NPio
NPkey	data/nptypes.h	/^struct NPkey {$/;"	s
NPkey	data/nptypes.h	/^typedef struct NPkey NPkey;$/;"	t	typeref:struct:NPkey
NPkeyMap	io/npkey.c	/^struct NPkeyMap$/;"	s	file:
NPkeyMap	io/npkey.c	/^typedef struct NPkeyMap NPkeyMap;$/;"	t	typeref:struct:NPkeyMap	file:
NPkeyMapPtr	io/npkey.c	/^typedef struct NPkeyMap *NPkeyMapPtr;$/;"	t	typeref:struct:NPkeyMap	file:
NPlabel	data/nptypes.h	/^struct NPlabel$/;"	s
NPlabel	data/nptypes.h	/^typedef struct NPlabel NPlabel;$/;"	t	typeref:struct:NPlabel
NPlabelPtr	data/nptypes.h	/^typedef struct NPlabel *NPlabelPtr;$/;"	t	typeref:struct:NPlabel
NPmap	data/nptypes.h	/^struct NPmap {$/;"	s
NPmap	data/nptypes.h	/^typedef struct NPmap NPmap;$/;"	t	typeref:struct:NPmap
NPmapColor	data/nptypes.h	/^struct NPmapColor {$/;"	s
NPmapColor	data/nptypes.h	/^typedef struct NPmapColor NPmapColor;$/;"	t	typeref:struct:NPmapColor
NPmapID	data/nptypes.h	/^struct NPmapID{$/;"	s
NPmapID	data/nptypes.h	/^typedef struct NPmapID NPmapID;$/;"	t	typeref:struct:NPmapID
NPmapItemNodeID	data/nptypes.h	/^struct NPmapItemNodeID {$/;"	s
NPmapItemNodeID	data/nptypes.h	/^typedef struct NPmapItemNodeID NPmapItemNodeID;$/;"	t	typeref:struct:NPmapItemNodeID
NPmapLink	data/nptypes.h	/^struct NPmapLink$/;"	s
NPmapLink	data/nptypes.h	/^typedef struct NPmapLink NPmapLink;$/;"	t	typeref:struct:NPmapLink
NPmapNodeID	data/nptypes.h	/^struct NPmapNodeID {$/;"	s
NPmapNodeID	data/nptypes.h	/^typedef struct NPmapNodeID NPmapNodeID;$/;"	t	typeref:struct:NPmapNodeID
NPmapPair	data/nptypes.h	/^struct NPmapPair$/;"	s
NPmapPair	data/nptypes.h	/^typedef struct NPmapPair NPmapPair;$/;"	t	typeref:struct:NPmapPair
NPmapType	data/nptypes.h	/^struct NPmapType$/;"	s
NPmapType	data/nptypes.h	/^typedef struct NPmapType NPmapType;$/;"	t	typeref:struct:NPmapType
NPmenu	data/nptypes.h	/^struct NPmenu {$/;"	s
NPmenu	data/nptypes.h	/^typedef struct NPmenu NPmenu;$/;"	t	typeref:struct:NPmenu
NPmessage	data/nptypes.h	/^struct NPmessage$/;"	s
NPmessage	data/nptypes.h	/^typedef struct NPmessage NPmessage;$/;"	t	typeref:struct:NPmessage
NPmouse	data/nptypes.h	/^struct NPmouse {$/;"	s
NPmouse	data/nptypes.h	/^typedef struct NPmouse NPmouse;$/;"	t	typeref:struct:NPmouse
NPnode	data/nptypes.h	/^struct NPnode$/;"	s
NPnode	data/nptypes.h	/^typedef struct NPnode NPnode;$/;"	t	typeref:struct:NPnode
NPnode2	data/nptypes.h	/^struct NPnode2 {$/;"	s
NPnode2	data/nptypes.h	/^typedef struct NPnode2 NPnode2;$/;"	t	typeref:struct:NPnode2
NPnodeData	data/nptypes.h	/^struct NPnodeData$/;"	s
NPnodeData	data/nptypes.h	/^typedef struct NPnodeData NPnodeData;$/;"	t	typeref:struct:NPnodeData
NPnodeList	data/nptypes.h	/^struct NPnodeList {$/;"	s
NPnodeList	data/nptypes.h	/^typedef struct NPnodeList NPnodeList;$/;"	t	typeref:struct:NPnodeList
NPnodePropertyTracks	data/nptypes.h	/^struct NPnodePropertyTracks {$/;"	s
NPnodePropertyTracks	data/nptypes.h	/^typedef struct NPnodePropertyTracks NPnodePropertyTracks;$/;"	t	typeref:struct:NPnodePropertyTracks
NPosc	data/nptypes.h	/^struct NPosc {$/;"	s
NPosc	data/nptypes.h	/^typedef struct NPosc NPosc;$/;"	t	typeref:struct:NPosc
NPoscItem	data/nptypes.h	/^struct NPoscItem {$/;"	s
NPoscItem	data/nptypes.h	/^typedef struct NPoscItem NPoscItem;$/;"	t	typeref:struct:NPoscItem
NPoscPackListener	io/net/nposcpack.h	/^struct NPoscPackListener {$/;"	s
NPoscPackListener	io/net/nposcpack.h	/^typedef struct NPoscPackListener NPoscPackListener;$/;"	t	typeref:struct:NPoscPackListener
NPoscPackSender	io/net/nposcpack.h	/^struct NPoscPackSender {$/;"	s
NPoscPackSender	io/net/nposcpack.h	/^typedef struct NPoscPackSender NPoscPackSender;$/;"	t	typeref:struct:NPoscPackSender
NPpin	data/nptypes.h	/^struct NPpin$/;"	s
NPpin	data/nptypes.h	/^typedef struct NPpin NPpin;$/;"	t	typeref:struct:NPpin
NPpinPtr	data/nptypes.h	/^typedef struct NPpin *NPpinPtr;$/;"	t	typeref:struct:NPpin
NPpoints	data/nptypes.h	/^struct NPpoints$/;"	s
NPpoints	data/nptypes.h	/^typedef struct NPpoints NPpoints;$/;"	t	typeref:struct:NPpoints
NPpointsPtr	data/nptypes.h	/^typedef struct NPpoints *NPpointsPtr;$/;"	t	typeref:struct:NPpoints
NPposition	data/nptypes.h	/^	NPposition,			\/\/!<zz-osc$/;"	e	enum:kNP_NATIVE_DATA_TYPES
NPque	data/nptypes.h	/^struct NPque {$/;"	s
NPque	data/nptypes.h	/^typedef struct NPque NPque;$/;"	t	typeref:struct:NPque
NPqueCmd	data/nptypes.h	/^struct NPqueCmd {$/;"	s
NPqueCmd	data/nptypes.h	/^typedef struct NPqueCmd NPqueCmd;$/;"	t	typeref:struct:NPqueCmd
NPqueItem	data/nptypes.h	/^struct NPqueItem {$/;"	s
NPqueItem	data/nptypes.h	/^typedef struct NPqueItem NPqueItem;$/;"	t	typeref:struct:NPqueItem
NPqueList	data/nptypes.h	/^struct NPqueList {$/;"	s
NPqueList	data/nptypes.h	/^typedef struct NPqueList NPqueList;$/;"	t	typeref:struct:NPqueList
NPrecordSet	data/nptypes.h	/^struct NPrecordSet						\/\/!<generic list struct$/;"	s
NPrecordSet	data/nptypes.h	/^typedef struct NPrecordSet NPrecordSet;$/;"	t	typeref:struct:NPrecordSet
NPrecordTag	data/nptypes.h	/^struct NPrecordTag$/;"	s
NPrecordTag	data/nptypes.h	/^typedef struct NPrecordTag NPrecordTag;$/;"	t	typeref:struct:NPrecordTag
NPsurface	data/nptypes.h	/^struct NPsurface$/;"	s
NPsurface	data/nptypes.h	/^typedef struct NPsurface NPsurface;$/;"	t	typeref:struct:NPsurface
NPsurfacePtr	data/nptypes.h	/^typedef struct NPsurface *NPsurfacePtr;$/;"	t	typeref:struct:NPsurface
NPtag	data/nptypes.h	/^struct NPtag$/;"	s
NPtag	data/nptypes.h	/^typedef struct NPtag NPtag;$/;"	t	typeref:struct:NPtag
NPtags	data/nptypes.h	/^struct NPtags {$/;"	s
NPtags	data/nptypes.h	/^typedef struct NPtags NPtags;$/;"	t	typeref:struct:NPtags
NPthreadFile	data/nptypes.h	/^struct NPthreadFile$/;"	s
NPthreadFile	data/nptypes.h	/^typedef struct NPthreadFile NPthreadFile;$/;"	t	typeref:struct:NPthreadFile
NPtool	data/nptypes.h	/^struct NPtool {$/;"	s
NPtool	data/nptypes.h	/^typedef struct NPtool NPtool;$/;"	t	typeref:struct:NPtool
NPtorus	io/gl/npgeometry.c	/^struct NPtorus {$/;"	s	file:
NPtorus	io/gl/npgeometry.c	/^typedef struct NPtorus NPtorus;$/;"	t	typeref:struct:NPtorus	file:
NPtorusPtr	io/gl/npgeometry.c	/^typedef struct NPtorus * NPtorusPtr;$/;"	t	typeref:struct:NPtorus	file:
NPtrackDataSource	data/nptypes.h	/^struct NPtrackDataSource {$/;"	s
NPtrackDataSource	data/nptypes.h	/^typedef struct NPtrackDataSource NPtrackDataSource;$/;"	t	typeref:struct:NPtrackDataSource
NPubyte	data/nptypes.h	/^typedef unsigned char NPubyte;$/;"	t
NPubyteRGBA	data/nptypes.h	/^struct NPubyteRGBA {$/;"	s
NPubyteRGBA	data/nptypes.h	/^typedef struct NPubyteRGBA NPubyteRGBA;$/;"	t	typeref:struct:NPubyteRGBA
NPuser	data/nptypes.h	/^struct NPuser{	$/;"	s
NPuser	data/nptypes.h	/^typedef struct NPuser NPuser;$/;"	t	typeref:struct:NPuser
NPuserEnvironment	data/nptypes.h	/^struct NPuserEnvironment{							\/\/!<zz select$/;"	s
NPuserEnvironment	data/nptypes.h	/^typedef struct NPuserEnvironment NPuserEnvironment;$/;"	t	typeref:struct:NPuserEnvironment
NPvideo	data/nptypes.h	/^struct NPvideo$/;"	s
NPvideo	data/nptypes.h	/^typedef struct NPvideo NPvideo;$/;"	t	typeref:struct:NPvideo
NPvideoPtr	data/nptypes.h	/^typedef struct NPvideo *NPvideoPtr;$/;"	t	typeref:struct:NPvideo
NPxref	data/nptypes.h	/^struct NPxref {$/;"	s
NPxref	data/nptypes.h	/^typedef struct NPxref NPxref;$/;"	t	typeref:struct:NPxref
NUMBER_LINES	io/net/nposcpack.cpp	59;"	d	file:
OSC_csvCh	io/net/nposcpack.h	96;"	d
OSC_csvChMap	io/net/nposcpack.h	97;"	d
OSC_csvNode	io/net/nposcpack.h	98;"	d
OSC_csvTag	io/net/nposcpack.h	99;"	d
OUTPUT_BUFFER_SIZE	io/net/nposcpack.cpp	177;"	d	file:
OpenFileDialog	os/msw/npos.c	/^FILE* OpenFileDialog (const char* fileName, int kNPfileDialogOpen, void* dataRef)$/;"	f
OscAntzPacketListener	io/net/nposcpack.cpp	/^	OscAntzPacketListener(void *dataRef, int oscID)$/;"	f	class:OscAntzPacketListener
OscAntzPacketListener	io/net/nposcpack.cpp	/^class OscAntzPacketListener : public osc::OscPacketListener {$/;"	c	file:
OscTrackPacketListener	io/net/nposcpack.cpp	/^	OscTrackPacketListener(void *dataRef)$/;"	f	class:OscTrackPacketListener
OscTrackPacketListener	io/net/nposcpack.cpp	/^class OscTrackPacketListener : public osc::OscPacketListener {$/;"	c	file:
ProcessMessage	io/net/nposcpack.cpp	/^	virtual void ProcessMessage( const osc::ReceivedMessage& m, $/;"	f	class:OscAntzPacketListener
ProcessMessage	io/net/nposcpack.cpp	/^	virtual void ProcessMessage( const osc::ReceivedMessage& m, $/;"	f	class:OscTrackPacketListener
ProcessMessage	io/net/nposcpack.cpp	/^    virtual void ProcessMessage( const osc::ReceivedMessage& m, $/;"	f	class:CsvTrackPacketListener
RAM	data/nptypes.h	/^	long long RAM;			\/\/!<RAM per motherboard or compute blade$/;"	m	struct:NPcpu
READLINE	io/net/nposcpack.h	101;"	d
ReadLine	io/net/nposcpack.cpp	/^	char* ReadLine() {$/;"	f	class:LineList
RegisterCommand	io/net/nposcpack.cpp	/^	void RegisterCommand(const char* incomingOsc, int command ) $/;"	f	class:OscTrackPacketListener
RegisterFloatValueMapping	io/net/nposcpack.cpp	/^	int RegisterFloatValueMapping(const char* incomingOscMessage, int incomingParameterOffset, $/;"	f	class:OscTrackPacketListener
SaveFileDialog	os/msw/npos.c	/^FILE* SaveFileDialog()$/;"	f
SaveHeader	io/npch.c	/^void SaveHeader(int offset, char* header, void *dataRef)$/;"	f
SaveHeaders	io/npch.c	/^int SaveHeaders(char** headers, void *dataRef)$/;"	f
SetIncomingFloatValue	io/net/nposcpack.cpp	/^	void SetIncomingFloatValue( int offset, float value) \/\/ used just for testing$/;"	f	class:OscTrackPacketListener
StatementCreate	data/nptypes.h	/^	void* (*StatementCreate)		();$/;"	m	struct:NPdbFuncSet
StatementCreate	io/db/npdbz.h	/^	void* (*StatementCreate)  ();$/;"	m	struct:dbFunction
StatementCreateTable	data/nptypes.h	/^	void* (*StatementCreateTable)	();$/;"	m	struct:NPdbFuncSet
StatementCreateTable	io/db/npdbz.h	/^	void* (*StatementCreateTable) ();$/;"	m	struct:dbFunction
StatementDrop	data/nptypes.h	/^	void* (*StatementDrop)			();$/;"	m	struct:NPdbFuncSet
StatementDrop	io/db/npdbz.h	/^	void* (*StatementDrop)    ();$/;"	m	struct:dbFunction
StatementInsert	data/nptypes.h	/^	void* (*StatementInsert)		();$/;"	m	struct:NPdbFuncSet
StatementInsert	io/db/npdbz.h	/^	void* (*StatementInsert)  ();$/;"	m	struct:dbFunction
StatementSelect	data/nptypes.h	/^	void* (*StatementSelect)		();$/;"	m	struct:NPdbFuncSet
StatementSelect	io/db/npdbz.h	/^	void* (*StatementSelect) ();$/;"	m	struct:dbFunction
StatementShow	data/nptypes.h	/^	void* (*StatementShow)			();$/;"	m	struct:NPdbFuncSet
StatementShow	io/db/npdbz.h	/^	void* (*StatementShow)    ();$/;"	m	struct:dbFunction
StatementTruncate	data/nptypes.h	/^	void* (*StatementTruncate)		();$/;"	m	struct:NPdbFuncSet
StatementUpdate	data/nptypes.h	/^	void* (*StatementUpdate)		();$/;"	m	struct:NPdbFuncSet
StatementUse	data/nptypes.h	/^	void* (*StatementUse)			();$/;"	m	struct:NPdbFuncSet
StatementUse	io/db/npdbz.h	/^	void* (*StatementUse)     ();$/;"	m	struct:dbFunction
TRUE	io/gl/npgeometry.c	35;"	d	file:
TestIt	io/net/nposcpack.cpp	/^extern "C" void TestIt()$/;"	f
TraverseTree	npctrl.c	/^void TraverseTree (int command, pNPnode node, void* dataRef)$/;"	f
UpdateCameraMouse	ctrl/npengine.c	/^void UpdateCameraMouse (void* nodeRef, void* dataRef )$/;"	f
UpdateNode	ctrl/npengine.c	/^void UpdateNode (pNPnode node, pData dataRef)$/;"	f
UpdateNodeCamera	ctrl/npengine.c	/^void UpdateNodeCamera (pNPnode node, pData dataRef)$/;"	f
UpdateNodeChild	ctrl/npengine.c	/^void UpdateNodeChild (pNPnode node, pData dataRef)$/;"	f
UpdateNodeData	ctrl/npengine.c	/^void UpdateNodeData (pNPnode node, pData dataRef)$/;"	f
UpdateNodeDefault	ctrl/npengine.c	/^void UpdateNodeDefault (pNPnode node, pData dataRef)$/;"	f
UpdateNodeGrid	ctrl/npengine.c	/^void UpdateNodeGrid (pNPnode node, pData dataRef)$/;"	f
UpdateNodePin	ctrl/npengine.c	/^void UpdateNodePin (pNPnode node, pData dataRef)$/;"	f
UpdateNodePoints	ctrl/npengine.c	/^void UpdateNodePoints (pNPnode node, pData dataRef)$/;"	f
UpdateNodeSurface	ctrl/npengine.c	/^void UpdateNodeSurface (pNPnode node, pData dataRef)$/;"	f
UpdateNodeVideo	ctrl/npengine.c	/^void UpdateNodeVideo (pNPnode node, pData dataRef)$/;"	f
UpdateNodeWithMouse	ctrl/npengine.c	/^void UpdateNodeWithMouse (pNPnode node, pData dataRef)$/;"	f
WATCH	io/watchtools.h	54;"	d
WATCH	io/watchtools.h	67;"	d
WATCH_BOOL	io/watchtools.h	45;"	d
WATCH_BOOL	io/watchtools.h	59;"	d
WATCH_END	io/watchtools.h	57;"	d
WATCH_END	io/watchtools.h	70;"	d
WATCH_FLOAT	io/watchtools.h	48;"	d
WATCH_FLOAT	io/watchtools.h	62;"	d
WATCH_FMT	io/watchtools.h	53;"	d
WATCH_FMT	io/watchtools.h	65;"	d
WATCH_FUNC	io/watchtools.h	55;"	d
WATCH_FUNC	io/watchtools.h	68;"	d
WATCH_FUNCCOUNT	io/watchtools.h	56;"	d
WATCH_FUNCCOUNT	io/watchtools.h	69;"	d
WATCH_INT	io/watchtools.h	46;"	d
WATCH_INT	io/watchtools.h	60;"	d
WATCH_ON	io/watchtools.h	29;"	d
WATCH_PTR	io/watchtools.h	50;"	d
WATCH_SEP	io/watchtools.h	39;"	d
WATCH_SEP	io/watchtools.h	41;"	d
WATCH_STR	io/watchtools.h	49;"	d
WATCH_STR	io/watchtools.h	63;"	d
WATCH_UINT	io/watchtools.h	47;"	d
WATCH_UINT	io/watchtools.h	61;"	d
WATCH_VEC	io/watchtools.h	51;"	d
WATCH_VEC	io/watchtools.h	64;"	d
WATCH_VEC2	io/watchtools.h	52;"	d
WATCH_VEC2	io/watchtools.h	66;"	d
WGLExtensionSupported	os/msw/npos.c	/^bool WGLExtensionSupported (const char *extension_name)$/;"	f
_APS_NEXT_COMMAND_VALUE	os/msw/resource.h	10;"	d
_APS_NEXT_CONTROL_VALUE	os/msw/resource.h	11;"	d
_APS_NEXT_RESOURCE_VALUE	os/msw/resource.h	9;"	d
_APS_NEXT_SYMED_VALUE	os/msw/resource.h	12;"	d
_STDBOOL_H	data/stdbool.h	26;"	d
_USE_MATH_DEFINES	npdata.h	45;"	d
__bool_true_false_are_defined	data/stdbool.h	31;"	d
a	data/nptypes.h	/^	float r,g,b,a;$/;"	m	struct:NPfloatRGBA
a	data/nptypes.h	/^	unsigned char r,g,b,a;$/;"	m	struct:NPubyteRGBA
a	data/nptypes.h	/^	void*		a;			\/\/!<points to an array of data pointers$/;"	m	struct:NPnodeData
action	io/db/npdbz.h	/^	int action; \/\/Create, Insert, Select, Alter, Show, etc...$/;"	m	struct:tableParameters
active	data/nptypes.h	/^	int active;					\/\/!<targeting, dragging, actively using$/;"	m	struct:NPtool
activeContext	data/nptypes.h	/^	int activeContext;$/;"	m	struct:NPuserEnvironment
activeDB	data/nptypes.h	/^	pNPdatabase		activeDB;			\/\/\/< points to active DB in list$/;"	m	struct:NPdbs
activeDB	io/db/npdbz.h	/^	struct database *activeDB;	\/\/\/< @todo make this single DB ptr to dbList or dbID index$/;"	m	struct:databases	typeref:struct:databases::database
activeNode	data/nptypes.h	/^	int activeNode;$/;"	m	struct:NPuserEnvironment
activeWindow	data/nptypes.h	/^	int activeWindow;$/;"	m	struct:NPuserEnvironment
adapterInitialized	io/net/nposcpack.cpp	/^static bool adapterInitialized = false;$/;"	v	file:
alphaMode	data/nptypes.h	/^	int			alphaMode;$/;"	m	struct:NPgl
altIndex	data/nptypes.h	/^	int				altIndex;		\/\/!<alternate color (ie: black\/white)$/;"	m	struct:NPmapColor
alter	data/nptypes.h	/^	void* (*alter)		    ();$/;"	m	struct:NPdbFuncSet
alter	io/db/npdbz.h	/^	void* (*alter)  ();$/;"	m	struct:dbFunction
angle	data/nptypes.h	/^	float x,y,z,angle;$/;"	m	struct:NPfloatXYZA
antzFloatTargetOscAddress	io/net/nposcpack.cpp	/^	const char* antzFloatTargetOscAddress[10];       \/\/ where we put the result$/;"	m	class:OscTrackPacketListener	file:
antzTargetInitialValueSaved	io/net/nposcpack.cpp	/^	bool antzTargetInitialValueSaved[10];    \/\/ tracks whether we have set the base value$/;"	m	class:OscTrackPacketListener	file:
aperture	data/nptypes.h	/^	float		aperture;					\/\/!<F stop$/;"	m	struct:NPcamera
appPath	data/nptypes.h	/^	char		appPath[kNPmaxPath];$/;"	m	struct:NPfile
appRAM	data/nptypes.h	/^	long long appRAM;		\/\/!<per CPU core$/;"	m	struct:NPcpu
argc	data/nptypes.h	/^	int			argc;$/;"	m	struct:NPio
argv	data/nptypes.h	/^	char**		argv;$/;"	m	struct:NPio
arrayIndex	data/nptypes.h	/^	int			arrayIndex;					\/\/!<current vertex index in the array$/;"	m	struct:NPgis
arrayIndex	data/nptypes.h	/^	int			arrayIndex;					\/\/!<current vertex index in the array$/;"	m	struct:NPpoints
arrayIndex	data/nptypes.h	/^	int			arrayIndex;					\/\/!<current vertex index in the array$/;"	m	struct:NPsurface
aspectRatio	data/nptypes.h	/^	float		aspectRatio;				\/\/!<1.0, 1.333, 1.777, 1.85, 2.25... $/;"	m	struct:NPcamera
aspectRatio	data/nptypes.h	/^	float		aspectRatio;				\/\/!<1.0, 1.333, 1.777, 1.85, 2.25... $/;"	m	struct:NPvideo
assignNodePropertiesFromArray	io/db/npdbz.c	/^void assignNodePropertiesFromArray(char** row, pNPnode node)$/;"	f
attributeName	data/nptypes.h	/^	char*		attributeName;$/;"	m	struct:NPxref
autoZoom	data/nptypes.h	/^	NPintXYZ	autoZoom;					\/\/!<scales node to fit screen, scroll, center to node origin$/;"	m	struct:NPnode
auxA	data/nptypes.h	/^	NPintXYZ	auxA;						\/\/!<reserved for future use$/;"	m	struct:NPnode
auxB	data/nptypes.h	/^	NPintXYZ	auxB;						\/\/!<reserved for future use$/;"	m	struct:NPnode
average	data/nptypes.h	/^	int			average;					\/\/!<averaging type applied to data$/;"	m	struct:NPnode
axes	data/nptypes.h	/^	NPboolXYZ	axes;					\/\/!<selects active x,y,z, axes			debug, zz$/;"	m	struct:NPio
b	data/nptypes.h	/^	float r,g,b,a;$/;"	m	struct:NPfloatRGBA
b	data/nptypes.h	/^	float r,g,b;$/;"	m	struct:NPfloatRGB
b	data/nptypes.h	/^	unsigned char r,g,b,a;$/;"	m	struct:NPubyteRGBA
baseFloatValue	io/net/nposcpack.cpp	/^	float baseFloatValue[10];      \/\/ some floats are relative to existing value, so this is the starting value$/;"	m	class:OscTrackPacketListener	file:
bias	data/nptypes.h	/^	NPfloatRGBA	bias;						\/\/!<color shift$/;"	m	struct:NPvideo
blackLevel	data/nptypes.h	/^	float		blackLevel;$/;"	m	struct:NPvideo
blinkState	data/nptypes.h	/^	bool		blinkState;			\/\/!<blinking cursor state$/;"	m	struct:NPio
bool	data/stdbool.h	28;"	d
box	data/nptypes.h	/^	NPfloatXY	box;						\/\/!<background box size$/;"	m	struct:NPconsole
boxColor	data/nptypes.h	/^	NPubyteRGBA	boxColor;					\/\/!<color assigned to new data$/;"	m	struct:NPconsole
boxColor	data/nptypes.h	/^	NPubyteRGBA boxColor;		\/\/!<background color of box$/;"	m	struct:NPtag
boxColorIndex	data/nptypes.h	/^	int			boxColorIndex;$/;"	m	struct:NPconsole
boxSize	data/nptypes.h	/^	NPfloatXY	boxSize;$/;"	m	struct:NPtag
branchLevel	data/nptypes.h	/^	int			branchLevel;				\/\/!<0 is the trunk, 1 is 1st branch$/;"	m	struct:NPnode
brightness	data/nptypes.h	/^	float		brightness;$/;"	m	struct:NPvideo
buffer	data/npmapfile.c	/^	char** buffer;		\/\/pointer to the beginning of the buffer$/;"	m	struct:NPbuffer	file:
buffers	io/net/nposcpack.cpp	/^static char buffers[MAX_OSC_SENDERS][OUTPUT_BUFFER_SIZE];$/;"	v	file:
buttonC	data/nptypes.h	/^	bool		buttonC;$/;"	m	struct:NPmouse
buttonL	data/nptypes.h	/^	bool		buttonL;				\/\/!<true when pressed$/;"	m	struct:NPmouse
buttonR	data/nptypes.h	/^	bool		buttonR;$/;"	m	struct:NPmouse
cacheL1	data/nptypes.h	/^	long long cacheL1;		\/\/!<L1 cache per thread$/;"	m	struct:NPcpu
cacheL2	data/nptypes.h	/^	long long cacheL2;		\/\/!<L2 cache per core$/;"	m	struct:NPcpu
cacheL3	data/nptypes.h	/^	long long cacheL3;		\/\/!<L3 cache per CPU$/;"	m	struct:NPcpu
camMode	data/nptypes.h	/^	int			camMode;$/;"	m	struct:NPmouse
ch	data/nptypes.h	/^	NPch		ch;$/;"	m	struct:NPio
chInputID	data/nptypes.h	/^	int			chInputID;					\/\/!<track to node channel_id map$/;"	m	struct:NPnode
chLastUpdated	data/nptypes.h	/^	int			chLastUpdated;				\/\/!<cycle of last channel update$/;"	m	struct:NPnode
chOutputID	data/nptypes.h	/^	int			chOutputID;					\/\/!<node to track record channel_id$/;"	m	struct:NPnode
channelDataSize	data/nptypes.h	/^	int			channelDataSize;		\/\/!< amount of data in each track, any value between 0 and kNPtrackBufferSize$/;"	m	struct:NPch
channelFP	data/nptypes.h	/^	FILE*		channelFP;$/;"	m	struct:NPtrackDataSource
channelFileTokenBuffer	data/nptypes.h	/^	char		channelFileTokenBuffer[kNPmaxLineLength];$/;"	m	struct:NPch
channelFileTokens	data/nptypes.h	/^	char*		channelFileTokens[kNPmaxTokens];			$/;"	m	struct:NPch
channelNextDataChangeTime	data/nptypes.h	/^	long long	channelNextDataChangeTime;	\/\/!< next time to change data (by updating channelReadIndex) on this channel, used with sample rate to determine when to change data$/;"	m	struct:NPch
channelNumber	data/nptypes.h	/^	int			channelNumber;$/;"	m	struct:NPxref
channelReadIndex	data/nptypes.h	/^	int			channelReadIndex;		\/\/!< offset in all tracks, next data to read$/;"	m	struct:NPch
channelSampleRate	data/nptypes.h	/^	int			channelSampleRate;		\/\/!< sample rate for this channel, # of milliseconds to keep same channel data, e.g. 50 === 20 changes per second (1000 ms\/50 ms)$/;"	m	struct:NPch
channelWriteIndex	data/nptypes.h	/^	int			channelWriteIndex;		\/\/!< offset in all tracks, next data to read$/;"	m	struct:NPch
charPerLine	data/nptypes.h	/^	int			charPerLine;				\/\/!<default is 80 characters per line$/;"	m	struct:NPconsole
child	data/nptypes.h	/^	pNPnode		child[kNPnodeChildMax];		\/\/!<children attached to this one	\/\/!<zz debug, update to use a circular linked list$/;"	m	struct:NPnode
child	data/nptypes.h	/^	void*			child;		\/\/\/< first child$/;"	m	struct:NPnode2
childCount	data/nptypes.h	/^	int			childCount;					\/\/!<current number of children$/;"	m	struct:NPnode
childIndex	data/nptypes.h	/^	int			childIndex;					\/\/!<the currently selected child$/;"	m	struct:NPnode
chunk	io/db/npdbz.h	/^	struct newChunkObj *chunk;$/;"	m	struct:newChunksObj	typeref:struct:newChunksObj::newChunkObj
chunkSize	io/db/npdbz.h	/^	int chunkSize;$/;"	m	struct:newChunkObj
clear	data/nptypes.h	/^	NPfloatRGBA clear;				\/\/!<background color for clearing the screen \/\/!<move to gl$/;"	m	struct:NPio
clearFrameBuffer	data/nptypes.h	/^	bool		clearFrameBuffer;	\/\/!<1 to clear screen each draw, 0 accumulates$/;"	m	struct:NPio
clearIndex	data/nptypes.h	/^	int			clearIndex;			\/\/!<background color index, black, white...$/;"	m	struct:NPio
client_flag	io/db/npauxdb.h	/^	unsigned long client_flag;$/;"	m	struct:NPdatabase
clipFar	data/nptypes.h	/^	float		clipFar;$/;"	m	struct:NPcamera
clipNear	data/nptypes.h	/^	float		clipNear;$/;"	m	struct:NPcamera
close	data/nptypes.h	/^	void* (*close)		    ();$/;"	m	struct:NPdbFuncSet
close	io/db/npdbz.h	/^	void* (*close)  ();$/;"	m	struct:dbFunction
cmDX	data/nptypes.h	/^	float		cmDX;$/;"	m	struct:NPmouse
cmDY	data/nptypes.h	/^	float		cmDY;$/;"	m	struct:NPmouse
cmdFunc	data/nptypes.h	/^	void**	cmdFunc;					\/\/!<zz maybe move to data->map->functions[]$/;"	m	struct:NPctrl
color	data/nptypes.h	/^	NPubyteRGBA	color;						\/\/!<color assigned to new data$/;"	m	struct:NPconsole
color	data/nptypes.h	/^	NPubyteRGBA	color;						\/\/!<color assigned to new data$/;"	m	struct:NPnode
color	data/nptypes.h	/^	NPubyteRGBA color;			\/\/!<used for the text and box outline$/;"	m	struct:NPtag
color	data/nptypes.h	/^	pNPmapColor	color[kNPpaletteMax];	\/\/!< #define kNPpaletteMax	65535$/;"	m	struct:NPmap
colorArray	data/nptypes.h	/^	unsigned char	*colorArray;				\/\/!<each point gets color assigned$/;"	m	struct:NPgis
colorArray	data/nptypes.h	/^	unsigned char	*colorArray;				\/\/!<each point gets color assigned$/;"	m	struct:NPsurface
colorArray	data/nptypes.h	/^	unsigned char**	colorArray;				\/\/!<each point gets color assigned$/;"	m	struct:NPpoints
colorFade	data/nptypes.h	/^	int			colorFade;					\/\/!<color alpha fade with time$/;"	m	struct:NPconsole
colorFade	data/nptypes.h	/^	int			colorFade;					\/\/!<cycles to fade color alpha, 0=off$/;"	m	struct:NPnode
colorIndex	data/nptypes.h	/^	int			colorIndex;$/;"	m	struct:NPconsole
colorIndex	data/nptypes.h	/^	int			colorIndex;$/;"	m	struct:NPnode
colorShift	data/nptypes.h	/^	float		colorShift;					\/\/!<pseudo Hue shift, -180 to 180$/;"	m	struct:NPnode
colorSpace	data/nptypes.h	/^	int			colorSpace;					\/\/!<8, 12bit, YUV, RGBA, XYZ, CMYK...$/;"	m	struct:NPcamera
colorSpace	data/nptypes.h	/^	int			colorSpace;					\/\/!<8, 12bit, YUV, RGBA, XYZ, CMYK...$/;"	m	struct:NPvideo
commandIdx	io/net/nposcpack.cpp	/^	int commandIdx;$/;"	m	class:OscTrackPacketListener	file:
comparePinsDistanceFromCamera	io/gl/npgldraw.c	/^int comparePinsDistanceFromCamera (const void* a, const void* b)$/;"	f
conn	data/nptypes.h	/^	void*		conn;			\/\/\/< host connection handle$/;"	m	struct:NPdbHost
conn	io/db/npauxdb.h	/^	MYSQL *conn;$/;"	m	struct:NPdatabase
conn	io/db/npdbz.h	/^	void* conn;	$/;"	m	struct:tableParameters
connect	data/nptypes.h	/^	pNPconnect	connect[kNPmaxConnect];	\/\/!<zz osc$/;"	m	struct:NPio
connect	data/nptypes.h	/^	void* (*connect)		();$/;"	m	struct:NPdbFuncSet
connect	io/db/npdbz.h	/^	void* (*connect)();$/;"	m	struct:dbFunction
connect	io/db/npdbz.h	/^	void* (*connect)(void*);$/;"	m	struct:dbFunctions
connectCount	data/nptypes.h	/^	int			connectCount;$/;"	m	struct:NPio
console	data/nptypes.h	/^	NPconsole	console;$/;"	m	struct:NPhud
contrast	data/nptypes.h	/^	float		contrast;$/;"	m	struct:NPvideo
coordA	data/nptypes.h	/^	NPfloatXYZ	coordA;			\/\/!<start point, mouse down$/;"	m	struct:NPtool
coordB	data/nptypes.h	/^	NPfloatXYZ	coordB;			\/\/!<second point to define region$/;"	m	struct:NPtool
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:Data
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPch
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPconsole
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPcpu
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPctrl
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPdatabases
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPdbs
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPfile
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPgl
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPhud
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPio
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPkey
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPmap
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPmenu
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPmessage
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPmouse
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPnodeList
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPtags
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPtool
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPtrackDataSource
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPuser
coreNode	data/nptypes.h	/^	void* coreNode; \/\/\/< core nodes tie global structures to the scene graph$/;"	m	struct:NPuserEnvironment
cores	data/nptypes.h	/^	int cores;				\/\/!<NUMA systems have up to 2048+ cores per partition$/;"	m	struct:NPcpu
coresPerCPU	data/nptypes.h	/^	int coresPerCPU;		\/\/!<1,2,4,6,8,12,16...$/;"	m	struct:NPcpu
count	data/nptypes.h	/^	int					count;	\/\/\/< number of items in the list$/;"	m	struct:NPmapNodeID
count	data/nptypes.h	/^	int				count;			\/\/!<number of items in list$/;"	m	struct:NPmapColor
count	data/nptypes.h	/^	int			count;			\/\/!<number of items in list$/;"	m	struct:NPosc
count	data/nptypes.h	/^	int			count;			\/\/!<number of items in list$/;"	m	struct:NPqueList
count	data/nptypes.h	/^	int			count;		\/\/\/< number of field columns$/;"	m	struct:NPdbFields
count	data/nptypes.h	/^	int			count;	\/\/!<zz debug, change to listCount$/;"	m	struct:NPtags
count	data/nptypes.h	/^	int		count;		\/\/\/< number of item pairs in the lists$/;"	m	struct:NPmapID
count	data/nptypes.h	/^	int		count;$/;"	m	struct:NPnodeList
count	data/nptypes.h	/^	int		count;$/;"	m	struct:NPrecordSet
count	data/nptypes.h	/^	int count;			\/\/!<number of items in the list$/;"	m	struct:NPmenu
counter	io/net/nposcpack.cpp	/^	int counter;$/;"	m	class:LineList	file:
counter	io/npch.c	/^int counter = 0;$/;"	v
cpu	data/nptypes.h	/^	NPcpu	cpu;$/;"	m	struct:NPctrl
createEvent	data/nptypes.h	/^	bool		createEvent;			\/\/!<used to create click, but not drag so cam works$/;"	m	struct:NPmouse
csvObj	io/db/npdbz.h	/^	struct csvStrObj *csvObj;$/;"	m	struct:csvStrObjects	typeref:struct:csvStrObjects::csvStrObj
csvObjects	io/db/npdbz.h	/^	struct csvStrObjects *csvObjects;$/;"	m	struct:newChunkObj	typeref:struct:newChunkObj::csvStrObjects
csvPath	data/nptypes.h	/^	char		csvPath[kNPmaxPath];$/;"	m	struct:NPfile
csvStr	io/db/npdbz.h	/^	char *csvStr;$/;"	m	struct:csvStrObj
csvStrObj	io/db/npdbz.h	/^struct csvStrObj$/;"	s
csvStrObjects	io/db/npdbz.h	/^struct csvStrObjects$/;"	s
csvTokenize	io/net/nposcpack.cpp	/^	void csvTokenize( const char* textLine, char* tempBuffer, char** tokenList )$/;"	f	class:CsvTrackPacketListener
ctrl	data/nptypes.h	/^	NPctrl	ctrl;		\/\/!< Control - ctrl$/;"	m	struct:Data
ctrlInitialized	npctrl.c	/^bool ctrlInitialized = false;		\/\/prevents calls to CtrlCommand before init$/;"	v
current	io/db/npauxdb.h	/^	struct queue_node *current;$/;"	m	struct:queue	typeref:struct:queue::queue_node
currentCam	data/nptypes.h	/^	pNPnode		currentCam;				\/\/!<active camera used for zsort distance$/;"	m	struct:NPmap
currentNode	data/nptypes.h	/^	pNPnode		currentNode;			\/\/!<active node, commands, traversing tree$/;"	m	struct:NPmap
currentOpenPath	data/nptypes.h	/^	char		currentOpenPath[kNPmaxPath];$/;"	m	struct:NPfile
currentlyUsedDatabase	io/db/npdbz.h	/^	char currentlyUsedDatabase[kNPurlMax];$/;"	m	struct:database
cursorColumn	data/nptypes.h	/^	int			cursorColumn;				\/\/!<current cursor column number$/;"	m	struct:NPconsole
cursorLine	data/nptypes.h	/^	int			cursorLine;					\/\/!<current cursor line number$/;"	m	struct:NPconsole
cursorShow	data/nptypes.h	/^	bool		cursorShow;					\/\/!<display a blinking cursor$/;"	m	struct:NPconsole
cursorType	data/nptypes.h	/^	int			cursorType;$/;"	m	struct:NPconsole
cycleCount	data/nptypes.h	/^	int			cycleCount;			\/\/!<number of cycles since app startup$/;"	m	struct:NPio
cycleDelta	data/nptypes.h	/^	double		cycleDelta;			\/\/!<the actual duration of the last cycle$/;"	m	struct:NPio
cyclePeriod	data/nptypes.h	/^	double		cyclePeriod;		\/\/!<period calculated from rate$/;"	m	struct:NPio
cycleRateHz	data/nptypes.h	/^	double		cycleRateHz;		\/\/!<target rate, not necessarily the actual$/;"	m	struct:NPio
data	data/nptypes.h	/^	void*			data;		\/\/\/< node data specific to node type$/;"	m	struct:NPnode2
data	data/nptypes.h	/^	void*		data;						\/\/!<node type specific data$/;"	m	struct:NPnode
data	data/nptypes.h	/^	void*	data;$/;"	m	struct:NPqueCmd
data	data/nptypes.h	/^	void*	data;$/;"	m	struct:NPqueItem
dataRef	data/nptypes.h	/^	void* dataRef;$/;"	m	struct:NPthreadFile
dataRef	io/net/nposcpack.cpp	/^	void* dataRef;$/;"	m	class:CsvTrackPacketListener	file:
dataRef_	io/net/nposcpack.cpp	/^	void* dataRef_;$/;"	m	class:OscAntzPacketListener	file:
dataRef_	io/net/nposcpack.cpp	/^	void* dataRef_;$/;"	m	class:OscTrackPacketListener	file:
dataSourceType	data/nptypes.h	/^	int			dataSourceType;$/;"	m	struct:NPtrackDataSource
dataType	data/nptypes.h	/^	int*		dataType;		\/\/!<points to an int of the data type,$/;"	m	struct:NPnodeData
database	io/db/npdbz.h	/^struct database {$/;"	s
databases	io/db/npdbz.h	/^struct databases \/\/This should be renamed as struct server ...or not$/;"	s
datasetName	data/nptypes.h	/^	char		datasetName[kNPmaxPath];	\/\/!<used by screenGrab$/;"	m	struct:NPgl
db	data/nptypes.h	/^	NPdbs		db;$/;"	m	struct:NPio
db	io/db/npauxdb.h	/^	char*	db;$/;"	m	struct:NPdatabase
dbCount	data/nptypes.h	/^	int				dbCount;			\/\/\/< number of databases$/;"	m	struct:NPdbs
dbCount	data/nptypes.h	/^	int			dbCount;				\/\/\/< number of databases for this host$/;"	m	struct:NPdbHost
dbFunc	io/db/npdbz.h	/^	struct dbFunction *dbFunc;$/;"	m	struct:database	typeref:struct:database::dbFunction
dbFunction	io/db/npdbz.h	/^struct dbFunction {$/;"	s
dbFunctions	io/db/npdbz.h	/^struct dbFunctions {$/;"	s
dbLib	data/nptypes.h	/^	void*		dbLib;					\/\/\/< library handle$/;"	m	struct:NPdbFuncSet
dbList	data/nptypes.h	/^	pNPdatabase		dbList[kNPdbMax];	\/\/\/< list of databases$/;"	m	struct:NPdbs
dbList	io/db/npdbz.h	/^	pNPdatabases dbList;	\/\/\/< @todo make this pNPdatabase* dbList$/;"	m	struct:databases
dbType	io/db/npdbz.h	/^	char dbType[kNPurlMax];   \/\/ "mysql" "oracle" "postgresql", etc...$/;"	m	struct:database
db_errno	data/nptypes.h	/^	void* (*db_errno)		();$/;"	m	struct:NPdbFuncSet
db_errno	io/db/npdbz.h	/^	void* (*db_errno) ();$/;"	m	struct:dbFunction
db_error	data/nptypes.h	/^	void* (*db_error)		();$/;"	m	struct:NPdbFuncSet
db_error	io/db/npdbz.h	/^	void* (*db_error) ();$/;"	m	struct:dbFunction
db_fetch_lengths	io/db/npdbz.h	/^	void* (*db_fetch_lengths) ();$/;"	m	struct:dbFunction
db_fetch_row	io/db/npdbz.h	/^	void* (*db_fetch_row) ();$/;"	m	struct:dbFunction
db_num_fields	io/db/npdbz.h	/^	void* (*db_num_fields) ();$/;"	m	struct:dbFunction
db_num_rows	io/db/npdbz.h	/^	void* (*db_num_rows) ();$/;"	m	struct:dbFunction
dbs	data/nptypes.h	/^	struct databases *dbs;			\/\/!<zz dbz$/;"	m	struct:NPio	typeref:struct:NPio::databases
delta	data/nptypes.h	/^	NPfloatXYZ	delta;					\/\/!<mouse vector$/;"	m	struct:NPmouse
deltaR	data/nptypes.h	/^	NPfloatXYZA deltaR;$/;"	m	struct:NPtool
deltaSum	data/nptypes.h	/^	NPfloatXYZ	deltaSum;				\/\/!<sum of deltas, clears each NPE period$/;"	m	struct:NPmouse
deltaT	data/nptypes.h	/^	NPfloatXYZ  deltaT;			\/\/!<current - previous$/;"	m	struct:NPtool
deque	data/nptypes.h	/^	int			deque;			\/\/!<front deque read index chases enque$/;"	m	struct:NPque
desc	data/nptypes.h	/^	char		desc[kNPtagDescMax + 1];	\/\/!<allows for newline in desc$/;"	m	struct:NPtag
desc	data/nptypes.h	/^	char		desc[kNPtagDescMax + 3];	\/\/!<allows for newline in desc$/;"	m	struct:NPrecordTag
desc	data/nptypes.h	/^	char	desc[kNPnameMax];$/;"	m	struct:NPmapLink
desc	data/nptypes.h	/^	char*		desc;					\/\/\/< function description$/;"	m	struct:NPdbFunction
desc	data/nptypes.h	/^	char*	desc;$/;"	m	struct:NPmapType
descSize	data/nptypes.h	/^	int			descSize;			\/\/!<number of characters in description$/;"	m	struct:NPrecordTag
descSize	data/nptypes.h	/^	int			descSize;		\/\/!<number of characters in description$/;"	m	struct:NPtag
details	data/nptypes.h	/^	char* details;$/;"	m	struct:NPmenu
distFromCamera	data/nptypes.h	/^	float		distFromCamera;				\/\/!<MB-Transp					\/\/!<zz debug$/;"	m	struct:NPnode
doubleClick	data/nptypes.h	/^	bool		doubleClick;$/;"	m	struct:NPmouse
drawAxes	data/nptypes.h	/^	bool		drawAxes;$/;"	m	struct:NPhud
drawCompass	data/nptypes.h	/^	bool		drawCompass;$/;"	m	struct:NPhud
drawConsole	data/nptypes.h	/^	bool		drawConsole;$/;"	m	struct:NPhud
drawCoord	data/nptypes.h	/^	bool		drawCoord;$/;"	m	struct:NPhud
drawFPS	data/nptypes.h	/^	bool		drawFPS;$/;"	m	struct:NPhud
drawMenu	data/nptypes.h	/^	int			drawMenu;$/;"	m	struct:NPio
drawMouseMode	data/nptypes.h	/^	bool		drawMouseMode;$/;"	m	struct:NPhud
drawSelectMode	data/nptypes.h	/^	bool		drawSelectMode;$/;"	m	struct:NPhud
drawTags	data/nptypes.h	/^	bool		drawTags;$/;"	m	struct:NPhud
dump	io/net/nposcpack.cpp	/^	void dump() {$/;"	f	class:LineList
dynamic	data/nptypes.h	/^	bool		dynamic;		\/\/!<flag triggers resize on overflow$/;"	m	struct:NPque
echoFloat	io/net/nposcpack.cpp	/^	bool echoFloat[10];$/;"	m	class:OscTrackPacketListener	file:
echoMessage	io/net/nposcpack.cpp	/^	const char* echoMessage[10];$/;"	m	class:OscTrackPacketListener	file:
echoPort	io/net/nposcpack.cpp	/^	int echoPort[10];$/;"	m	class:OscTrackPacketListener	file:
elementA	data/nptypes.h	/^	char	elementA[kNPelementMax];		\/\/!<name of the sub-member object$/;"	m	struct:NPmapLink
elementA	data/nptypes.h	/^	char	elementA[kNPelementMax];	\/\/!<element and type are associated$/;"	m	struct:NPmapPair
elementB	data/nptypes.h	/^	char	elementB[kNPelementMax];	\/\/!<OSC address, URL, table field name$/;"	m	struct:NPmapLink
elementB	data/nptypes.h	/^	char	elementB[kNPelementMax];	\/\/!<name of the sub-member object \/\/!<OSC address, URL, table field name$/;"	m	struct:NPmapPair
elementID	data/nptypes.h	/^	int		elementID;	\/\/!<typeA		\/\/!<mapPtr = npGetMapID(mapID); \/\/!<and vice versa$/;"	m	struct:NPmapLink
enque	data/nptypes.h	/^	int			enque;			\/\/!<back enque write index cannot pass deque$/;"	m	struct:NPque
environment	data/nptypes.h	/^	pNPuserEnvironment environment;		\/\/!<zz perhaps move to map->user[] question is public or private$/;"	m	struct:NPuser
exposure	data/nptypes.h	/^	float		exposure;					\/\/!<in seconds$/;"	m	struct:NPcamera
facet	data/nptypes.h	/^	int			facet;						\/\/!<topo face number$/;"	m	struct:NPnode
factor	data/nptypes.h	/^	NPfloatXYZS	factor;				\/\/!<multiplies the value for scaling range$/;"	m	struct:NPlabel
false	data/stdbool.h	30;"	d
fast	data/nptypes.h	/^	float	fast;						\/\/!< fast velocity, shift key pressed $/;"	m	struct:NPctrl
fetch_lengths	data/nptypes.h	/^	void* (*fetch_lengths)  ();$/;"	m	struct:NPdbFuncSet
fetch_row	data/nptypes.h	/^	void* (*fetch_row)	    ();$/;"	m	struct:NPdbFuncSet
fieldName	io/db/npauxdb.h	/^	char* fieldName;$/;"	m	struct:fieldvalue
fieldSize	io/db/npauxdb.h	/^	int fieldSize;$/;"	m	struct:fieldvalue
fieldType	io/db/npauxdb.h	/^	int fieldType;$/;"	m	struct:fieldvalue
fields	data/nptypes.h	/^	pNPdbFields	fields;		\/\/\/< field descriptor$/;"	m	struct:NPdbTable
fieldvalue	io/db/npauxdb.h	/^struct fieldvalue$/;"	s
fifo	data/nptypes.h	/^	NPqueList	fifo;				\/\/!<io buffering for data and command sync$/;"	m	struct:NPio
file	data/nptypes.h	/^	FILE* file;$/;"	m	struct:NPthreadFile
file	data/nptypes.h	/^	NPfile		file;$/;"	m	struct:NPio
filePath	data/nptypes.h	/^	char* filePath;$/;"	m	struct:NPthreadFile
first	io/db/npauxdb.h	/^	struct queue_node *first;$/;"	m	struct:queue	typeref:struct:queue::queue_node
floatTargetMaximumValue	io/net/nposcpack.cpp	/^	float floatTargetMaximumValue[10];$/;"	m	class:OscTrackPacketListener	file:
floatTargetMinimumValue	io/net/nposcpack.cpp	/^	float floatTargetMinimumValue[10];               \/\/ minimum and maximum destination values$/;"	m	class:OscTrackPacketListener	file:
floatTracks	data/nptypes.h	/^	NPnodePropertyTracks	floatTracks;\/\/!< tracks associated with "float" Node properties$/;"	m	struct:NPch
font	data/nptypes.h	/^	void*		font;$/;"	m	struct:NPconsole
font	data/nptypes.h	/^	void*		font;$/;"	m	struct:NPtag
format	data/nptypes.h	/^	int			format;						\/\/!<320p, 480i, 720p, 4K full app$/;"	m	struct:NPcamera
format	data/nptypes.h	/^	int			format;						\/\/!<320p, 480i, 720p, 4K full app$/;"	m	struct:NPvideo
format	data/nptypes.h	/^	int			format;					\/\/\/< content format, antz or 3rd party$/;"	m	struct:NPdatabase
formatID	data/nptypes.h	/^	int			formatID;					\/\/!<DB translation to antz field, label$/;"	m	struct:NPnode
fov	data/nptypes.h	/^	float		fov;						\/\/!<FOV 35mm, 70mm...$/;"	m	struct:NPcamera
fps	data/nptypes.h	/^	NPtag		fps;$/;"	m	struct:NPhud
fps	data/nptypes.h	/^	float		fps;						\/\/!< 15, 24, 29.97, 30, 59.94, 120...$/;"	m	struct:NPcamera
fps	data/nptypes.h	/^	float		fps;						\/\/!< 15, 24, 29.97, 30, 59.94, 120...$/;"	m	struct:NPvideo
freeResult	io/db/npdbz.h	/^	void* (*freeResult) ();$/;"	m	struct:dbFunction
free_result	data/nptypes.h	/^	void* (*free_result)	();$/;"	m	struct:NPdbFuncSet
freeze	data/nptypes.h	/^	bool		freeze;						\/\/!<freezes data and physics updates$/;"	m	struct:NPconsole
freeze	data/nptypes.h	/^	bool		freeze;						\/\/!<freezes data and physics updates$/;"	m	struct:NPnode
fullFilePath	data/nptypes.h	/^	char*		fullFilePath;$/;"	m	struct:NPtrackDataSource
fullscreen	data/nptypes.h	/^	int			fullscreen;$/;"	m	struct:NPgl
funcPtr	data/nptypes.h	/^	void*		funcPtr;				\/\/\/< pointer to the function$/;"	m	struct:NPdbFunction
funcPtr	data/nptypes.h	/^	void*	funcPtr;$/;"	m	struct:NPqueCmd
funcSetCount	data/nptypes.h	/^	int				funcSetCount;				  \/\/\/< function set count$/;"	m	struct:NPdbs
funcSetList	data/nptypes.h	/^	pNPdbFuncSet	funcSetList[kNPdbFuncSetMax]; \/\/\/< host type specific$/;"	m	struct:NPdbs
g	data/nptypes.h	/^	float r,g,b,a;$/;"	m	struct:NPfloatRGBA
g	data/nptypes.h	/^	float r,g,b;$/;"	m	struct:NPfloatRGB
g	data/nptypes.h	/^	unsigned char r,g,b,a;$/;"	m	struct:NPubyteRGBA
gData	npdata.c	/^void* gData;$/;"	v
gThreadFilePath	data/npmapfile.c	/^const char* gThreadFilePath;$/;"	v
gThreadTagFileLock	data/npmapfile.c	/^bool gThreadTagFileLock;$/;"	v
gain	data/nptypes.h	/^	NPfloatRGBA	gain;						\/\/!<color multiplier$/;"	m	struct:NPvideo
geometry	data/nptypes.h	/^	int			geometry;					\/\/!<cube, sphere, pin, FFT mesh...$/;"	m	struct:NPnode
gl	data/nptypes.h	/^	NPgl		gl;$/;"	m	struct:NPio
glContext	data/nptypes.h	/^	int			glContext;		\/\/!<multiple windows can share a GL context$/;"	m	struct:NPgl
globalsCount	data/nptypes.h	/^	int			globalsCount;$/;"	m	struct:NPmap
height	data/nptypes.h	/^	int			height;			\/\/!<do not set this, is set by actual dimensions$/;"	m	struct:NPgl
height	data/nptypes.h	/^	int			height;$/;"	m	struct:NPcamera
height	data/nptypes.h	/^	int			height;$/;"	m	struct:NPvideo
hide	data/nptypes.h	/^	bool		hide;						\/\/!<hide the node, data stays active$/;"	m	struct:NPconsole
hide	data/nptypes.h	/^	bool		hide;						\/\/!<hide the node, data stays active$/;"	m	struct:NPnode
historyMax	data/nptypes.h	/^	int			historyMax;					\/\/!<max number of lines stored$/;"	m	struct:NPconsole
host	data/nptypes.h	/^	pNPdbHost	host;		\/\/\/< references this databases host$/;"	m	struct:NPdatabase
host	io/db/npauxdb.h	/^	char*	host;$/;"	m	struct:NPdatabase
hostCount	data/nptypes.h	/^	int				hostCount;				\/\/\/< number of DB host servers$/;"	m	struct:NPdbs
hostFuncSet	data/nptypes.h	/^	pNPdbFuncSet hostFuncSet;			\/\/\/< function calls for this host type$/;"	m	struct:NPdbHost
hostIP	io/db/npdbz.h	/^	char hostIP[kNPurlMax];   \/\/ This could be static$/;"	m	struct:database
hostType	data/nptypes.h	/^	char		hostType[kNPdbNameMax];	\/\/\/< content type, antz or 3rd party$/;"	m	struct:NPdbFuncSet
hosts	data/nptypes.h	/^	pNPdbHost		hosts[kNPdbHostMax];	\/\/\/< list of database hosts$/;"	m	struct:NPdbs
hud	data/nptypes.h	/^	NPhud		hud;			\/\/!<one HUD per window$/;"	m	struct:NPgl
hudType	data/nptypes.h	/^	int			hudType;					\/\/!<removethis, use existing param \/\/!<zz debug$/;"	m	struct:NPnode
hue	data/nptypes.h	/^	float		hue;$/;"	m	struct:NPvideo
id	data/nptypes.h	/^	int				id;$/;"	m	struct:NPmapColor
id	data/nptypes.h	/^	int			id;							\/\/!<local node ID $/;"	m	struct:NPnode
id	data/nptypes.h	/^	int			id;							\/\/!<node ID$/;"	m	struct:NPcamera
id	data/nptypes.h	/^	int			id;							\/\/!<node ID$/;"	m	struct:NPgis
id	data/nptypes.h	/^	int			id;							\/\/!<node ID$/;"	m	struct:NPgrid
id	data/nptypes.h	/^	int			id;							\/\/!<node ID$/;"	m	struct:NPnodeData
id	data/nptypes.h	/^	int			id;							\/\/!<node ID$/;"	m	struct:NPpin
id	data/nptypes.h	/^	int			id;							\/\/!<node ID$/;"	m	struct:NPpoints
id	data/nptypes.h	/^	int			id;							\/\/!<node ID$/;"	m	struct:NPsurface
id	data/nptypes.h	/^	int			id;							\/\/!<node ID$/;"	m	struct:NPvideo
id	data/nptypes.h	/^	int			id;						\/\/\/< the function set ID$/;"	m	struct:NPdbFuncSet
id	data/nptypes.h	/^	int			id;						\/\/\/< this databases ID$/;"	m	struct:NPdatabase
id	data/nptypes.h	/^	int			id;					\/\/!<the first column is table id key$/;"	m	struct:NPrecordTag
id	data/nptypes.h	/^	int			id;				\/\/!<the node ID used to store this GL item $/;"	m	struct:NPgl
id	data/nptypes.h	/^	int			id;				\/\/\/< local host ID unique to this session only$/;"	m	struct:NPdbHost
id	data/nptypes.h	/^	int			id;			\/\/\/< local table ID for this database$/;"	m	struct:NPdbTable
id	data/nptypes.h	/^	int			id;$/;"	m	struct:NPosc
id	data/nptypes.h	/^	int			id;$/;"	m	struct:NPque
id	data/nptypes.h	/^	int			id;$/;"	m	struct:NPqueList
id	data/nptypes.h	/^	int		id;				\/\/!<db_id reference$/;"	m	struct:NPnodeList
id	data/nptypes.h	/^	int		id;$/;"	m	struct:NPmapType
id	data/nptypes.h	/^	int		id;$/;"	m	struct:NPoscItem
id	data/nptypes.h	/^	long long int	id;			\/\/\/< node id$/;"	m	struct:NPnode2
id	data/nptypes.h	/^	long long int	id;		\/\/\/< either scene node id or other (DB) id mapping$/;"	m	struct:NPmapItemNodeID
id	io/db/npdbz.h	/^	void* id;$/;"	m	struct:database
id	io/net/nposcpack.h	/^	int id;$/;"	m	struct:NPoscPackListener
id	io/npkey.c	/^	int		id;$/;"	m	struct:NPkeyMap	file:
idMap	io/db/npdbz.h	/^	int* idMap;$/;"	m	struct:database
inUseDB	data/nptypes.h	/^	char		inUseDB[kNPdbNameMax];	\/\/\/< name of DB currently in USE$/;"	m	struct:NPdbHost
incomingCommands	io/net/nposcpack.cpp	/^	const char* incomingCommands[kNPmaxCommands];$/;"	m	class:OscTrackPacketListener	file:
incomingDataTypeSpecifications	io/net/nposcpack.cpp	/^	const char* incomingDataTypeSpecifications[10];  \/\/ what data type we expect it to be$/;"	m	class:OscTrackPacketListener	file:
incomingFloatValue	io/net/nposcpack.cpp	/^	float incomingFloatValue[10];  \/\/ the value we extracted from Osc message$/;"	m	class:OscTrackPacketListener	file:
incomingOscMessages	io/net/nposcpack.cpp	/^	const char* incomingOscMessages[10];  \/\/ what message comes in$/;"	m	class:OscTrackPacketListener	file:
incomingParameterOffsets	io/net/nposcpack.cpp	/^	int incomingParameterOffsets[10];     \/\/ which parameter we access$/;"	m	class:OscTrackPacketListener	file:
index	data/nptypes.h	/^	int				index;			\/\/!<current color$/;"	m	struct:NPmapColor
index	data/nptypes.h	/^	int			index;$/;"	m	struct:NPnodeData
index	data/nptypes.h	/^	int index;			\/\/!<default or currently selected menu item$/;"	m	struct:NPmenu
init	data/nptypes.h	/^	void* (*init)			();$/;"	m	struct:NPdbFuncSet
init	io/db/npdbz.h	/^	void* (*init)   ();$/;"	m	struct:dbFunction
initAdapter	io/net/nposcpack.cpp	/^void initAdapter()$/;"	f
innerRadius	data/nptypes.h	/^	float		innerRadius;				\/\/!<inner radius of the toroid$/;"	m	struct:NPpin
inputIndex	data/nptypes.h	/^	int			inputIndex;$/;"	m	struct:NPconsole
inputStr	data/nptypes.h	/^	char		inputStr[kNPinputStrMax + 1];	\/\/!<user input, +1 for null '\\0'$/;"	m	struct:NPconsole
insert	data/nptypes.h	/^	void* (*insert)		    ();$/;"	m	struct:NPdbFuncSet
insert	io/db/npdbz.h	/^	void* (*insert) ();$/;"	m	struct:dbFunction
insertText	data/nptypes.h	/^	int			insertText;	\/\/!<\/\/!<selectText$/;"	m	struct:NPconsole
intTracks	data/nptypes.h	/^	NPnodePropertyTracks	intTracks;	\/\/!< tracks associated with "int" Node properties$/;"	m	struct:NPch
interlaced	data/nptypes.h	/^	int			interlaced;					\/\/!<interlaced field order$/;"	m	struct:NPcamera
interlaced	data/nptypes.h	/^	int			interlaced;					\/\/!<interlaced field order$/;"	m	struct:NPvideo
interval	data/nptypes.h	/^	int			interval;					\/\/!<the interval to be averaged$/;"	m	struct:NPnode
inverseMatrix	data/nptypes.h	/^	float		inverseMatrix[16];			\/\/!<for local to world coord convert$/;"	m	struct:NPcamera
io	data/nptypes.h	/^	NPio	io;			\/\/!< View    - io$/;"	m	struct:Data
ip	data/nptypes.h	/^	char		ip[kNPurlMax];			\/\/\/< IP address or URL$/;"	m	struct:NPdbHost
item	data/nptypes.h	/^	void*		item;$/;"	m	struct:NPdataItem
itemA	data/nptypes.h	/^	int		itemA;						\/\/!<item ID = np_map_row_id = array[item]$/;"	m	struct:NPmapPair
itemA	data/nptypes.h	/^	int		itemA;						\/\/!<itemID = np_map_row_id = array[item]$/;"	m	struct:NPmapLink
itemB	data/nptypes.h	/^	int		itemB;						\/\/!<item ID, array index, osc_id$/;"	m	struct:NPmapLink
itemB	data/nptypes.h	/^	int		itemB;						\/\/!<item ID, array index, osc_id$/;"	m	struct:NPmapPair
justify	data/nptypes.h	/^	int			justify;$/;"	m	struct:NPconsole
k2PI	data/npmath.h	32;"	d
kAverage	data/nptypes.h	/^	kAverage,$/;"	e	enum:kNP_AVERAGE_TYPE
kAverageNull	data/nptypes.h	/^	kAverageNull = 0,$/;"	e	enum:kNP_AVERAGE_TYPE
kAverageRootMeanSquare	data/nptypes.h	/^	kAverageRootMeanSquare,$/;"	e	enum:kNP_AVERAGE_TYPE
kAverageRunning	data/nptypes.h	/^	kAverageRunning$/;"	e	enum:kNP_AVERAGE_TYPE
kAverageSmoothed	data/nptypes.h	/^	kAverageSmoothed,$/;"	e	enum:kNP_AVERAGE_TYPE
kCameraSensorDebayerCCD	data/nptypes.h	/^	kCameraSensorDebayerCCD,				\/\/!<single color CCD debayer pattern$/;"	e	enum:kNP_CAMERA_SENSOR_TYPE
kCameraSensorDepthCCD	data/nptypes.h	/^	kCameraSensorDepthCCD					\/\/!<BW or color with Z depth data$/;"	e	enum:kNP_CAMERA_SENSOR_TYPE
kCameraSensorMonoCCD	data/nptypes.h	/^	kCameraSensorMonoCCD,					\/\/!<monochrome CCD such as BW, IR$/;"	e	enum:kNP_CAMERA_SENSOR_TYPE
kCameraSensorNull	data/nptypes.h	/^	kCameraSensorNull = 0,					\/\/!<don't know the sensor type$/;"	e	enum:kNP_CAMERA_SENSOR_TYPE
kCameraSensorThreeCCD	data/nptypes.h	/^	kCameraSensorThreeCCD,					\/\/!<3CCD color sensor$/;"	e	enum:kNP_CAMERA_SENSOR_TYPE
kChannelCycleCount	data/nptypes.h	/^	kChannelCycleCount,$/;"	e	enum:kNP_CHANNEL_MISC
kChannelNull	data/nptypes.h	/^	kChannelNull = 0,$/;"	e	enum:kNP_CHANNEL_MISC
kChannelOscilloscope	data/nptypes.h	/^	kChannelOscilloscope$/;"	e	enum:kNP_CHANNEL_MISC
kColorSpaceCMYK_16	data/nptypes.h	/^	kColorSpaceCMYK_16,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceCMYK_8	data/nptypes.h	/^	kColorSpaceCMYK_8,			\/\/!<bits per channel$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceNull	data/nptypes.h	/^	kColorSpaceNull = 0,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceRGBA_10	data/nptypes.h	/^	kColorSpaceRGBA_10,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceRGBA_12	data/nptypes.h	/^	kColorSpaceRGBA_12,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceRGBA_16	data/nptypes.h	/^	kColorSpaceRGBA_16,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceRGBA_24	data/nptypes.h	/^	kColorSpaceRGBA_24,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceRGBA_32	data/nptypes.h	/^	kColorSpaceRGBA_32,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceRGBA_8	data/nptypes.h	/^	kColorSpaceRGBA_8,			\/\/!<bits per channel$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceRGB_10	data/nptypes.h	/^	kColorSpaceRGB_10,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceRGB_12	data/nptypes.h	/^	kColorSpaceRGB_12,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceRGB_16	data/nptypes.h	/^	kColorSpaceRGB_16,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceRGB_24	data/nptypes.h	/^	kColorSpaceRGB_24,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceRGB_32	data/nptypes.h	/^	kColorSpaceRGB_32,	$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceRGB_8	data/nptypes.h	/^	kColorSpaceRGB_8,			\/\/!<bits per channel$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceYUVA_422_10	data/nptypes.h	/^	kColorSpaceYUVA_422_10,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceYUVA_422_12	data/nptypes.h	/^	kColorSpaceYUVA_422_12,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceYUVA_422_8	data/nptypes.h	/^	kColorSpaceYUVA_422_8,		\/\/!<bits per channel$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceYUVA_444_10	data/nptypes.h	/^	kColorSpaceYUVA_444_10,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceYUVA_444_12	data/nptypes.h	/^	kColorSpaceYUVA_444_12,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceYUVA_444_16	data/nptypes.h	/^	kColorSpaceYUVA_444_16,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceYUVA_444_8	data/nptypes.h	/^	kColorSpaceYUVA_444_8,		\/\/!<bits per channel$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceYUV_422_10	data/nptypes.h	/^	kColorSpaceYUV_422_10,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceYUV_422_12	data/nptypes.h	/^	kColorSpaceYUV_422_12,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceYUV_422_8	data/nptypes.h	/^	kColorSpaceYUV_422_8,		\/\/!<bits per channel$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceYUV_444_10	data/nptypes.h	/^	kColorSpaceYUV_444_10,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceYUV_444_12	data/nptypes.h	/^	kColorSpaceYUV_444_12,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceYUV_444_16	data/nptypes.h	/^	kColorSpaceYUV_444_16,$/;"	e	enum:kNP_COLOR_SPACE
kColorSpaceYUV_444_8	data/nptypes.h	/^	kColorSpaceYUV_444_8,		\/\/!<bits per channel$/;"	e	enum:kNP_COLOR_SPACE
kDataFromFile	data/nptypes.h	/^	kDataFromFile,$/;"	e	enum:__anon1
kDataFromUDP	data/nptypes.h	/^	kDataFromUDP$/;"	e	enum:__anon1
kDataSourceUndefined	data/nptypes.h	/^	kDataSourceUndefined,$/;"	e	enum:__anon1
kGlutKeyDown	data/nptypes.h	/^	kGlutKeyDown = 1,$/;"	e	enum:kNP_KEY_EVENT_GLUT_SPECIAL
kGlutKeyDownSpecial	data/nptypes.h	/^	kGlutKeyDownSpecial,$/;"	e	enum:kNP_KEY_EVENT_GLUT_SPECIAL
kGlutKeyUp	data/nptypes.h	/^	kGlutKeyUp,$/;"	e	enum:kNP_KEY_EVENT_GLUT_SPECIAL
kGlutKeyUpSpecial	data/nptypes.h	/^	kGlutKeyUpSpecial$/;"	e	enum:kNP_KEY_EVENT_GLUT_SPECIAL
kKeyCode1	data/nptypes.h	/^				kKeyCode1,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCode2	data/nptypes.h	/^				kKeyCode2,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCode3	data/nptypes.h	/^				kKeyCode3,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCode4	data/nptypes.h	/^				kKeyCode4,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCode5	data/nptypes.h	/^				kKeyCode5,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCode6	data/nptypes.h	/^				kKeyCode6,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCode7	data/nptypes.h	/^				kKeyCode7,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCode8	data/nptypes.h	/^				kKeyCode8,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCode9	data/nptypes.h	/^				kKeyCode9,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeA	data/nptypes.h	/^	kKeyCodeA = 0x00,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeAltLeft	io/npkey.c	/^	kKeyCodeAltLeft,$/;"	e	enum:__anon6	file:
kKeyCodeAltRight	io/npkey.c	/^	kKeyCodeAltRight$/;"	e	enum:__anon6	file:
kKeyCodeB	data/nptypes.h	/^				kKeyCodeB = 0x0b,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeBackSlash	data/nptypes.h	/^				kKeyCodeBackSlash,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeBackSpace	data/nptypes.h	/^				kKeyCodeBackSpace,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeC	data/nptypes.h	/^				kKeyCodeC,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeCapsLock	io/npkey.c	/^	kKeyCodeCapsLock,$/;"	e	enum:__anon6	file:
kKeyCodeComma	data/nptypes.h	/^				kKeyCodeComma,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeControlLeft	io/npkey.c	/^	kKeyCodeControlLeft,$/;"	e	enum:__anon6	file:
kKeyCodeControlRight	io/npkey.c	/^	kKeyCodeControlRight,$/;"	e	enum:__anon6	file:
kKeyCodeD	data/nptypes.h	/^				kKeyCodeD,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeDelete	data/nptypes.h	/^				kKeyCodeDelete = 0x33,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeDeleteRight	data/nptypes.h	/^				kKeyCodeDeleteRight = 0x75,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeDown	data/nptypes.h	/^				kKeyCodeDown = 0x7D,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeE	data/nptypes.h	/^				kKeyCodeE,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeESC	data/nptypes.h	/^				kKeyCodeESC = 0x35,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeEnd	data/nptypes.h	/^				kKeyCodeEnd = 0x77,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeEqual	data/nptypes.h	/^				kKeyCodeEqual,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeF	data/nptypes.h	/^				kKeyCodeF,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeF1	data/nptypes.h	/^				kKeyCodeF1 = 0x7A,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeF13	data/nptypes.h	/^				kKeyCodeF13 = 0x69,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeF16	data/nptypes.h	/^				kKeyCodeF16 = 0x6A,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeF2	data/nptypes.h	/^				kKeyCodeF2 = 0x78,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeF3	data/nptypes.h	/^				kKeyCodeF3 = 0x63,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeF4	data/nptypes.h	/^				kKeyCodeF4 = 0x76,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeF5	data/nptypes.h	/^				kKeyCodeF5 = 0x60,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeF6	data/nptypes.h	/^				kKeyCodeF6 = 0x61,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeF7	data/nptypes.h	/^				kKeyCodeF7 = 0x62,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeF8	data/nptypes.h	/^				kKeyCodeF8 = 0x64,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeG	data/nptypes.h	/^				kKeyCodeG,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeH	data/nptypes.h	/^				kKeyCodeH,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeHelp	data/nptypes.h	/^				kKeyCodeHelp = 0x72,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeHome	data/nptypes.h	/^				kKeyCodeHome = 0x73,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeI	data/nptypes.h	/^				kKeyCodeI,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeJ	data/nptypes.h	/^				kKeyCodeJ,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeK	data/nptypes.h	/^				kKeyCodeK,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeL	data/nptypes.h	/^				kKeyCodeL,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeLeft	data/nptypes.h	/^				kKeyCodeLeft = 0x7B,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeLeftBracket	data/nptypes.h	/^				kKeyCodeLeftBracket,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeM	data/nptypes.h	/^				kKeyCodeM,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeMinus	data/nptypes.h	/^				kKeyCodeMinus,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeModifiers	io/npkey.c	/^	kKeyCodeModifiers = 1024,$/;"	e	enum:__anon6	file:
kKeyCodeN	data/nptypes.h	/^				kKeyCodeN,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPad1	data/nptypes.h	/^				kKeyCodeNumPad1 = 0x53,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPad2	data/nptypes.h	/^				kKeyCodeNumPad2 = 0x54,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPad3	data/nptypes.h	/^				kKeyCodeNumPad3 = 0x55,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPad4	data/nptypes.h	/^				kKeyCodeNumPad4 = 0x56,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPad5	data/nptypes.h	/^				kKeyCodeNumPad5 = 0x57,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPad6	data/nptypes.h	/^				kKeyCodeNumPad6 = 0x58,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPad7	data/nptypes.h	/^				kKeyCodeNumPad7 = 0x59,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPad8	data/nptypes.h	/^				kKeyCodeNumPad8 = 0x5B,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPad9	data/nptypes.h	/^				kKeyCodeNumPad9 = 0x5C$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPadClear	data/nptypes.h	/^				kKeyCodeNumPadClear = 0x47, $/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPadEnter	data/nptypes.h	/^				kKeyCodeNumPadEnter = 0x4C,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPadEqual	data/nptypes.h	/^				kKeyCodeNumPadEqual = 0x51,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPadMinus	data/nptypes.h	/^				kKeyCodeNumPadMinus = 0x4E,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPadPeriod	data/nptypes.h	/^				kKeyCodeNumPadPeriod = 0x41,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPadPlus	data/nptypes.h	/^				kKeyCodeNumPadPlus = 0x45,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPadSlash	data/nptypes.h	/^				kKeyCodeNumPadSlash = 0x4B,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPadStar	data/nptypes.h	/^				kKeyCodeNumPadStar = 0x43,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeNumPadZero	data/nptypes.h	/^				kKeyCodeNumPadZero = 0x52,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeO	data/nptypes.h	/^				kKeyCodeO,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeP	data/nptypes.h	/^				kKeyCodeP,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodePageDown	data/nptypes.h	/^				kKeyCodePageDown = 0x79,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodePageUp	data/nptypes.h	/^				kKeyCodePageUp = 0x74,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodePeriod	data/nptypes.h	/^				kKeyCodePeriod,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeQ	data/nptypes.h	/^				kKeyCodeQ,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeR	data/nptypes.h	/^				kKeyCodeR,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeReturn	data/nptypes.h	/^				kKeyCodeReturn,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeRight	data/nptypes.h	/^				kKeyCodeRight = 0x7C, $/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeRightBracket	data/nptypes.h	/^				kKeyCodeRightBracket,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeRightQuote	data/nptypes.h	/^				kKeyCodeRightQuote,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeS	data/nptypes.h	/^				kKeyCodeS,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeSemiColon	data/nptypes.h	/^				kKeyCodeSemiColon,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeShiftLeft	io/npkey.c	/^	kKeyCodeShiftLeft,$/;"	e	enum:__anon6	file:
kKeyCodeShiftRight	io/npkey.c	/^	kKeyCodeShiftRight,$/;"	e	enum:__anon6	file:
kKeyCodeSlash	data/nptypes.h	/^				kKeyCodeSlash,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeSpace	data/nptypes.h	/^				kKeyCodeSpace,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeT	data/nptypes.h	/^				kKeyCodeT,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeTab	data/nptypes.h	/^				kKeyCodeTab,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeTilda	data/nptypes.h	/^				kKeyCodeTilda,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeU	data/nptypes.h	/^				kKeyCodeU,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeUp	data/nptypes.h	/^				kKeyCodeUp = 0x7E,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeV	data/nptypes.h	/^				kKeyCodeV = 0x09,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeW	data/nptypes.h	/^				kKeyCodeW,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeX	data/nptypes.h	/^				kKeyCodeX,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeY	data/nptypes.h	/^				kKeyCodeY,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeZ	data/nptypes.h	/^				kKeyCodeZ,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyCodeZero	data/nptypes.h	/^				kKeyCodeZero,$/;"	e	enum:kNP_KEY_CODES_OSX
kKeyDown	data/nptypes.h	/^	kKeyDown = 1,$/;"	e	enum:kNP_KEY_EVENT_TYPE
kKeyDownASCII	data/nptypes.h	/^	kKeyDownASCII,$/;"	e	enum:kNP_KEY_EVENT_TYPE
kKeyDownSpecial	data/nptypes.h	/^	kKeyDownSpecial,$/;"	e	enum:kNP_KEY_EVENT_TYPE
kKeyModifier	data/nptypes.h	/^	kKeyModifier,$/;"	e	enum:kNP_KEY_EVENT_TYPE
kKeyRepeat	data/nptypes.h	/^	kKeyRepeat,$/;"	e	enum:kNP_KEY_EVENT_TYPE
kKeyUp	data/nptypes.h	/^	kKeyUp,$/;"	e	enum:kNP_KEY_EVENT_TYPE
kKeyUpASCII	data/nptypes.h	/^	kKeyUpASCII,$/;"	e	enum:kNP_KEY_EVENT_TYPE
kKeyUpSpecial	data/nptypes.h	/^	kKeyUpSpecial$/;"	e	enum:kNP_KEY_EVENT_TYPE
kNPChMapItemCount	data/nptypes.h	129;"	d
kNPGLboolean	data/nptypes.h	/^	kNPGLboolean,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPGLfloat	data/nptypes.h	/^	kNPGLfloat,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPGLint	data/nptypes.h	/^	kNPGLint,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPGLubyte	data/nptypes.h	/^	kNPGLubyte,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNP_AVERAGE_TYPE	data/nptypes.h	/^enum kNP_AVERAGE_TYPE$/;"	g
kNP_CAMERA_SENSOR_TYPE	data/nptypes.h	/^enum kNP_CAMERA_SENSOR_TYPE$/;"	g
kNP_CENTER_PLOT	data/nptypes.h	/^enum kNP_CENTER_PLOT$/;"	g
kNP_CHANNEL_MISC	data/nptypes.h	/^enum kNP_CHANNEL_MISC$/;"	g
kNP_COLOR_SPACE	data/nptypes.h	/^enum kNP_COLOR_SPACE$/;"	g
kNP_COMMAND_TRIGGER	data/nptypes.h	/^enum kNP_COMMAND_TRIGGER {$/;"	g
kNP_COMPASS_ELEMENT	data/nptypes.h	/^enum kNP_COMPASS_ELEMENT$/;"	g
kNP_CONSOLE_COMMAND_LINE_FLAG	data/nptypes.h	/^enum kNP_CONSOLE_COMMAND_LINE_FLAG$/;"	g
kNP_CONSOLE_LEVEL	data/nptypes.h	/^enum kNP_CONSOLE_LEVEL$/;"	g
kNP_CONSOLE_MODE	data/nptypes.h	/^enum kNP_CONSOLE_MODE$/;"	g
kNP_COORD_TYPE	data/nptypes.h	/^enum kNP_COORD_TYPE$/;"	g
kNP_DATA_FORMAT	data/nptypes.h	/^enum kNP_DATA_FORMAT$/;"	g
kNP_FIFO_BUFFER_TYPE	data/nptypes.h	/^enum kNP_FIFO_BUFFER_TYPE$/;"	g
kNP_FILE_DIALOG_TYPE	data/nptypes.h	/^enum kNP_FILE_DIALOG_TYPE$/;"	g
kNP_FILE_TYPE	data/nptypes.h	/^enum kNP_FILE_TYPE$/;"	g
kNP_FONT_JUSTIFY	data/nptypes.h	/^enum kNP_FONT_JUSTIFY$/;"	g
kNP_FONT_SIZE	data/nptypes.h	/^enum kNP_FONT_SIZE$/;"	g
kNP_GEOMETRY_TYPES	data/nptypes.h	/^enum kNP_GEOMETRY_TYPES$/;"	g
kNP_GLUT_BITMAP_8_BY_13	data/nptypes.h	/^	kNP_GLUT_BITMAP_8_BY_13,$/;"	e	enum:kNP_GLUT_FONT_TYPE
kNP_GLUT_BITMAP_9_BY_15	data/nptypes.h	2897;"	d
kNP_GLUT_BITMAP_HELVETICA_10	data/nptypes.h	/^	kNP_GLUT_BITMAP_HELVETICA_10,$/;"	e	enum:kNP_GLUT_FONT_TYPE
kNP_GLUT_BITMAP_HELVETICA_12	data/nptypes.h	/^	kNP_GLUT_BITMAP_HELVETICA_12,$/;"	e	enum:kNP_GLUT_FONT_TYPE
kNP_GLUT_BITMAP_HELVETICA_18	data/nptypes.h	/^	kNP_GLUT_BITMAP_HELVETICA_18,$/;"	e	enum:kNP_GLUT_FONT_TYPE
kNP_GLUT_BITMAP_TIMES_ROMAN_10	data/nptypes.h	/^	kNP_GLUT_BITMAP_TIMES_ROMAN_10,$/;"	e	enum:kNP_GLUT_FONT_TYPE
kNP_GLUT_BITMAP_TIMES_ROMAN_24	data/nptypes.h	/^	kNP_GLUT_BITMAP_TIMES_ROMAN_24,$/;"	e	enum:kNP_GLUT_FONT_TYPE
kNP_GLUT_FONT_TYPE	data/nptypes.h	/^enum kNP_GLUT_FONT_TYPE$/;"	g
kNP_GLUT_STROKE_MONO_ROMAN	data/nptypes.h	/^	kNP_GLUT_STROKE_MONO_ROMAN,$/;"	e	enum:kNP_GLUT_FONT_TYPE
kNP_GLUT_STROKE_ROMAN	data/nptypes.h	/^	kNP_GLUT_STROKE_ROMAN = 0,$/;"	e	enum:kNP_GLUT_FONT_TYPE
kNP_GL_NORMALS	data/nptypes.h	/^enum kNP_GL_NORMALS$/;"	g
kNP_GL_SHADER_MODE	data/nptypes.h	/^enum kNP_GL_SHADER_MODE$/;"	g
kNP_HUD_ELEMENT	data/nptypes.h	/^enum kNP_HUD_ELEMENT$/;"	g
kNP_KEY_CODES_OSX	data/nptypes.h	/^enum kNP_KEY_CODES_OSX$/;"	g
kNP_KEY_EVENT_GLUT_SPECIAL	data/nptypes.h	/^enum kNP_KEY_EVENT_GLUT_SPECIAL$/;"	g
kNP_KEY_EVENT_TYPE	data/nptypes.h	/^enum kNP_KEY_EVENT_TYPE$/;"	g
kNP_MAP_TYPE	data/nptypes.h	/^enum kNP_MAP_TYPE$/;"	g
kNP_MESSAGE_TYPE	data/nptypes.h	/^enum kNP_MESSAGE_TYPE$/;"	g
kNP_MOUSE_MODE	data/nptypes.h	/^enum kNP_MOUSE_MODE$/;"	g
kNP_NATIVE_DATA_TYPES	data/nptypes.h	/^enum kNP_NATIVE_DATA_TYPES$/;"	g
kNP_NODE_ROOT_GROUP	data/nptypes.h	/^enum kNP_NODE_ROOT_GROUP$/;"	g
kNP_NODE_TYPES	data/nptypes.h	/^enum kNP_NODE_TYPES$/;"	g
kNP_QUADRANT	data/nptypes.h	/^enum kNP_QUADRANT$/;"	g
kNP_SELECT_COMMANDS	data/nptypes.h	/^enum kNP_SELECT_COMMANDS$/;"	g
kNP_SELECT_FILTER	data/nptypes.h	/^enum kNP_SELECT_FILTER$/;"	g
kNP_SHADER_TYPE	data/nptypes.h	/^enum kNP_SHADER_TYPE$/;"	g
kNP_TAG_MODE	data/nptypes.h	/^enum kNP_TAG_MODE$/;"	g
kNP_TOOL_TYPE	data/nptypes.h	/^enum kNP_TOOL_TYPE$/;"	g
kNP_TOPOLOGY_TYPE	data/nptypes.h	/^enum kNP_TOPOLOGY_TYPE$/;"	g
kNP_TRANSPARENCY_ALPHA_MODE	data/nptypes.h	/^enum kNP_TRANSPARENCY_ALPHA_MODE$/;"	g
kNP_VIDEO_FORMAT	data/nptypes.h	/^enum kNP_VIDEO_FORMAT										\/\/!<add DPX format support, zz$/;"	g
kNP_VIDEO_HZ	data/nptypes.h	/^enum kNP_VIDEO_HZ									\/\/!<add DPX format support, zz$/;"	g
kNP_VIDEO_INTERLACED	data/nptypes.h	/^enum kNP_VIDEO_INTERLACED$/;"	g
kNP_VIDEO_STEREO_3D	data/nptypes.h	/^enum kNP_VIDEO_STEREO_3D$/;"	g
kNPalphaModeAdditive	data/nptypes.h	/^	kNPalphaModeAdditive,$/;"	e	enum:kNP_TRANSPARENCY_ALPHA_MODE
kNPalphaModeCount	data/nptypes.h	/^	kNPalphaModeCount$/;"	e	enum:kNP_TRANSPARENCY_ALPHA_MODE
kNPalphaModeDark	data/nptypes.h	/^	kNPalphaModeDark,$/;"	e	enum:kNP_TRANSPARENCY_ALPHA_MODE
kNPalphaModeNull	data/nptypes.h	/^	kNPalphaModeNull = 0,$/;"	e	enum:kNP_TRANSPARENCY_ALPHA_MODE
kNPalphaModeSubtractive	data/nptypes.h	/^	kNPalphaModeSubtractive,	\/\/!<default alphaMode$/;"	e	enum:kNP_TRANSPARENCY_ALPHA_MODE
kNPaperture	data/nptypes.h	/^	kNPaperture,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPappVer	io/npconsole.c	1595;"	d	file:
kNPaspectRatio	data/nptypes.h	/^	kNPaspectRatio,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPattribute	data/nptypes.h	/^	kNPattribute,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPattributeNameOffset	data/nptypes.h	154;"	d
kNPautoZoom	data/nptypes.h	/^	kNPautoZoom,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPauxA	data/nptypes.h	/^	kNPauxA,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPauxB	data/nptypes.h	/^	kNPauxB,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPaverage	data/nptypes.h	/^	kNPaverage,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPavgCount	io/npmouse.c	36;"	d	file:
kNPbase	data/nptypes.h	/^	kNPbase,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPbaseItemCount	data/nptypes.h	122;"	d
kNPbool	data/nptypes.h	/^	kNPbool,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPboolXYZ	data/nptypes.h	/^	kNPboolXYZ,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPboolXYZS	data/nptypes.h	/^	kNPboolXYZS,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPbranchLevel	data/nptypes.h	/^	kNPbranchLevel,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPbranchLevelMax	data/nptypes.h	82;"	d
kNPbyte	data/nptypes.h	/^	kNPbyte,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPcamera	data/nptypes.h	/^	kNPcamera,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPcameraCount	data/nptypes.h	85;"	d
kNPcameraItemCount	data/nptypes.h	124;"	d
kNPcenterNull	data/nptypes.h	/^	kNPcenterNull = 0,$/;"	e	enum:kNP_CENTER_PLOT
kNPcenterPerCycle	data/nptypes.h	/^	kNPcenterPerCycle,		\/\/!<center on the current data point$/;"	e	enum:kNP_CENTER_PLOT
kNPcenterPerGrid	data/nptypes.h	/^	kNPcenterPerGrid		\/\/!<center when current point exceeds 1 grid space$/;"	e	enum:kNP_CENTER_PLOT
kNPchInputID	data/nptypes.h	/^	kNPchInputID,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPchLastUpdated	data/nptypes.h	/^	kNPchLastUpdated,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPchMap	data/nptypes.h	/^	kNPchMap,		\/\/!<remove this, should not be here \/\/!<zzsql $/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPchMapTableID	data/nptypes.h	/^	kNPchMapTableID,	$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPchOutputID	data/nptypes.h	/^	kNPchOutputID,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPchannelID	data/nptypes.h	/^	kNPchannelID,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPchannelMapHeader	data/nptypes.h	1307;"	d
kNPchannelMax	data/nptypes.h	158;"	d
kNPchannelOffset	data/nptypes.h	155;"	d
kNPcharArray	data/nptypes.h	/^	kNPcharArray, \/\/!<zzsql ok here$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPchild	data/nptypes.h	/^	kNPchild,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPchildCount	data/nptypes.h	/^	kNPchildCount,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPchildIndex	data/nptypes.h	/^	kNPchildIndex,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPclipFar	data/nptypes.h	/^	kNPclipFar,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPclipNear	data/nptypes.h	/^	kNPclipNear,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPcmd	data/nptypes.h	/^	kNPcmd,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPcmdAlphaDown	data/nptypes.h	/^	kNPcmdAlphaDown,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdAlphaMode	data/nptypes.h	/^	kNPcmdAlphaMode,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdAlphaUp	data/nptypes.h	/^	kNPcmdAlphaUp,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdAltColor	data/nptypes.h	/^	kNPcmdAltColor,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdBackground	data/nptypes.h	/^	kNPcmdBackground,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdBiasDown	data/nptypes.h	/^	kNPcmdBiasDown,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdBiasUp	data/nptypes.h	/^	kNPcmdBiasUp,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdCamera	data/nptypes.h	/^	kNPcmdCamera,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdCenter	data/nptypes.h	/^	kNPcmdCenter,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdChannelDown	data/nptypes.h	/^	kNPcmdChannelDown,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdChannelUp	data/nptypes.h	/^	kNPcmdChannelUp,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdClear	data/nptypes.h	/^	kNPcmdClear,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdClearFrameBuffer	data/nptypes.h	/^	kNPcmdClearFrameBuffer,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdColorDown	data/nptypes.h	/^	kNPcmdColorDown,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdColorFade	data/nptypes.h	/^	kNPcmdColorFade,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdColorPalette	data/nptypes.h	/^	kNPcmdColorPalette,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdColorUp	data/nptypes.h	/^	kNPcmdColorUp,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdConsole	data/nptypes.h	/^	kNPcmdConsole,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdContext	data/nptypes.h	/^	kNPcmdContext,			\/\/!<next active (multi-user) ctrl context$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdContextID	data/nptypes.h	/^	kNPcmdContextID,		\/\/!<set context by ID, console = 0, main window = 1$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdCount	data/nptypes.h	/^	kNPcmdCount$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdDelete	data/nptypes.h	/^	kNPcmdDelete,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdFileClose	data/nptypes.h	/^	kNPcmdFileClose,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdFileExport	data/nptypes.h	/^	kNPcmdFileExport,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdFileImport	data/nptypes.h	/^	kNPcmdFileImport,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdFileMapOne	data/nptypes.h	/^	kNPcmdFileMapOne,		\/\/!<used for quick loading and saving of state files$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdFileMapThree	data/nptypes.h	/^	kNPcmdFileMapThree,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdFileMapTwo	data/nptypes.h	/^	kNPcmdFileMapTwo,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdFileNew	data/nptypes.h	/^	kNPcmdFileNew,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdFileOpen	data/nptypes.h	/^	kNPcmdFileOpen,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdFileSave	data/nptypes.h	/^	kNPcmdFileSave,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdFileSaveAs	data/nptypes.h	/^	kNPcmdFileSaveAs,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdFreeze	data/nptypes.h	/^	kNPcmdFreeze,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdFullscreen	data/nptypes.h	/^	kNPcmdFullscreen,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdFuncPtr	data/nptypes.h	/^	kNPcmdFuncPtr,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPcmdGainDown	data/nptypes.h	/^	kNPcmdGainDown,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdGainUp	data/nptypes.h	/^	kNPcmdGainUp,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdGeometry	data/nptypes.h	/^	kNPcmdGeometry,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdGrid	data/nptypes.h	/^	kNPcmdGrid,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdHUD	data/nptypes.h	/^	kNPcmdHUD,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdHide	data/nptypes.h	/^	kNPcmdHide,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdLight	data/nptypes.h	/^	kNPcmdLight,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdLines	data/nptypes.h	/^	kNPcmdLines,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdMenu	data/nptypes.h	/^	kNPcmdMenu = 4242,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdMesh	data/nptypes.h	/^	kNPcmdMesh,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdNew	data/nptypes.h	/^	kNPcmdNew,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdNext	data/nptypes.h	/^	kNPcmdNext,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdNextBranch	data/nptypes.h	/^	kNPcmdNextBranch,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdNextBranchOff	data/nptypes.h	/^	kNPcmdNextBranchOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdNextOff	data/nptypes.h	/^	kNPcmdNextOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdNormalMode	data/nptypes.h	/^	kNPcmdNormalMode,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdNull	data/nptypes.h	/^	kNPcmdNull = 0,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdOpenAntz	data/nptypes.h	/^	kNPcmdOpenAntz,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdOpenApp	data/nptypes.h	/^	kNPcmdOpenApp,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdOpenNodeFile	data/nptypes.h	/^	kNPcmdOpenNodeFile,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdOpenURL	data/nptypes.h	/^	kNPcmdOpenURL,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPause	data/nptypes.h	/^	kNPcmdPause,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPin	data/nptypes.h	/^	kNPcmdPin,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPoints	data/nptypes.h	/^	kNPcmdPoints,	$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPresetEight	data/nptypes.h	/^	kNPcmdPresetEight,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPresetFive	data/nptypes.h	/^	kNPcmdPresetFive,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPresetFour	data/nptypes.h	/^	kNPcmdPresetFour,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPresetOne	data/nptypes.h	/^	kNPcmdPresetOne,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPresetSeven	data/nptypes.h	/^	kNPcmdPresetSeven,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPresetSix	data/nptypes.h	/^	kNPcmdPresetSix,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPresetThree	data/nptypes.h	/^	kNPcmdPresetThree,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPresetTwo	data/nptypes.h	/^	kNPcmdPresetTwo,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPrev	data/nptypes.h	/^	kNPcmdPrev,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPrevBranch	data/nptypes.h	/^	kNPcmdPrevBranch,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPrevBranchOff	data/nptypes.h	/^	kNPcmdPrevBranchOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPrevOff	data/nptypes.h	/^	kNPcmdPrevOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdPrimitiveDown	data/nptypes.h	/^	kNPcmdPrimitiveDown,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdRatio	data/nptypes.h	/^	kNPcmdRatio,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdRotateCCW	data/nptypes.h	/^	kNPcmdRotateCCW,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdRotateCCWOff	data/nptypes.h	/^	kNPcmdRotateCCWOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdRotateCW	data/nptypes.h	/^	kNPcmdRotateCW,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdRotateCWOff	data/nptypes.h	/^	kNPcmdRotateCWOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdRotateDown	data/nptypes.h	/^	kNPcmdRotateDown,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdRotateDownOff	data/nptypes.h	/^	kNPcmdRotateDownOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdRotateLeft	data/nptypes.h	/^	kNPcmdRotateLeft,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdRotateLeftOff	data/nptypes.h	/^	kNPcmdRotateLeftOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdRotateRight	data/nptypes.h	/^	kNPcmdRotateRight,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdRotateRightOff	data/nptypes.h	/^	kNPcmdRotateRightOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdRotateUp	data/nptypes.h	/^	kNPcmdRotateUp,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdRotateUpOff	data/nptypes.h	/^	kNPcmdRotateUpOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSampleInterval	data/nptypes.h	/^	kNPcmdSampleInterval,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdScreenGrab	data/nptypes.h	/^	kNPcmdScreenGrab,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdScroll	data/nptypes.h	/^	kNPcmdScroll,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSegments	data/nptypes.h	/^	kNPcmdSegments,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSelect	data/nptypes.h	/^	kNPcmdSelect,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSelectAll	data/nptypes.h	/^	kNPcmdSelectAll,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSelectAllInvert	data/nptypes.h	/^	kNPcmdSelectAllInvert,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSelectAxes	data/nptypes.h	/^	kNPcmdSelectAxes,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSelectNone	data/nptypes.h	/^	kNPcmdSelectNone,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSelectOff	data/nptypes.h	/^	kNPcmdSelectOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSelectOne	data/nptypes.h	/^	kNPcmdSelectOne,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSelectSetNone	data/nptypes.h	/^	kNPcmdSelectSetNone,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSelectThree	data/nptypes.h	/^	kNPcmdSelectThree,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSelectToggle	data/nptypes.h	/^	kNPcmdSelectToggle,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSelectTwo	data/nptypes.h	/^	kNPcmdSelectTwo,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSetpointHi	data/nptypes.h	/^	kNPcmdSetpointHi,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSetpointHiOff	data/nptypes.h	/^	kNPcmdSetpointHiOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSetpointLo	data/nptypes.h	/^	kNPcmdSetpointLo,											\/\/!< add kNPcmd..,  debug zz$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSetpointLoOff	data/nptypes.h	/^	kNPcmdSetpointLoOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdShader	data/nptypes.h	/^	kNPcmdShader,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdShaderMode	data/nptypes.h	/^	kNPcmdShaderMode,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdSubsample	data/nptypes.h	/^	kNPcmdSubsample,			\/\/!<zzhp$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdTagMode	data/nptypes.h	/^	kNPcmdTagMode,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdTexture	data/nptypes.h	/^	kNPcmdTexture,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdTextureDown	data/nptypes.h	/^	kNPcmdTextureDown,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdTool	data/nptypes.h	/^	kNPcmdTool,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdToolDown	data/nptypes.h	/^	kNPcmdToolDown,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdTopo	data/nptypes.h	/^	kNPcmdTopo,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdTopoDown	data/nptypes.h	/^	kNPcmdTopoDown,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdTrigger	data/nptypes.h	/^	kNPcmdTrigger,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdUserFocus	data/nptypes.h	/^	kNPcmdUserFocus,		\/\/!<set user focus, will bring window to front$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdViewer	data/nptypes.h	/^	kNPcmdViewer,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdXdecrease	data/nptypes.h	/^	kNPcmdXdecrease,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdXdecreaseOff	data/nptypes.h	/^	kNPcmdXdecreaseOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdXincrease	data/nptypes.h	/^	kNPcmdXincrease,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdXincreaseOff	data/nptypes.h	/^	kNPcmdXincreaseOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdYdecrease	data/nptypes.h	/^	kNPcmdYdecrease,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdYdecreaseOff	data/nptypes.h	/^	kNPcmdYdecreaseOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdYincrease	data/nptypes.h	/^	kNPcmdYincrease,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdYincreaseOff	data/nptypes.h	/^	kNPcmdYincreaseOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdZdecrease	data/nptypes.h	/^	kNPcmdZdecrease,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdZdecreaseOff	data/nptypes.h	/^	kNPcmdZdecreaseOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdZincrease	data/nptypes.h	/^	kNPcmdZincrease,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdZincreaseOff	data/nptypes.h	/^	kNPcmdZincreaseOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdZoomOff	data/nptypes.h	/^	kNPcmdZoomOff,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcmdZoomOn	data/nptypes.h	/^	kNPcmdZoomOn,$/;"	e	enum:kNP_COMMAND_TRIGGER
kNPcolor	data/nptypes.h	/^	kNPcolor,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPcolorCount	io/gl/npcolor.h	/^	kNPcolorCount$/;"	e	enum:__anon4
kNPcolorFade	data/nptypes.h	/^	kNPcolorFade,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPcolorHSB	io/gl/npcolor.h	/^	kNPcolorHSB,		\/\/HSB == HSV$/;"	e	enum:__anon4
kNPcolorIndex	data/nptypes.h	/^	kNPcolorIndex,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPcolorLAB	io/gl/npcolor.h	/^	kNPcolorLAB,$/;"	e	enum:__anon4
kNPcolorRGB16	io/gl/npcolor.h	/^	kNPcolorRGB16,$/;"	e	enum:__anon4
kNPcolorRGB8	io/gl/npcolor.h	/^	kNPcolorRGB8,$/;"	e	enum:__anon4
kNPcolorShift	data/nptypes.h	/^	kNPcolorShift,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPcolorSpace	data/nptypes.h	/^	kNPcolorSpace,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPcolorXYtoHSB	io/gl/npcolor.h	/^	kNPcolorXYtoHSB,$/;"	e	enum:__anon4
kNPcolorXYtoRGB	io/gl/npcolor.h	/^	kNPcolorXYtoRGB,$/;"	e	enum:__anon4
kNPcolorYCtoRGB	io/gl/npcolor.h	/^	kNPcolorYCtoRGB,$/;"	e	enum:__anon4
kNPcolorYUVtoRGB	io/gl/npcolor.h	/^	kNPcolorYUVtoRGB,$/;"	e	enum:__anon4
kNPcompassCoordX	data/nptypes.h	/^	kNPcompassCoordX,$/;"	e	enum:kNP_COMPASS_ELEMENT
kNPcompassCoordY	data/nptypes.h	/^	kNPcompassCoordY,$/;"	e	enum:kNP_COMPASS_ELEMENT
kNPcompassCoordZ	data/nptypes.h	/^	kNPcompassCoordZ,$/;"	e	enum:kNP_COMPASS_ELEMENT
kNPcompassCount	data/nptypes.h	/^	kNPcompassCount$/;"	e	enum:kNP_COMPASS_ELEMENT
kNPcompassHeading	data/nptypes.h	/^	kNPcompassHeading = 0,$/;"	e	enum:kNP_COMPASS_ELEMENT
kNPcompassRoll	data/nptypes.h	/^	kNPcompassRoll,$/;"	e	enum:kNP_COMPASS_ELEMENT
kNPcompassTilt	data/nptypes.h	/^	kNPcompassTilt,$/;"	e	enum:kNP_COMPASS_ELEMENT
kNPconsoleCharPerLine	data/nptypes.h	133;"	d
kNPconsoleCmd	data/nptypes.h	/^	kNPconsoleCmd,$/;"	e	enum:kNP_CONSOLE_MODE
kNPconsoleEdit	data/nptypes.h	/^	kNPconsoleEdit,				\/\/!<code editor$/;"	e	enum:kNP_CONSOLE_MODE
kNPconsoleHistoryMax	data/nptypes.h	134;"	d
kNPconsoleInputMax	data/nptypes.h	135;"	d
kNPconsoleLevelCount	data/nptypes.h	/^	kNPconsoleLevelCount$/;"	e	enum:kNP_CONSOLE_LEVEL
kNPconsoleLevelMax	data/nptypes.h	/^	kNPconsoleLevelMax,			\/\/!<display maximum number of lines possible$/;"	e	enum:kNP_CONSOLE_LEVEL
kNPconsoleLevelNull	data/nptypes.h	/^	kNPconsoleLevelNull = 0,	\/\/!<hide console$/;"	e	enum:kNP_CONSOLE_LEVEL
kNPconsoleLevelOne	data/nptypes.h	/^	kNPconsoleLevelOne,			\/\/!<display 1 line$/;"	e	enum:kNP_CONSOLE_LEVEL
kNPconsoleLevelThree	data/nptypes.h	/^	kNPconsoleLevelThree,		\/\/!<display 3 lines$/;"	e	enum:kNP_CONSOLE_LEVEL
kNPconsoleLineMax	data/nptypes.h	132;"	d
kNPconsoleMenu	data/nptypes.h	/^	kNPconsoleMenu,				\/\/!<generic menu list	$/;"	e	enum:kNP_CONSOLE_MODE
kNPconsoleMessage	data/nptypes.h	/^	kNPconsoleMessage = 0,		\/\/!<default message mode$/;"	e	enum:kNP_CONSOLE_MODE
kNPconsoleMySQL	data/nptypes.h	/^	kNPconsoleMySQL				\/\/!<DB Browser$/;"	e	enum:kNP_CONSOLE_MODE
kNPconsoleTag	data/nptypes.h	/^	kNPconsoleTag,				\/\/!<set the tag names$/;"	e	enum:kNP_CONSOLE_MODE
kNPcoord	data/nptypes.h	/^	kNPcoord,$/;"	e	enum:kNP_COORD_TYPE
kNPcoordCount	data/nptypes.h	/^	kNPcoordCount$/;"	e	enum:kNP_COORD_TYPE
kNPcoordLatLongX	data/nptypes.h	/^	kNPcoordLatLongX,$/;"	e	enum:kNP_COORD_TYPE
kNPcoordScale	data/nptypes.h	/^	kNPcoordScale,$/;"	e	enum:kNP_COORD_TYPE
kNPcstrPtr	data/nptypes.h	/^	kNPcstrPtr,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPcubeLength	data/nptypes.h	89;"	d
kNPcylinderRadius	data/nptypes.h	91;"	d
kNPdata	data/nptypes.h	/^	kNPdata,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPdataRef	data/nptypes.h	/^	kNPdataRef, \/\/!<kNPdata,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPdataTypeMax	data/nptypes.h	121;"	d
kNPdbFieldsDescMax	io/db/npmysql.c	30;"	d	file:
kNPdbFuncSetMax	data/nptypes.h	/^	kNPdbFuncSetMax	= 64		\/\/\/< max number DB function sets$/;"	e	enum:NP_DATABASE
kNPdbHostMax	data/nptypes.h	/^	kNPdbHostMax	= 512,		\/\/\/< max number of DB host servers$/;"	e	enum:NP_DATABASE
kNPdbMax	data/nptypes.h	/^	kNPdbMax		= 4096,		\/\/\/< max number of databases$/;"	e	enum:NP_DATABASE
kNPdbNameMax	data/nptypes.h	/^	kNPdbNameMax	= 64,		\/\/\/< @todo make sure 64 is good for non-MySQL DBs$/;"	e	enum:NP_DATABASE
kNPdbNodeBlock	io/db/npdb.c	1863;"	d	file:
kNPdbTypeCount	data/nptypes.h	/^	kNPdbTypeCount$/;"	e	enum:NP_DB_CONTENT_TYPES
kNPdbTypeNative	data/nptypes.h	/^	kNPdbTypeNative,		\/\/\/< native dataset with nodes, tags, etc.$/;"	e	enum:NP_DB_CONTENT_TYPES
kNPdbTypeNull	data/nptypes.h	/^	kNPdbTypeNull = 0,$/;"	e	enum:NP_DB_CONTENT_TYPES
kNPdbTypePlugin	data/nptypes.h	/^	kNPdbTypePlugin,		\/\/\/< DB plugin type for 3rd party support$/;"	e	enum:NP_DB_CONTENT_TYPES
kNPdbTypeUnknown	data/nptypes.h	/^	kNPdbTypeUnknown,		\/\/\/< unknown DB content structure$/;"	e	enum:NP_DB_CONTENT_TYPES
kNPdefaultRatio	data/nptypes.h	93;"	d
kNPdesc	data/nptypes.h	/^	kNPdesc,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPdoubleClickTime	data/nptypes.h	149;"	d
kNPdragModeSize	data/nptypes.h	/^	kNPdragModeSize$/;"	e	enum:kNP_MOUSE_MODE
kNPelementMax	data/nptypes.h	305;"	d
kNPexposure	data/nptypes.h	/^	kNPexposure,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPfacet	data/nptypes.h	/^	kNPfacet,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPfacetCube	data/nptypes.h	87;"	d
kNPfifoCmd	data/nptypes.h	/^	kNPfifoCmd,			\/\/!<for command buffers that contain NPqueCmd(s)$/;"	e	enum:kNP_FIFO_BUFFER_TYPE
kNPfifoCount	data/nptypes.h	/^	kNPfifoCount$/;"	e	enum:kNP_FIFO_BUFFER_TYPE
kNPfifoMapItem	data/nptypes.h	/^	kNPfifoMapItem,		\/\/!<designates buffer has NPqueItem(s)$/;"	e	enum:kNP_FIFO_BUFFER_TYPE
kNPfifoNull	data/nptypes.h	/^	kNPfifoNull = 0,$/;"	e	enum:kNP_FIFO_BUFFER_TYPE
kNPfileAIFF	data/nptypes.h	/^	kNPfileAIFF,	\/\/!<audio$/;"	e	enum:kNP_FILE_TYPE
kNPfileAVI	data/nptypes.h	/^	kNPfileAVI,$/;"	e	enum:kNP_FILE_TYPE
kNPfileBlock	data/nptypes.h	/^	kNPfileBlock,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPfileBlockSize	data/nptypes.h	74;"	d
kNPfileCSV	data/nptypes.h	/^	kNPfileCSV,		\/\/!<data table formats$/;"	e	enum:kNP_FILE_TYPE
kNPfileCollada	data/nptypes.h	/^	kNPfileCollada,	\/\/!<3D model inter-change$/;"	e	enum:kNP_FILE_TYPE
kNPfileDCP	data/nptypes.h	/^	kNPfileDCP,		\/\/!<Digital Cinema Package$/;"	e	enum:kNP_FILE_TYPE
kNPfileDNX	data/nptypes.h	/^	kNPfileDNX,$/;"	e	enum:kNP_FILE_TYPE
kNPfileDialogClose	data/nptypes.h	/^	kNPfileDialogClose$/;"	e	enum:kNP_FILE_DIALOG_TYPE
kNPfileDialogExport	data/nptypes.h	/^	kNPfileDialogExport,$/;"	e	enum:kNP_FILE_DIALOG_TYPE
kNPfileDialogImport	data/nptypes.h	/^	kNPfileDialogImport,$/;"	e	enum:kNP_FILE_DIALOG_TYPE
kNPfileDialogNULL	data/nptypes.h	/^	kNPfileDialogNULL = 0,$/;"	e	enum:kNP_FILE_DIALOG_TYPE
kNPfileDialogNew	data/nptypes.h	/^	kNPfileDialogNew,$/;"	e	enum:kNP_FILE_DIALOG_TYPE
kNPfileDialogOpen	data/nptypes.h	/^	kNPfileDialogOpen,$/;"	e	enum:kNP_FILE_DIALOG_TYPE
kNPfileDialogSave	data/nptypes.h	/^	kNPfileDialogSave,$/;"	e	enum:kNP_FILE_DIALOG_TYPE
kNPfileDialogSaveAs	data/nptypes.h	/^	kNPfileDialogSaveAs,$/;"	e	enum:kNP_FILE_DIALOG_TYPE
kNPfileDir	data/nptypes.h	/^	kNPfileDir,		\/\/!<file directory$/;"	e	enum:kNP_FILE_TYPE
kNPfileJ2K	data/nptypes.h	/^	kNPfileJ2K,		\/\/!<JPEG 2000$/;"	e	enum:kNP_FILE_TYPE
kNPfileJPG	data/nptypes.h	/^	kNPfileJPG,$/;"	e	enum:kNP_FILE_TYPE
kNPfileJSON	data/nptypes.h	/^	kNPfileJSON,	\/\/!<data tree schema$/;"	e	enum:kNP_FILE_TYPE
kNPfileKML	data/nptypes.h	/^	kNPfileKML,		\/\/!<GIS standard$/;"	e	enum:kNP_FILE_TYPE
kNPfileM4A	data/nptypes.h	/^	kNPfileM4A,$/;"	e	enum:kNP_FILE_TYPE
kNPfileMJ2	data/nptypes.h	/^	kNPfileMJ2,		\/\/!<Motion JPEG 2000$/;"	e	enum:kNP_FILE_TYPE
kNPfileMOV	data/nptypes.h	/^	kNPfileMOV$/;"	e	enum:kNP_FILE_TYPE
kNPfileMP3	data/nptypes.h	/^	kNPfileMP3,$/;"	e	enum:kNP_FILE_TYPE
kNPfileMP4	data/nptypes.h	/^	kNPfileMP4,		\/\/!<MPEG 4$/;"	e	enum:kNP_FILE_TYPE
kNPfileMPG	data/nptypes.h	/^	kNPfileMPG,		\/\/!<MPEG 1 and 2 video$/;"	e	enum:kNP_FILE_TYPE
kNPfileMXF	data/nptypes.h	/^	kNPfileMXF,		\/\/!<AV formats, open standard and proprietary$/;"	e	enum:kNP_FILE_TYPE
kNPfileMax	io/npfile.h	33;"	d
kNPfileNull	data/nptypes.h	/^	kNPfileNull = 0,$/;"	e	enum:kNP_FILE_TYPE
kNPfileRAW	data/nptypes.h	/^	kNPfileRAW,$/;"	e	enum:kNP_FILE_TYPE
kNPfileTIFF	data/nptypes.h	/^	kNPfileTIFF,	\/\/!<image formats$/;"	e	enum:kNP_FILE_TYPE
kNPfileTXT	data/nptypes.h	/^	kNPfileTXT,$/;"	e	enum:kNP_FILE_TYPE
kNPfileWAV	data/nptypes.h	/^	kNPfileWAV,$/;"	e	enum:kNP_FILE_TYPE
kNPfileXML	data/nptypes.h	/^	kNPfileXML,$/;"	e	enum:kNP_FILE_TYPE
kNPflagCmd	data/nptypes.h	/^	kNPflagCmd,					\/\/!<commands $/;"	e	enum:kNP_CONSOLE_COMMAND_LINE_FLAG
kNPflagFile	data/nptypes.h	/^	kNPflagFile,$/;"	e	enum:kNP_CONSOLE_COMMAND_LINE_FLAG
kNPflagHelp	data/nptypes.h	/^	kNPflagHelp,$/;"	e	enum:kNP_CONSOLE_COMMAND_LINE_FLAG
kNPflagN	data/nptypes.h	/^	kNPflagN,					\/\/!<any native parameter, mapItem desc format$/;"	e	enum:kNP_CONSOLE_COMMAND_LINE_FLAG
kNPflagNull	data/nptypes.h	/^	kNPflagNull = 0,$/;"	e	enum:kNP_CONSOLE_COMMAND_LINE_FLAG
kNPflagOSC	data/nptypes.h	/^	kNPflagOSC,$/;"	e	enum:kNP_CONSOLE_COMMAND_LINE_FLAG
kNPflagUDP	data/nptypes.h	/^	kNPflagUDP,$/;"	e	enum:kNP_CONSOLE_COMMAND_LINE_FLAG
kNPflagURL	data/nptypes.h	/^	kNPflagURL,$/;"	e	enum:kNP_CONSOLE_COMMAND_LINE_FLAG
kNPflagVer	data/nptypes.h	/^	kNPflagVer$/;"	e	enum:kNP_CONSOLE_COMMAND_LINE_FLAG
kNPfloat	data/nptypes.h	/^	kNPfloat,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPfloatRGB	data/nptypes.h	/^	kNPfloatRGB,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPfloatRGBA	data/nptypes.h	/^	kNPfloatRGBA,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPfloatXY	data/nptypes.h	/^	kNPfloatXY,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPfloatXYZ	data/nptypes.h	/^	kNPfloatXYZ,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPfloatXYZA	data/nptypes.h	/^	kNPfloatXYZA,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPfloatXYZS	data/nptypes.h	/^	kNPfloatXYZS,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPfontCount	data/nptypes.h	/^	kNPfontCount$/;"	e	enum:kNP_GLUT_FONT_TYPE
kNPfontSizeLarge	data/nptypes.h	/^	kNPfontSizeLarge$/;"	e	enum:kNP_FONT_SIZE
kNPfontSizeMedium	data/nptypes.h	/^	kNPfontSizeMedium,$/;"	e	enum:kNP_FONT_SIZE
kNPfontSizeSmall	data/nptypes.h	/^	kNPfontSizeSmall = 0,$/;"	e	enum:kNP_FONT_SIZE
kNPformat	data/nptypes.h	/^	kNPformat,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPformatAIFF	data/nptypes.h	/^	kNPformatAIFF,			\/\/!<..ditto...$/;"	e	enum:kNP_DATA_FORMAT
kNPformatBMP	data/nptypes.h	/^	kNPformatBMP,$/;"	e	enum:kNP_DATA_FORMAT
kNPformatCSV	data/nptypes.h	/^	kNPformatCSV,			\/\/!<primary native file format$/;"	e	enum:kNP_DATA_FORMAT
kNPformatCount	data/nptypes.h	/^	kNPformatCount$/;"	e	enum:kNP_DATA_FORMAT
kNPformatDB	data/nptypes.h	/^	kNPformatDB,			\/\/!<native DB format is MySQL$/;"	e	enum:kNP_DATA_FORMAT
kNPformatDDS	data/nptypes.h	/^	kNPformatDDS,$/;"	e	enum:kNP_DATA_FORMAT
kNPformatGIF	data/nptypes.h	/^	kNPformatGIF,			\/\/!<.$/;"	e	enum:kNP_DATA_FORMAT
kNPformatID	data/nptypes.h	/^	kNPformatID,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPformatJ2K	data/nptypes.h	/^	kNPformatJ2K,			\/\/!<...$/;"	e	enum:kNP_DATA_FORMAT
kNPformatJPG	data/nptypes.h	/^	kNPformatJPG,			\/\/!<perhaps should be in  separate list... \/\/!<zz debug$/;"	e	enum:kNP_DATA_FORMAT
kNPformatJSON	data/nptypes.h	/^	kNPformatJSON,			\/\/!<likely the most descriptive$/;"	e	enum:kNP_DATA_FORMAT
kNPformatKML	data/nptypes.h	/^	kNPformatKML,			\/\/!<google KML, related to COLLADA$/;"	e	enum:kNP_DATA_FORMAT
kNPformatNull	data/nptypes.h	/^	kNPformatNull = 0,$/;"	e	enum:kNP_DATA_FORMAT
kNPformatOSC	data/nptypes.h	/^	kNPformatOSC,			\/\/!<primary network protocol$/;"	e	enum:kNP_DATA_FORMAT
kNPformatPNG	data/nptypes.h	/^	kNPformatPNG,			\/\/!<..$/;"	e	enum:kNP_DATA_FORMAT
kNPformatSNMP	data/nptypes.h	/^	kNPformatSNMP,			\/\/!<can bridge SNMP-JSON-OSC$/;"	e	enum:kNP_DATA_FORMAT
kNPformatTGA	data/nptypes.h	/^	kNPformatTGA,$/;"	e	enum:kNP_DATA_FORMAT
kNPformatWAV	data/nptypes.h	/^	kNPformatWAV,$/;"	e	enum:kNP_DATA_FORMAT
kNPformatXML	data/nptypes.h	/^	kNPformatXML,			\/\/!<for 3rd party data support$/;"	e	enum:kNP_DATA_FORMAT
kNPfov	data/nptypes.h	/^	kNPfov,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPfps	data/nptypes.h	/^	kNPfps,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPfreeze	data/nptypes.h	/^	kNPfreeze,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPfullscreen	data/nptypes.h	/^	kNPfullscreen,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPgAlphaMode	data/nptypes.h	/^	kNPgAlphaMode,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPgBackground	data/nptypes.h	/^	kNPgBackground,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPgBackgroundA	data/nptypes.h	/^	kNPgBackgroundA,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPgBackgroundB	data/nptypes.h	/^	kNPgBackgroundB,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPgBackgroundG	data/nptypes.h	/^	kNPgBackgroundG,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPgBackgroundR	data/nptypes.h	/^	kNPgBackgroundR,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPgBrowserURL	data/nptypes.h	/^	kNPgBrowserURL,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPgFullscreen	data/nptypes.h	/^	kNPgFullscreen,		\/\/!<zz-globals redundant... $/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPgNull	data/nptypes.h	/^	kNPgNull,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPgeoCone	data/nptypes.h	/^	kNPgeoCone,				\/\/!<radius 1, height 2$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoConeWire	data/nptypes.h	/^	kNPgeoConeWire,$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoCount	data/nptypes.h	/^	kNPgeoCount,	\/\/!<add primitives, triangle, quad, circle, cylinder$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoCube	data/nptypes.h	/^	kNPgeoCube,				\/\/!<length 2, currently is something else, what? \/\/!<zz debug$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoCubeWire	data/nptypes.h	/^	kNPgeoCubeWire = 0,$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoCylinder	data/nptypes.h	/^	kNPgeoCylinder,			\/\/!<radius 1, height 2$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoCylinderWire	data/nptypes.h	/^	kNPgeoCylinderWire,$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoDodecahedron	data/nptypes.h	/^	kNPgeoDodecahedron,		\/\/!<size ?$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoDodecahedronWire	data/nptypes.h	/^	kNPgeoDodecahedronWire,$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoGrid	data/nptypes.h	/^	kNPgeoGrid$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoIcosahedron	data/nptypes.h	/^	kNPgeoIcosahedron,		\/\/!<should have edge length of 2, actual size ?$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoIcosahedronWire	data/nptypes.h	/^	kNPgeoIcosahedronWire,$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoMesh	data/nptypes.h	/^	kNPgeoMesh,$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoOctahedron	data/nptypes.h	/^	kNPgeoOctahedron,		\/\/!<size ?$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoOctahedronWire	data/nptypes.h	/^	kNPgeoOctahedronWire,$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoPin	data/nptypes.h	/^	kNPgeoPin,				\/\/!<height 5.5, 5 from tip to center of sphere$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoPinWire	data/nptypes.h	/^	kNPgeoPinWire,								\/\/!< solid and wire reversed, debug zz$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoPlot	data/nptypes.h	/^	kNPgeoPlot,$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoSphere	data/nptypes.h	/^	kNPgeoSphere,			\/\/!<radius 1$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoSphereWire	data/nptypes.h	/^	kNPgeoSphereWire,$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoSurface	data/nptypes.h	/^	kNPgeoSurface,$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoTetrahedron	data/nptypes.h	/^	kNPgeoTetrahedron,		\/\/!<should have edge length of 2, actual size ?$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoTetrahedronWire	data/nptypes.h	/^	kNPgeoTetrahedronWire,$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoTorus	data/nptypes.h	/^	kNPgeoTorus,			\/\/!<ratio 0.1, radius 1.5 should we change to 1.0 ?$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeoTorusWire	data/nptypes.h	/^	kNPgeoTorusWire,$/;"	e	enum:kNP_GEOMETRY_TYPES
kNPgeometry	data/nptypes.h	/^	kNPgeometry,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPglNormalNull	data/nptypes.h	/^	kNPglNormalNull = 0,$/;"	e	enum:kNP_GL_NORMALS
kNPglNormalSize	data/nptypes.h	/^	kNPglNormalSize$/;"	e	enum:kNP_GL_NORMALS
kNPglNormalize	data/nptypes.h	/^	kNPglNormalize,$/;"	e	enum:kNP_GL_NORMALS
kNPglRescaleNormal	data/nptypes.h	/^	kNPglRescaleNormal,$/;"	e	enum:kNP_GL_NORMALS
kNPglShadeFlat	data/nptypes.h	/^	kNPglShadeFlat,$/;"	e	enum:kNP_GL_SHADER_MODE
kNPglShadeNull	data/nptypes.h	/^	kNPglShadeNull = 0,$/;"	e	enum:kNP_GL_SHADER_MODE
kNPglShadeSize	data/nptypes.h	/^	kNPglShadeSize$/;"	e	enum:kNP_GL_SHADER_MODE
kNPglShadeSmooth	data/nptypes.h	/^	kNPglShadeSmooth,$/;"	e	enum:kNP_GL_SHADER_MODE
kNPglobal	data/nptypes.h	/^	kNPglobal,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPgrid	data/nptypes.h	/^	kNPgrid,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPgridItemCount	data/nptypes.h	125;"	d
kNPgridSegmentsX	data/nptypes.h	112;"	d
kNPgridSegmentsY	data/nptypes.h	113;"	d
kNPgridSpacing	data/nptypes.h	111;"	d
kNPheight	data/nptypes.h	/^	kNPheight,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPhide	data/nptypes.h	/^	kNPhide,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPhudAngle	data/nptypes.h	/^		kNPhudAngle,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudColor	data/nptypes.h	/^	kNPhudColor,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudCombo	data/nptypes.h	/^	kNPhudCombo,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudCompass	data/nptypes.h	/^	kNPhudCompass,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudConsole	data/nptypes.h	/^	kNPhudConsole,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudCoordX	data/nptypes.h	/^		kNPhudCoordX,		\/\/!<perhaps just call kNPhudX,					zz debug$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudCoordY	data/nptypes.h	/^		kNPhudCoordY,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudCoordZ	data/nptypes.h	/^		kNPhudCoordZ,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudCount	data/nptypes.h	/^	kNPhudCount$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudCreate	data/nptypes.h	/^	kNPhudCreate,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudFPS	data/nptypes.h	/^	kNPhudFPS,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudGeo	data/nptypes.h	/^	kNPhudGeo,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudHide	data/nptypes.h	/^	kNPhudHide,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudLevel	data/nptypes.h	/^	kNPhudLevel,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPhudLink	data/nptypes.h	/^	kNPhudLink,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudMode	data/nptypes.h	/^	kNPhudMode,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudMove	data/nptypes.h	/^	kNPhudMove,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudNull	data/nptypes.h	/^	kNPhudNull = 0,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudRotate	data/nptypes.h	/^	kNPhudRotate,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudSave	data/nptypes.h	/^	kNPhudSave,			\/\/!<zz select$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudSelect	data/nptypes.h	/^	kNPhudSelect,		\/\/!<zzf$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudSelection	data/nptypes.h	/^	kNPhudSelection,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudSize	data/nptypes.h	/^	kNPhudSize,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudTag	data/nptypes.h	/^	kNPhudTag,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudTags	data/nptypes.h	/^	kNPhudTags,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudTexture	data/nptypes.h	/^	kNPhudTexture,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudTool	data/nptypes.h	/^	kNPhudTool,$/;"	e	enum:kNP_HUD_ELEMENT
kNPhudTopo	data/nptypes.h	/^	kNPhudTopo,$/;"	e	enum:kNP_HUD_ELEMENT
kNPid	data/nptypes.h	/^	kNPid,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPinnerRadius	data/nptypes.h	/^	kNPinnerRadius,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPinputStrMax	data/nptypes.h	151;"	d
kNPint	data/nptypes.h	/^	kNPint,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPintXY	data/nptypes.h	/^	kNPintXY,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPintXYZ	data/nptypes.h	/^	kNPintXYZ,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPintXYZS	data/nptypes.h	/^	kNPintXYZS,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPinterlaced	data/nptypes.h	/^	kNPinterlaced,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPinterval	data/nptypes.h	/^	kNPinterval,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPinvertDeg	io/gl/npgldraw.c	435;"	d	file:
kNPinvertDeg	io/gl/npgldraw.c	834;"	d	file:
kNPio	data/nptypes.h	/^	kNPio,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPitemCount	data/nptypes.h	/^	kNPitemCount,	\/\/!<used at end of lists to determine number of items in list$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPjustifyCenter	data/nptypes.h	/^	kNPjustifyCenter$/;"	e	enum:kNP_FONT_JUSTIFY
kNPjustifyLeft	data/nptypes.h	/^	kNPjustifyLeft = 0,$/;"	e	enum:kNP_FONT_JUSTIFY
kNPjustifyRight	data/nptypes.h	/^	kNPjustifyRight,$/;"	e	enum:kNP_FONT_JUSTIFY
kNPkeyCodeASCII	io/npkey.c	/^	kNPkeyCodeASCII,$/;"	e	enum:__anon5	file:
kNPkeyCodeDefault	io/npkey.c	/^	kNPkeyCodeDefault = 0,$/;"	e	enum:__anon5	file:
kNPkeyCodeGLUTspecial	io/npkey.c	/^	kNPkeyCodeGLUTspecial,$/;"	e	enum:__anon5	file:
kNPkeyCodeHID	io/npkey.c	/^	kNPkeyCodeHID$/;"	e	enum:__anon5	file:
kNPkeyCodeLinux	io/npkey.c	/^	kNPkeyCodeLinux,$/;"	e	enum:__anon5	file:
kNPkeyCodeMSW	io/npkey.c	/^	kNPkeyCodeMSW,$/;"	e	enum:__anon5	file:
kNPkeyCodeOSX	io/npkey.c	/^	kNPkeyCodeOSX,$/;"	e	enum:__anon5	file:
kNPkeyEventTypeSize	data/nptypes.h	71;"	d
kNPkeyMapSize	data/nptypes.h	70;"	d
kNPkeyModeASCII	io/npkey.c	/^	kNPkeyModeASCII$/;"	e	enum:__anon7	file:
kNPkeyModeRAW	io/npkey.c	/^	kNPkeyModeRAW = 0,$/;"	e	enum:__anon7	file:
kNPlineWidth	data/nptypes.h	/^	kNPlineWidth,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPlinkQueMax	data/nptypes.h	146;"	d
kNPlist	data/nptypes.h	/^	kNPlist,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPloginHostIP	data/nptypes.h	/^	kNPloginHostIP,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPloginHostType	data/nptypes.h	/^	kNPloginHostType,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPloginNull	data/nptypes.h	/^	kNPloginNull,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPloginPassword	data/nptypes.h	/^	kNPloginPassword,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPloginUser	data/nptypes.h	/^	kNPloginUser,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPmap	data/nptypes.h	/^	kNPmap,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPmapArray	data/nptypes.h	/^	kNPmapArray,$/;"	e	enum:kNP_MAP_TYPE
kNPmapAudio	data/nptypes.h	/^	kNPmapAudio,$/;"	e	enum:kNP_MAP_TYPE
kNPmapBUS	data/nptypes.h	/^	kNPmapBUS,				\/\/!< Node maps$/;"	e	enum:kNP_MAP_TYPE
kNPmapCPU	data/nptypes.h	/^	kNPmapCPU,$/;"	e	enum:kNP_MAP_TYPE
kNPmapCSV	data/nptypes.h	/^	kNPmapCSV,			\/\/!<generic table\/row\/field\/type$/;"	e	enum:kNP_MAP_TYPE
kNPmapChannel	data/nptypes.h	/^	kNPmapChannel,$/;"	e	enum:kNP_MAP_TYPE
kNPmapCount	data/nptypes.h	/^	kNPmapCount$/;"	e	enum:kNP_MAP_TYPE
kNPmapDB	data/nptypes.h	/^	kNPmapDB,			\/\/!<native DB format is MySQL$/;"	e	enum:kNP_MAP_TYPE
kNPmapDraw	data/nptypes.h	/^	kNPmapDraw,				\/\/!<a list of objects to draw in a GL context $/;"	e	enum:kNP_MAP_TYPE
kNPmapDrive	data/nptypes.h	/^	kNPmapDrive,$/;"	e	enum:kNP_MAP_TYPE
kNPmapFileBufferMax	data/nptypes.h	73;"	d
kNPmapGL	data/nptypes.h	/^	kNPmapGL,$/;"	e	enum:kNP_MAP_TYPE
kNPmapGPU	data/nptypes.h	/^	kNPmapGPU,$/;"	e	enum:kNP_MAP_TYPE
kNPmapGalaxy	data/nptypes.h	/^	kNPmapGalaxy,$/;"	e	enum:kNP_MAP_TYPE
kNPmapGalaxyCluster	data/nptypes.h	/^	kNPmapGalaxyCluster,$/;"	e	enum:kNP_MAP_TYPE
kNPmapGlobals	data/nptypes.h	/^	kNPmapGlobals,$/;"	e	enum:kNP_MAP_TYPE
kNPmapHID	data/nptypes.h	/^	kNPmapHID,				\/\/!<end physical locality start virtual structures$/;"	e	enum:kNP_MAP_TYPE
kNPmapHaptic	data/nptypes.h	/^	kNPmapHaptic,$/;"	e	enum:kNP_MAP_TYPE
kNPmapID	data/nptypes.h	/^	kNPmapID,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPmapIO	data/nptypes.h	/^	kNPmapIO,				\/\/!< typically a bus device if a node$/;"	e	enum:kNP_MAP_TYPE
kNPmapItem	data/nptypes.h	/^	kNPmapItem,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPmapJSON	data/nptypes.h	/^	kNPmapJSON,			\/\/!<likely the most descriptive$/;"	e	enum:kNP_MAP_TYPE
kNPmapJoystick	data/nptypes.h	/^	kNPmapJoystick,$/;"	e	enum:kNP_MAP_TYPE
kNPmapKML	data/nptypes.h	/^	kNPmapKML,			\/\/!<google KML, related to COLLADA$/;"	e	enum:kNP_MAP_TYPE
kNPmapKey	data/nptypes.h	/^	kNPmapKey,$/;"	e	enum:kNP_MAP_TYPE
kNPmapList	data/nptypes.h	/^	kNPmapList,$/;"	e	enum:kNP_MAP_TYPE
kNPmapMouse	data/nptypes.h	/^	kNPmapMouse,$/;"	e	enum:kNP_MAP_TYPE
kNPmapMultiverse	data/nptypes.h	/^	kNPmapMultiverse,		\/\/!<collection of universes		$/;"	e	enum:kNP_MAP_TYPE
kNPmapNP	data/nptypes.h	/^	kNPmapNP,				\/\/!<map descriptor to build maps$/;"	e	enum:kNP_MAP_TYPE
kNPmapNPE	data/nptypes.h	/^	kNPmapNPE,$/;"	e	enum:kNP_MAP_TYPE
kNPmapNetwork	data/nptypes.h	/^	kNPmapNetwork,$/;"	e	enum:kNP_MAP_TYPE
kNPmapNode	data/nptypes.h	/^	kNPmapNode,$/;"	e	enum:kNP_MAP_TYPE
kNPmapNodeCSV	data/nptypes.h	/^	kNPmapNodeCSV,		\/\/!<zz$/;"	e	enum:kNP_MAP_TYPE
kNPmapNodeCSVvOne	data/nptypes.h	/^	kNPmapNodeCSVvOne,	\/\/!<zz debug... move this elsewhere$/;"	e	enum:kNP_MAP_TYPE
kNPmapNull	data/nptypes.h	/^	kNPmapNull = 0,			\/\/!<default native handler$/;"	e	enum:kNP_MAP_TYPE
kNPmapOSC	data/nptypes.h	/^	kNPmapOSC,			\/\/!<default 3rd party OSC mapping$/;"	e	enum:kNP_MAP_TYPE
kNPmapQuadsort	data/nptypes.h	/^	kNPmapQuadsort,			\/\/!<break scene into quadrants, cluster and NPE$/;"	e	enum:kNP_MAP_TYPE
kNPmapRAM	data/nptypes.h	/^	kNPmapRAM,$/;"	e	enum:kNP_MAP_TYPE
kNPmapRegion	data/nptypes.h	/^	kNPmapRegion,			\/\/!< < 30 ms latency, < 4000km  kNPmapLocation,			\/\/!< < 3 ms latency, < 400km   kNPmapCluster,			\/\/!< < 1 ms latency, < 40km$/;"	e	enum:kNP_MAP_TYPE
kNPmapRoot	data/nptypes.h	/^	kNPmapRoot,				\/\/!<1 root to rule them all$/;"	e	enum:kNP_MAP_TYPE
kNPmapSNMP	data/nptypes.h	/^	kNPmapSNMP,			\/\/!<can bridge SNMP-JSON-OSC$/;"	e	enum:kNP_MAP_TYPE
kNPmapSolar	data/nptypes.h	/^	kNPmapSolar,			\/\/!<single star or binary\/trinary... system$/;"	e	enum:kNP_MAP_TYPE
kNPmapSpot	data/nptypes.h	/^	kNPmapSpot,				\/\/!< < 1 ms latency, \/\/!< < 4m, CPU node, not scene node$/;"	e	enum:kNP_MAP_TYPE
kNPmapSystem	data/nptypes.h	/^	kNPmapSystem, $/;"	e	enum:kNP_MAP_TYPE
kNPmapTablet	data/nptypes.h	/^	kNPmapTablet,$/;"	e	enum:kNP_MAP_TYPE
kNPmapTag	data/nptypes.h	/^	kNPmapTag,$/;"	e	enum:kNP_MAP_TYPE
kNPmapTouchScreen	data/nptypes.h	/^	kNPmapTouchScreen,$/;"	e	enum:kNP_MAP_TYPE
kNPmapTrack	data/nptypes.h	/^	kNPmapTrack,$/;"	e	enum:kNP_MAP_TYPE
kNPmapTree	data/nptypes.h	/^	kNPmapTree,$/;"	e	enum:kNP_MAP_TYPE
kNPmapTypeCount	data/nptypes.h	/^	kNPmapTypeCount,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPmapUniverse	data/nptypes.h	/^	kNPmapUniverse,$/;"	e	enum:kNP_MAP_TYPE
kNPmapVideo	data/nptypes.h	/^	kNPmapVideo,$/;"	e	enum:kNP_MAP_TYPE
kNPmapWorld	data/nptypes.h	/^	kNPmapWorld,			\/\/!< Earth is 100ms typical, 10ms theoretical$/;"	e	enum:kNP_MAP_TYPE
kNPmapXML	data/nptypes.h	/^	kNPmapXML,			\/\/!<for 3rd party data support$/;"	e	enum:kNP_MAP_TYPE
kNPmapZsort	data/nptypes.h	/^	kNPmapZsort,				\/\/!<GL draw order, for correct alpha rendering$/;"	e	enum:kNP_MAP_TYPE
kNPmaxCommands	io/net/nposcpack.cpp	176;"	d	file:
kNPmaxConnect	data/nptypes.h	1423;"	d
kNPmaxFloatProperties	data/nptypes.h	162;"	d
kNPmaxFolderDepth	io/npfile.c	459;"	d	file:
kNPmaxLineLength	data/nptypes.h	164;"	d
kNPmaxName	data/nptypes.h	117;"	d
kNPmaxPath	data/nptypes.h	118;"	d
kNPmaxPropertiesMapped	data/nptypes.h	166;"	d
kNPmaxTokens	data/nptypes.h	165;"	d
kNPmaxTrackToAttributeMappings	data/nptypes.h	153;"	d
kNPmaxTracks	data/nptypes.h	161;"	d
kNPmaxUcharProperties	data/nptypes.h	163;"	d
kNPmenuPerPageMax	data/nptypes.h	131;"	d
kNPmessageLengthMax	data/nptypes.h	137;"	d
kNPmessageQueMax	data/nptypes.h	136;"	d
kNPmodeCamera	data/nptypes.h	/^	kNPmodeCamera,				\/\/!< pick cameras$/;"	e	enum:kNP_SELECT_FILTER
kNPmodeCount	data/nptypes.h	/^	kNPmodeCount$/;"	e	enum:kNP_SELECT_FILTER
kNPmodeGrid	data/nptypes.h	/^	kNPmodeGrid,				\/\/!< pick grids$/;"	e	enum:kNP_SELECT_FILTER
kNPmodeNull	data/nptypes.h	/^	kNPmodeNull = 0,$/;"	e	enum:kNP_SELECT_FILTER
kNPmodePin	data/nptypes.h	/^	kNPmodePin,					\/\/!< pick pins$/;"	e	enum:kNP_SELECT_FILTER
kNPmouseCamMode	data/nptypes.h	/^	kNPmouseCamMode,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPmouseModeCamExamXY	data/nptypes.h	/^	kNPmouseModeCamExamXY,$/;"	e	enum:kNP_MOUSE_MODE
kNPmouseModeCamExamXZ	data/nptypes.h	/^	kNPmouseModeCamExamXZ,$/;"	e	enum:kNP_MOUSE_MODE
kNPmouseModeCamFlyA	data/nptypes.h	/^	kNPmouseModeCamFlyA,$/;"	e	enum:kNP_MOUSE_MODE
kNPmouseModeCamFlyB	data/nptypes.h	/^	kNPmouseModeCamFlyB,$/;"	e	enum:kNP_MOUSE_MODE
kNPmouseModeCamLook	data/nptypes.h	/^	kNPmouseModeCamLook,$/;"	e	enum:kNP_MOUSE_MODE
kNPmouseModeDragWorld	data/nptypes.h	/^	kNPmouseModeDragWorld,$/;"	e	enum:kNP_MOUSE_MODE
kNPmouseModeDragXY	data/nptypes.h	/^	kNPmouseModeDragXY,$/;"	e	enum:kNP_MOUSE_MODE
kNPmouseModeDragXZ	data/nptypes.h	/^	kNPmouseModeDragXZ,$/;"	e	enum:kNP_MOUSE_MODE
kNPmouseModeNull	data/nptypes.h	/^	kNPmouseModeNull = 0,$/;"	e	enum:kNP_MOUSE_MODE
kNPmousePickMode	data/nptypes.h	/^	kNPmousePickMode,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPmouseTool	data/nptypes.h	/^	kNPmouseTool,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPmsgCtrl	data/nptypes.h	/^	kNPmsgCtrl,$/;"	e	enum:kNP_MESSAGE_TYPE
kNPmsgDB	data/nptypes.h	/^	kNPmsgDB,$/;"	e	enum:kNP_MESSAGE_TYPE
kNPmsgDebug	data/nptypes.h	/^	kNPmsgDebug,$/;"	e	enum:kNP_MESSAGE_TYPE
kNPmsgErr	data/nptypes.h	/^	kNPmsgErr,$/;"	e	enum:kNP_MESSAGE_TYPE
kNPmsgFile	data/nptypes.h	/^	kNPmsgFile,$/;"	e	enum:kNP_MESSAGE_TYPE
kNPmsgGL	data/nptypes.h	/^	kNPmsgGL,$/;"	e	enum:kNP_MESSAGE_TYPE
kNPmsgHint	data/nptypes.h	/^	kNPmsgHint,$/;"	e	enum:kNP_MESSAGE_TYPE
kNPmsgNPE	data/nptypes.h	/^	kNPmsgNPE,$/;"	e	enum:kNP_MESSAGE_TYPE
kNPmsgNull	data/nptypes.h	/^	kNPmsgNull = 0,$/;"	e	enum:kNP_MESSAGE_TYPE
kNPmsgOSC	data/nptypes.h	/^	kNPmsgOSC,$/;"	e	enum:kNP_MESSAGE_TYPE
kNPmsgView	data/nptypes.h	/^	kNPmsgView,$/;"	e	enum:kNP_MESSAGE_TYPE
kNPmsgWarn	data/nptypes.h	/^	kNPmsgWarn,$/;"	e	enum:kNP_MESSAGE_TYPE
kNPmysql	io/db/npauxdb.h	/^	kNPmysql$/;"	e	enum:__anon3
kNPnameMax	data/nptypes.h	304;"	d
kNPnode	data/nptypes.h	/^	kNPnode,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPnodeChildMax	data/nptypes.h	78;"	d
kNPnodeData	data/nptypes.h	/^	kNPnodeData,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPnodeItemCount	data/nptypes.h	123;"	d
kNPnodeMax	data/nptypes.h	76;"	d
kNPnodeRootCamera	data/nptypes.h	/^	kNPnodeRootCamera,			\/\/!< root node index for all cameras$/;"	e	enum:kNP_NODE_ROOT_GROUP
kNPnodeRootCount	data/nptypes.h	/^	kNPnodeRootCount,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPnodeRootGrid	data/nptypes.h	/^	kNPnodeRootGrid,			\/\/!< root node index for all grids$/;"	e	enum:kNP_NODE_ROOT_GROUP
kNPnodeRootHUD	data/nptypes.h	/^	kNPnodeRootHUD,$/;"	e	enum:kNP_NODE_ROOT_GROUP
kNPnodeRootMax	data/nptypes.h	77;"	d
kNPnodeRootNull	data/nptypes.h	/^	kNPnodeRootNull = 0,$/;"	e	enum:kNP_NODE_ROOT_GROUP
kNPnodeRootPin	data/nptypes.h	/^	kNPnodeRootPin				\/\/!< first root node for all pins$/;"	e	enum:kNP_NODE_ROOT_GROUP
kNPnull	data/nptypes.h	/^	kNPnull = 0,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPoffsetCube	data/nptypes.h	96;"	d
kNPoffsetPin	data/nptypes.h	98;"	d
kNPoffsetRod	data/nptypes.h	99;"	d
kNPoffsetTorus	data/nptypes.h	97;"	d
kNPoffsetUnit	data/nptypes.h	95;"	d
kNPoscListMax	data/nptypes.h	307;"	d
kNPouterRadius	data/nptypes.h	/^	kNPouterRadius,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPoverlay	data/nptypes.h	/^	kNPoverlay,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPpaletteMax	data/nptypes.h	68;"	d
kNPpaletteSize	data/nptypes.h	115;"	d
kNPparent	data/nptypes.h	/^	kNPparent,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPpin	data/nptypes.h	/^	kNPpin,			\/\/!<zz remove this, too easily confused with kNodePin$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPpinItemCount	data/nptypes.h	126;"	d
kNPpointSize	data/nptypes.h	/^	kNPpointSize,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPposition	data/nptypes.h	/^	kNPposition,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPpositionBottom	data/nptypes.h	/^	kNPpositionBottom,$/;"	e	enum:kNP_QUADRANT
kNPpositionCenter	data/nptypes.h	/^	kNPpositionCenter,			\/\/!<refers to either vertical or horizontal middle$/;"	e	enum:kNP_QUADRANT
kNPpositionCount	data/nptypes.h	/^	kNPpositionCount$/;"	e	enum:kNP_QUADRANT
kNPpositionLeft	data/nptypes.h	/^	kNPpositionLeft,$/;"	e	enum:kNP_QUADRANT
kNPpositionNull	data/nptypes.h	/^	kNPpositionNull = 0,$/;"	e	enum:kNP_QUADRANT
kNPpositionRight	data/nptypes.h	/^	kNPpositionRight,$/;"	e	enum:kNP_QUADRANT
kNPpositionTop	data/nptypes.h	/^	kNPpositionTop,$/;"	e	enum:kNP_QUADRANT
kNPpositionXY	data/nptypes.h	/^	kNPpositionXY,		\/\/!<zz debug or should this just be kNPposition?$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPpositionXYZ	data/nptypes.h	/^	kNPpositionXYZ,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPproximity	data/nptypes.h	/^	kNPproximity,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPproximityMode	data/nptypes.h	/^	kNPproximityMode,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPpwdMax	data/nptypes.h	/^	kNPpwdMax		= 256,		\/\/\/< max password length$/;"	e	enum:NP_DATABASE
kNPque	data/nptypes.h	/^	kNPque,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPqueCmd	data/nptypes.h	/^	kNPqueCmd,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPqueDefaultSize	data/npmap.c	1144;"	d	file:
kNPqueItem	data/nptypes.h	/^	kNPqueItem,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPqueMax	data/nptypes.h	1422;"	d
kNPradiusRatioIndex	data/nptypes.h	/^	kNPradiusRatioIndex,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPratio	data/nptypes.h	/^	kNPratio,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPrecordCount	data/nptypes.h	/^	kNPrecordCount,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPrecordID	data/nptypes.h	/^	kNPrecordID,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNProtate	data/nptypes.h	/^	kNProtate,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNProtateRate	data/nptypes.h	/^	kNProtateRate,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNProtateTex	data/nptypes.h	/^	kNProtateTex,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNProtateVec	data/nptypes.h	/^	kNProtateVec,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPrxIP	data/nptypes.h	/^	kNPrxIP,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPrxPort	data/nptypes.h	/^	kNPrxPort,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPscale	data/nptypes.h	/^	kNPscale,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPscaleCube	data/nptypes.h	105;"	d
kNPscaleCylinder	data/nptypes.h	107;"	d
kNPscaleDefault	data/nptypes.h	101;"	d
kNPscalePin	data/nptypes.h	103;"	d
kNPscalePinPin	data/nptypes.h	104;"	d
kNPscaleRate	data/nptypes.h	/^	kNPscaleRate,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPscaleRod	data/nptypes.h	102;"	d
kNPscaleSphere	data/nptypes.h	106;"	d
kNPscaleTex	data/nptypes.h	/^	kNPscaleTex,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPscaleTorus	data/nptypes.h	108;"	d
kNPscaleTorusTorus	data/nptypes.h	109;"	d
kNPscreenSizeIndex	data/nptypes.h	/^	kNPscreenSizeIndex,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPsegments	data/nptypes.h	/^	kNPsegments,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPselected	data/nptypes.h	/^	kNPselected,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPsensorType	data/nptypes.h	/^	kNPsensorType,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPsetHi	data/nptypes.h	/^	kNPsetHi,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPsetLo	data/nptypes.h	/^	kNPsetLo,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPshader	data/nptypes.h	/^	kNPshader,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPsingleClickTime	data/nptypes.h	148;"	d
kNPsize	data/nptypes.h	/^	kNPsize$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPslices	data/nptypes.h	/^	kNPslices,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPsphereRadius	data/nptypes.h	90;"	d
kNPstacks	data/nptypes.h	/^	kNPstacks,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPstereo	data/nptypes.h	/^	kNPstereo,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPsubsample	data/nptypes.h	/^	kNPsubsample,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtag	data/nptypes.h	/^	kNPtag,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtagDesc	data/nptypes.h	/^	kNPtagDesc,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtagDescMax	data/nptypes.h	142;"	d
kNPtagDrawMax	data/nptypes.h	144;"	d
kNPtagFieldCount	data/npmapfile.c	1382;"	d	file:
kNPtagID	data/nptypes.h	/^	kNPtagID,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtagItemCount	data/nptypes.h	128;"	d
kNPtagMax	data/nptypes.h	143;"	d
kNPtagMode	data/nptypes.h	/^	kNPtagMode,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtagModeBoxHUD	data/nptypes.h	/^	kNPtagModeBoxHUD,			\/\/!<node colored text on grey box, no outline$/;"	e	enum:kNP_TAG_MODE
kNPtagModeBoxOutlineHUD	data/nptypes.h	/^	kNPtagModeBoxOutlineHUD,	\/\/!<white text on grey box, node colored outline$/;"	e	enum:kNP_TAG_MODE
kNPtagModeCount	data/nptypes.h	/^	kNPtagModeCount$/;"	e	enum:kNP_TAG_MODE
kNPtagModeNull	data/nptypes.h	/^	kNPtagModeNull = 0,			\/\/!<fixed to object in 3D scene, not oriented$/;"	e	enum:kNP_TAG_MODE
kNPtagName	data/nptypes.h	/^	kNPtagName,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtagOffset	data/nptypes.h	/^	kNPtagOffset,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtagTitleMax	data/nptypes.h	141;"	d
kNPtagWriteLimit	io/file/npcsv.c	1121;"	d	file:
kNPtextureCountMax	data/nptypes.h	67;"	d
kNPtextureID	data/nptypes.h	/^	kNPtextureID,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPthreadFuncPtr	data/nptypes.h	/^	kNPthreadFuncPtr,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPthumbHeight	data/nptypes.h	169;"	d
kNPthumbWidth	data/nptypes.h	168;"	d
kNPtitle	data/nptypes.h	/^	kNPtitle,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtoolAlpha	data/nptypes.h	/^	kNPtoolAlpha,			\/\/!< L-Click reduces Alpha color, R-Click increases$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolChannel	data/nptypes.h	/^	kNPtoolChannel,			\/\/!< L-click next Channel, R-click reverses$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolColor	data/nptypes.h	/^	kNPtoolColor,			\/\/!< L-click next Color index, R-click reverses$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolCombo	data/nptypes.h	/^	kNPtoolCombo,			\/\/!< Camera move or Pin select, move, rotate, scale and ratio$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolCount	data/nptypes.h	/^	kNPtoolCount			\/\/!< enumeration item count$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolCreate	data/nptypes.h	/^	kNPtoolCreate,			\/\/!< L-click creates new node, R-click to delete$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolFreeze	data/nptypes.h	/^	kNPtoolFreeze,			\/\/!< L-click Freezes node, R-click un-Freezes$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolGeometry	data/nptypes.h	/^	kNPtoolGeometry,		\/\/!< L-click next Primitive type, R-click reverses$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolHide	data/nptypes.h	/^	kNPtoolHide,			\/\/!< L-click Hide branches, R-click Show branches$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolLink	data/nptypes.h	/^	kNPtoolLink,			\/\/!< L-click to Select A then Select B, R-click to Cancel (re-select A)$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolMove	data/nptypes.h	/^	kNPtoolMove,			\/\/!< L-drag Move in XY, R-drag for XZ$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolNull	data/nptypes.h	/^	kNPtoolNull = 0,		\/\/!< default behavior based on pickMode$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolRotate	data/nptypes.h	/^	kNPtoolRotate,			\/\/!< L-drag Rotate XY, R-drag for Z$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolSelect	data/nptypes.h	/^	kNPtoolSelect,			\/\/!< L-click picks object, R-click group, drag region$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolSetpointHi	data/nptypes.h	/^	kNPtoolSetpointHi,		\/\/!< L-click to Set Upper Limit, R-click clears Setpoint$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolSetpointLo	data/nptypes.h	/^	kNPtoolSetpointLo,		\/\/!< L-click to Set Lower Limit, R-click clears Setpoint$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolSize	data/nptypes.h	/^	kNPtoolSize,			\/\/!< L-drag Scale XYZ axes or R-drag for torus Ratio$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolTag	data/nptypes.h	/^	kNPtoolTag,				\/\/!< L-click toggles Text Tag, R-click hides Tag$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolTexture	data/nptypes.h	/^	kNPtoolTexture,			\/\/!< L-click next Topo type, R-click reverses$/;"	e	enum:kNP_TOOL_TYPE
kNPtoolTopo	data/nptypes.h	/^	kNPtoolTopo,			\/\/!< L-click next Topo type, R-click reverses$/;"	e	enum:kNP_TOOL_TYPE
kNPtopo	data/nptypes.h	/^	kNPtopo,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtopoCone	data/nptypes.h	/^	kNPtopoCone,$/;"	e	enum:kNP_TOPOLOGY_TYPE
kNPtopoCount	data/nptypes.h	/^	kNPtopoCount,$/;"	e	enum:kNP_TOPOLOGY_TYPE
kNPtopoCube	data/nptypes.h	/^	kNPtopoCube,			\/\/!<six facet coord system for each side of cube$/;"	e	enum:kNP_TOPOLOGY_TYPE
kNPtopoCylinder	data/nptypes.h	/^	kNPtopoCylinder,$/;"	e	enum:kNP_TOPOLOGY_TYPE
kNPtopoMesh	data/nptypes.h	/^	kNPtopoMesh			\/\/!<3D mesh model mapped as surface terrain$/;"	e	enum:kNP_TOPOLOGY_TYPE
kNPtopoNull	data/nptypes.h	/^	kNPtopoNull = 0,		\/\/!< linear 3D euclidean space$/;"	e	enum:kNP_TOPOLOGY_TYPE
kNPtopoPin	data/nptypes.h	/^	kNPtopoPin,				\/\/!<default root pin shaped as icecream cone$/;"	e	enum:kNP_TOPOLOGY_TYPE
kNPtopoPlot	data/nptypes.h	/^	kNPtopoPlot,			\/\/!<perhaps call it a plot and not a graph$/;"	e	enum:kNP_TOPOLOGY_TYPE
kNPtopoPoint	data/nptypes.h	/^	kNPtopoPoint,			\/\/!<zero origin offset with spherical coords$/;"	e	enum:kNP_TOPOLOGY_TYPE
kNPtopoRod	data/nptypes.h	/^	kNPtopoRod,$/;"	e	enum:kNP_TOPOLOGY_TYPE
kNPtopoSphere	data/nptypes.h	/^	kNPtopoSphere,			\/\/!<spherical coords compatible with KML$/;"	e	enum:kNP_TOPOLOGY_TYPE
kNPtopoSurface	data/nptypes.h	/^	kNPtopoSurface,			\/\/!<deformable grid, FFT, color ball, sound sphere$/;"	e	enum:kNP_TOPOLOGY_TYPE
kNPtopoTorus	data/nptypes.h	/^	kNPtopoTorus,			\/\/!<default branchLevel = 1 attached to pin$/;"	e	enum:kNP_TOPOLOGY_TYPE
kNPtorusRadius	data/nptypes.h	92;"	d
kNPtrackBufferSize	data/nptypes.h	159;"	d
kNPtrackID	data/nptypes.h	/^	kNPtrackID,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtrackOffset	data/nptypes.h	156;"	d
kNPtrackTableID	data/nptypes.h	/^	kNPtrackTableID,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtranslate	data/nptypes.h	/^	kNPtranslate,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtranslateRate	data/nptypes.h	/^	kNPtranslateRate,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtranslateTex	data/nptypes.h	/^	kNPtranslateTex,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtranslateVec	data/nptypes.h	/^	kNPtranslateVec,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtriggerHi	data/nptypes.h	/^	kNPtriggerHi,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtriggerLo	data/nptypes.h	/^	kNPtriggerLo,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtxIP	data/nptypes.h	/^	kNPtxIP,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtxPort	data/nptypes.h	/^	kNPtxPort,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPtype	data/nptypes.h	/^	kNPtype,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPubyte	data/nptypes.h	/^	kNPubyte,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPubyteRGB	data/nptypes.h	/^	kNPubyteRGB,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPubyteRGBA	data/nptypes.h	/^	kNPubyteRGBA,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPuint	data/nptypes.h	/^	kNPuint,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPurlMax	data/nptypes.h	119;"	d
kNPuserMax	data/nptypes.h	1511;"	d
kNPuserMax	data/nptypes.h	1529;"	d
kNPuserNameMax	data/nptypes.h	/^	kNPuserNameMax	= 256,		\/\/\/< max user name length$/;"	e	enum:NP_DATABASE
kNPversion	data/nptypes.h	/^	kNPversion,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPvoidPtr	data/nptypes.h	/^	kNPvoidPtr,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPwidth	data/nptypes.h	/^	kNPwidth,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPwindowHeight	data/nptypes.h	172;"	d
kNPwindowPositionX	data/nptypes.h	173;"	d
kNPwindowPositionY	data/nptypes.h	174;"	d
kNPwindowSize	data/nptypes.h	/^	kNPwindowSize,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPwindowSizeXY	data/nptypes.h	/^	kNPwindowSizeXY,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPwindowSizeXYZ	data/nptypes.h	/^	kNPwindowSizeXYZ,$/;"	e	enum:kNP_NATIVE_DATA_TYPES
kNPwindowWidth	data/nptypes.h	171;"	d
kNeg2PI	data/npmath.h	33;"	d
kNodeCamera	data/nptypes.h	/^	kNodeCamera,			\/\/!<for both real-world and virtual GL cameras$/;"	e	enum:kNP_NODE_TYPES
kNodeCount	data/nptypes.h	/^	kNodeCount$/;"	e	enum:kNP_NODE_TYPES
kNodeDefault	data/nptypes.h	/^	kNodeDefault = 0,$/;"	e	enum:kNP_NODE_TYPES
kNodeGrid	data/nptypes.h	/^	kNodeGrid,				\/\/!<grid in 1D, 2D or 3D$/;"	e	enum:kNP_NODE_TYPES
kNodeHUD	data/nptypes.h	/^	kNodeHUD,				\/\/!<HUD elements and tools$/;"	e	enum:kNP_NODE_TYPES
kNodeLink	data/nptypes.h	/^	kNodeLink,				\/\/!<links any two nodes$/;"	e	enum:kNP_NODE_TYPES
kNodePin	data/nptypes.h	/^	kNodePin,				\/\/!<combo of cones, spheres, toroids, etc...$/;"	e	enum:kNP_NODE_TYPES
kNodePoints	data/nptypes.h	/^	kNodePoints,			\/\/!<for X\/XY\/XYZ line, eeg\/ecg, temp, movement...$/;"	e	enum:kNP_NODE_TYPES
kNodeSurface	data/nptypes.h	/^	kNodeSurface,			\/\/!<ground, sky... background objects drawn first$/;"	e	enum:kNP_NODE_TYPES
kNodeVideo	data/nptypes.h	/^	kNodeVideo,				\/\/!<video from live\/stream, internal GL, or file$/;"	e	enum:kNP_NODE_TYPES
kPI	data/npmath.h	31;"	d
kRADtoDEG	data/npmath.h	34;"	d
kSelectAdd	data/nptypes.h	/^	kSelectAdd,$/;"	e	enum:kNP_SELECT_COMMANDS
kSelectAll	data/nptypes.h	/^	kSelectAll,$/;"	e	enum:kNP_SELECT_COMMANDS
kSelectChildren	data/nptypes.h	/^	kSelectChildren,$/;"	e	enum:kNP_SELECT_COMMANDS
kSelectColor	data/nptypes.h	/^	kSelectColor,$/;"	e	enum:kNP_SELECT_COMMANDS
kSelectNULL	data/nptypes.h	/^	kSelectNULL = 0,$/;"	e	enum:kNP_SELECT_COMMANDS
kSelectNone	data/nptypes.h	/^	kSelectNone,$/;"	e	enum:kNP_SELECT_COMMANDS
kSelectParent	data/nptypes.h	/^	kSelectParent,$/;"	e	enum:kNP_SELECT_COMMANDS
kSelectProperty	data/nptypes.h	/^	kSelectProperty$/;"	e	enum:kNP_SELECT_COMMANDS
kSelectRemove	data/nptypes.h	/^	kSelectRemove,$/;"	e	enum:kNP_SELECT_COMMANDS
kSelectSiblings	data/nptypes.h	/^	kSelectSiblings,$/;"	e	enum:kNP_SELECT_COMMANDS
kShadingCount	data/nptypes.h	/^	kShadingCount$/;"	e	enum:kNP_SHADER_TYPE
kShadingFlat	data/nptypes.h	/^	kShadingFlat,$/;"	e	enum:kNP_SHADER_TYPE
kShadingGouraud	data/nptypes.h	/^	kShadingGouraud,$/;"	e	enum:kNP_SHADER_TYPE
kShadingNull	data/nptypes.h	/^	kShadingNull = 0,$/;"	e	enum:kNP_SHADER_TYPE
kShadingPhong	data/nptypes.h	/^	kShadingPhong,$/;"	e	enum:kNP_SHADER_TYPE
kShadingRaytrace	data/nptypes.h	/^	kShadingRaytrace,$/;"	e	enum:kNP_SHADER_TYPE
kShadingReflection	data/nptypes.h	/^	kShadingReflection,$/;"	e	enum:kNP_SHADER_TYPE
kShadingWire	data/nptypes.h	/^	kShadingWire,$/;"	e	enum:kNP_SHADER_TYPE
kSocketTypeUnspecified	data/nptypes.h	1318;"	d
kTorusScreenSizeCount	io/gl/npgeometry.c	31;"	d	file:
kTorusThicknessCount	io/gl/npgeometry.c	32;"	d	file:
kTracksDefaultUDPserverPort	data/nptypes.h	1317;"	d
kVideoFPS_119_88HZ	data/nptypes.h	/^	kVideoFPS_119_88HZ,$/;"	e	enum:kNP_VIDEO_HZ
kVideoFPS_120HZ	data/nptypes.h	/^	kVideoFPS_120HZ$/;"	e	enum:kNP_VIDEO_HZ
kVideoFPS_23_976HZ	data/nptypes.h	/^	kVideoFPS_23_976HZ,		\/\/!<Film on Video$/;"	e	enum:kNP_VIDEO_HZ
kVideoFPS_24HZ	data/nptypes.h	/^	kVideoFPS_24HZ,			\/\/!<Film$/;"	e	enum:kNP_VIDEO_HZ
kVideoFPS_25HZ	data/nptypes.h	/^	kVideoFPS_25HZ,			\/\/!<PAL$/;"	e	enum:kNP_VIDEO_HZ
kVideoFPS_29_97HZ	data/nptypes.h	/^	kVideoFPS_29_97HZ,		\/\/!<NTSC$/;"	e	enum:kNP_VIDEO_HZ
kVideoFPS_30HZ	data/nptypes.h	/^	kVideoFPS_30HZ,			$/;"	e	enum:kNP_VIDEO_HZ
kVideoFPS_59_94HZ	data/nptypes.h	/^	kVideoFPS_59_94HZ,		\/\/!<1080i, 60i, 60$/;"	e	enum:kNP_VIDEO_HZ
kVideoFPS_60HZ	data/nptypes.h	/^	kVideoFPS_60HZ,$/;"	e	enum:kNP_VIDEO_HZ
kVideoFPS_72HZ	data/nptypes.h	/^	kVideoFPS_72HZ,			\/\/!<experimental format$/;"	e	enum:kNP_VIDEO_HZ
kVideoFPS_Null	data/nptypes.h	/^	kVideoFPS_Null = 0,$/;"	e	enum:kNP_VIDEO_HZ
kVideoFieldEven	data/nptypes.h	/^	kVideoFieldEven$/;"	e	enum:kNP_VIDEO_INTERLACED
kVideoFieldNull	data/nptypes.h	/^	kVideoFieldNull = 0,$/;"	e	enum:kNP_VIDEO_INTERLACED
kVideoFieldOdd	data/nptypes.h	/^	kVideoFieldOdd,$/;"	e	enum:kNP_VIDEO_INTERLACED
kVideoFormat1080i	data/nptypes.h	/^	kVideoFormat1080i,$/;"	e	enum:kNP_VIDEO_FORMAT
kVideoFormat1080p	data/nptypes.h	/^	kVideoFormat1080p,$/;"	e	enum:kNP_VIDEO_FORMAT
kVideoFormat12k	data/nptypes.h	/^	kVideoFormat12k,$/;"	e	enum:kNP_VIDEO_FORMAT
kVideoFormat16k	data/nptypes.h	/^	kVideoFormat16k,$/;"	e	enum:kNP_VIDEO_FORMAT
kVideoFormat24k	data/nptypes.h	/^	kVideoFormat24k,$/;"	e	enum:kNP_VIDEO_FORMAT
kVideoFormat2K	data/nptypes.h	/^	kVideoFormat2K,$/;"	e	enum:kNP_VIDEO_FORMAT
kVideoFormat32k	data/nptypes.h	/^	kVideoFormat32k,$/;"	e	enum:kNP_VIDEO_FORMAT
kVideoFormat48k	data/nptypes.h	/^	kVideoFormat48k,$/;"	e	enum:kNP_VIDEO_FORMAT
kVideoFormat4k	data/nptypes.h	/^	kVideoFormat4k,$/;"	e	enum:kNP_VIDEO_FORMAT
kVideoFormat64k	data/nptypes.h	/^	kVideoFormat64k$/;"	e	enum:kNP_VIDEO_FORMAT
kVideoFormat720p	data/nptypes.h	/^	kVideoFormat720p,$/;"	e	enum:kNP_VIDEO_FORMAT
kVideoFormat8k	data/nptypes.h	/^	kVideoFormat8k,$/;"	e	enum:kNP_VIDEO_FORMAT
kVideoFormatNTSC	data/nptypes.h	/^	kVideoFormatNTSC,$/;"	e	enum:kNP_VIDEO_FORMAT
kVideoFormatNull	data/nptypes.h	/^	kVideoFormatNull = 0,$/;"	e	enum:kNP_VIDEO_FORMAT
kVideoFormatPAL	data/nptypes.h	/^	kVideoFormatPAL,$/;"	e	enum:kNP_VIDEO_FORMAT
kVideoStereoLeft	data/nptypes.h	/^	kVideoStereoLeft,$/;"	e	enum:kNP_VIDEO_STEREO_3D
kVideoStereoNull	data/nptypes.h	/^	kVideoStereoNull,$/;"	e	enum:kNP_VIDEO_STEREO_3D
kVideoStereoRight	data/nptypes.h	/^	kVideoStereoRight,$/;"	e	enum:kNP_VIDEO_STEREO_3D
kVideoStereoSequential	data/nptypes.h	/^	kVideoStereoSequential$/;"	e	enum:kNP_VIDEO_STEREO_3D
key	data/nptypes.h	/^	NPkey		key;$/;"	m	struct:NPio
last	io/db/npauxdb.h	/^	struct queue_node *last;$/;"	m	struct:queue	typeref:struct:queue::queue_node
lastReceivedEndpoint	io/net/nposcpack.cpp	/^static IpEndpointName lastReceivedEndpoint[ MAX_OSC_LISTENERS ];$/;"	v	file:
level	data/nptypes.h	/^	int			level;$/;"	m	struct:NPconsole
line	data/nptypes.h	/^	char		line[kNPconsoleLineMax][kNPconsoleCharPerLine + 1];$/;"	m	struct:NPconsole
lineColor	data/nptypes.h	/^	NPubyteRGBA lineColor;		\/\/!<box outline$/;"	m	struct:NPtag
lineCount	data/nptypes.h	/^	int			lineCount;$/;"	m	struct:NPconsole
lineData	io/net/nposcpack.cpp	/^	char lineData[LINE_BUFFER_SIZE];$/;"	m	class:LineList	file:
lineIndex	data/nptypes.h	/^	int			lineIndex;					\/\/!<the currently displayed line$/;"	m	struct:NPconsole
lineMax	data/nptypes.h	/^	int			lineMax;					\/\/!<default is 40 lines$/;"	m	struct:NPconsole
lineWidth	data/nptypes.h	/^	float		lineWidth;					\/\/!<draws lines, zero for off$/;"	m	struct:NPconsole
lineWidth	data/nptypes.h	/^	float		lineWidth;					\/\/!<draws lines, zero for off$/;"	m	struct:NPnode
lineWidth	data/nptypes.h	/^	float		lineWidth;		\/\/!<1 line title only, 3 lines, max lines$/;"	m	struct:NPtag
lines	io/net/nposcpack.cpp	/^	char* lines[NUMBER_LINES];$/;"	m	class:LineList	file:
linkA	data/nptypes.h	/^	pNPnode		linkA;					\/\/!<used by link tool to store first pick$/;"	m	struct:NPmouse
linkFlag	data/nptypes.h	/^	bool		linkFlag;					\/\/!<for establishing link nodes$/;"	m	struct:NPnode
linkQue	data/nptypes.h	/^	pNPnode		linkQue[kNPnodeMax];	\/\/!<zz debug move this to data->map$/;"	m	struct:NPgl
linkQueCount	data/nptypes.h	/^	int			linkQueCount;$/;"	m	struct:NPgl
list	data/nptypes.h	/^	NPoscItem	list[kNPoscListMax];			\/\/!<list of que items or commands$/;"	m	struct:NPosc
list	data/nptypes.h	/^	NPque**		list;			\/\/!<list of que items or commands$/;"	m	struct:NPqueList
list	data/nptypes.h	/^	NPqueItem**	list;			\/\/!<list of que items or commands$/;"	m	struct:NPque
list	data/nptypes.h	/^	char* list[kNPdbMax];		\/\/!<list of items by name$/;"	m	struct:NPmenu
list	data/nptypes.h	/^	char** list;		\/\/!< list of databases by name$/;"	m	struct:NPdatabases
list	data/nptypes.h	/^	pNPmapItemNodeID*	list;	\/\/\/< list of items that pair ID to node Ptr$/;"	m	struct:NPmapNodeID
list	data/nptypes.h	/^	void**		list;$/;"	m	struct:NPtags
list	data/nptypes.h	/^	void**	list;$/;"	m	struct:NPnodeList
list	data/nptypes.h	/^	void**	list;$/;"	m	struct:NPrecordSet
listenerPorts	io/net/nposcpack.cpp	/^static int listenerPorts[ MAX_OSC_LISTENERS ];$/;"	v	file:
listenerSockets	io/net/nposcpack.cpp	/^static void* listenerSockets[ MAX_OSC_LISTENERS ];$/;"	v	file:
listeners	io/net/nposcpack.cpp	/^static void* listeners[ MAX_OSC_LISTENERS ];$/;"	v	file:
loadUpdate	data/nptypes.h	/^	bool			loadUpdate;			\/\/\/< flag a single update this cycle$/;"	m	struct:NPdbs
loadUpdateRate	data/nptypes.h	/^	float			loadUpdateRate;		\/\/\/< auto load update rate, 0 is off$/;"	m	struct:NPdbs
loadUpdateRate	data/nptypes.h	/^	float		loadUpdateRate;			\/\/\/< auto load update rate, 0 is off$/;"	m	struct:NPdatabase
loading	data/nptypes.h	/^	int			loading;				\/\/!<used to signal processes to pause$/;"	m	struct:NPfile
logMode	data/nptypes.h	/^	int			logMode;		\/\/!<0 = none, 1 = err only, 2 = all$/;"	m	struct:NPosc
loopAtEndOfTrack	io/npch.c	/^bool loopAtEndOfTrack = true;	\/\/zz,  move to data->io.ch$/;"	v
main	main.cpp	/^int main (int argc, char **argv)$/;"	f
map	data/nptypes.h	/^	NPmap	map;		\/\/!< Model   - map$/;"	m	struct:Data
map	data/nptypes.h	/^	int		map[kNPkeyEventTypeSize][kNPkeyMapSize];	\/\/!<key command map$/;"	m	struct:NPkey
mapID	data/nptypes.h	/^	pNPmapID	mapID;		\/\/\/< maps the row id to local data ptr$/;"	m	struct:NPdbTable
mapPath	data/nptypes.h	/^	char		mapPath[kNPmaxPath];$/;"	m	struct:NPfile
mapPathA	data/nptypes.h	/^	char	mapPathA[kNPelementMax];	\/\/!<mapPtr = npGetMapID(mapID); \/\/!<and vice versa$/;"	m	struct:NPmapPair
mapPathA	data/nptypes.h	/^	char	mapPathA[kNPnameMax];		\/\/!<db table path or RAM ptr by name$/;"	m	struct:NPmapLink
mapPathB	data/nptypes.h	/^	char	mapPathB[kNPnameMax];		\/\/!<db table path or RAM ptr by name  \/\/!<formatID by name, 'osc_mrmr'$/;"	m	struct:NPmapPair
mapPathB	data/nptypes.h	/^	char	mapPathB[kNPnameMax];		\/\/!<formatID by name, 'osc_mrmr'$/;"	m	struct:NPmapLink
mapPtr	data/nptypes.h	/^	void*	mapPtr;	 \/\/!<element ptr		\/\/!<pointer to an element of the C data map structure	$/;"	m	struct:NPmapLink
mapPtr	data/nptypes.h	/^	void*	mapPtr;$/;"	m	struct:NPqueItem
mapPtrA	data/nptypes.h	/^	void*	mapPtrA;		\/\/!<pointer to internal map element c-struct$/;"	m	struct:NPmapPair
mapTypeCount	data/nptypes.h	/^	int			mapTypeCount;$/;"	m	struct:NPmap
mapTypeList	data/nptypes.h	/^	pNPmapType	mapTypeList;$/;"	m	struct:NPmap
matrix	data/nptypes.h	/^	float		matrix[16];					\/\/!<for local to world coord convert$/;"	m	struct:NPcamera
max	data/nptypes.h	/^	int			max;			\/\/!<max size of que$/;"	m	struct:NPque
max	data/nptypes.h	/^	int			max;			\/\/!<max size of que$/;"	m	struct:NPqueList
max	data/nptypes.h	/^	int			max;		\/\/!<max size of que$/;"	m	struct:NPosc
maximumExpectedIncomingFloatValue	io/net/nposcpack.cpp	/^	float maximumExpectedIncomingFloatValue[10];$/;"	m	class:OscTrackPacketListener	file:
menu	data/nptypes.h	/^	pNPmenu		menu;						\/\/!<menu list, menubar$/;"	m	struct:NPconsole
menuStruct	data/nptypes.h	/^	NPmenu		menuStruct;					\/\/zzd r$/;"	m	struct:NPconsole
message	data/nptypes.h	/^	NPmessage	message;$/;"	m	struct:NPio
minimumExpectedIncomingFloatValue	io/net/nposcpack.cpp	/^	float minimumExpectedIncomingFloatValue[10];            \/\/ if it's a float, the minimum and maximum expected values$/;"	m	class:OscTrackPacketListener	file:
modAlphaUpper	data/nptypes.h	/^	bool	modAlphaUpper;		\/\/!<combined shift and caps lock result$/;"	m	struct:NPkey
modAlt	data/nptypes.h	/^	bool	modAlt;$/;"	m	struct:NPkey
modAltLeft	data/nptypes.h	/^	bool	modAltLeft;$/;"	m	struct:NPkey
modAltRight	data/nptypes.h	/^	bool	modAltRight;$/;"	m	struct:NPkey
modCapsLock	data/nptypes.h	/^	bool	modCapsLock;		\/\/!<true when light on,		\/\/!<zz debug currently not testing the capslock state$/;"	m	struct:NPkey
modCommand	data/nptypes.h	/^	bool	modCommand;			\/\/!<only on OSX$/;"	m	struct:NPkey
modCommandLeft	data/nptypes.h	/^	bool	modCommandLeft;$/;"	m	struct:NPkey
modCommandRight	data/nptypes.h	/^	bool	modCommandRight;$/;"	m	struct:NPkey
modCtrl	data/nptypes.h	/^	bool	modCtrl;$/;"	m	struct:NPkey
modCtrlLeft	data/nptypes.h	/^	bool	modCtrlLeft;$/;"	m	struct:NPkey
modCtrlRight	data/nptypes.h	/^	bool	modCtrlRight;$/;"	m	struct:NPkey
modShift	data/nptypes.h	/^	bool	modShift;			\/\/!<combined event state$/;"	m	struct:NPkey
modShiftLeft	data/nptypes.h	/^	bool	modShiftLeft;		\/\/!<raw key states$/;"	m	struct:NPkey
modShiftRight	data/nptypes.h	/^	bool	modShiftRight;$/;"	m	struct:NPkey
mode	data/nptypes.h	/^	int			mode;						\/\/!<1 line, 3 lines, max lines$/;"	m	struct:NPconsole
mode	data/nptypes.h	/^	int			mode;			\/\/!<2D, 3D billboard, fixed in model space$/;"	m	struct:NPtag
mode	data/nptypes.h	/^	int mode;					\/\/!<orbitXY, fly, translate... set by button state$/;"	m	struct:NPtool
mouse	data/nptypes.h	/^	NPmouse		mouse;$/;"	m	struct:NPio
msgMode	data/nptypes.h	/^	int			msgMode;		\/\/!<0 = quiet, 1 = system, 2 = GUI$/;"	m	struct:NPosc
multiPartition	data/nptypes.h	/^	int multiPartition;		\/\/!<multi-partition NUMA HPC systems, 16384+ sockets$/;"	m	struct:NPcpu
multiRAM	data/nptypes.h	/^	long long multiRAM;		\/\/!<total RAM across all NUMA partitions$/;"	m	struct:NPcpu
name	data/nptypes.h	/^	char		name[64];			\/\/!<author, city, population...$/;"	m	struct:NPlabel
name	data/nptypes.h	/^	char		name[kNPdbNameMax +1];	\/\/\/< database name +1 for '\\0'$/;"	m	struct:NPdatabase
name	data/nptypes.h	/^	char		name[kNPdbNameMax];		\/\/\/< function UI name$/;"	m	struct:NPdbFunction
name	data/nptypes.h	/^	char		name[kNPtagTitleMax];			\/\/!<name used for window title$/;"	m	struct:NPgl
name	data/nptypes.h	/^	char	name[kNPnameMax];$/;"	m	struct:NPmapLink
name	data/nptypes.h	/^	char name[256];$/;"	m	struct:NPuser
name	data/nptypes.h	/^	char*		name;		\/\/\/< field name$/;"	m	struct:NPdbFields
name	data/nptypes.h	/^	char*	name;$/;"	m	struct:NPmapType
name	data/nptypes.h	/^	char* name;$/;"	m	struct:NPmenu
name	io/npkey.c	/^	char*	name;$/;"	m	struct:NPkeyMap	file:
newChunkObj	io/db/npdbz.h	/^struct newChunkObj {$/;"	s
newChunksObj	io/db/npdbz.h	/^struct newChunksObj {$/;"	s
next	data/nptypes.h	/^	pNPnode		next;						\/\/!<next sibling node in linked list, N$/;"	m	struct:NPnode
next	data/nptypes.h	/^	void*			next;		\/\/\/< next sibling, the last sibling is null.$/;"	m	struct:NPnode2
next	io/db/npauxdb.h	/^	struct fieldvalue *next;$/;"	m	struct:fieldvalue	typeref:struct:fieldvalue::fieldvalue
next	io/db/npauxdb.h	/^	struct queue_node *next;$/;"	m	struct:queue_node	typeref:struct:queue_node::queue_node
nextAvailableListenerIdx	io/net/nposcpack.cpp	/^static int nextAvailableListenerIdx = 0;$/;"	v	file:
nextAvailableSenderIdx	io/net/nposcpack.cpp	/^static int nextAvailableSenderIdx = 0;$/;"	v	file:
nextID	data/nptypes.h	/^	int		nextID;		\/\/\/< index used for accelerated search of ordered list$/;"	m	struct:NPmapID
nextReadLineIdx	io/net/nposcpack.cpp	/^	int nextReadLineIdx;$/;"	m	class:LineList	file:
nextWriteBufferIdx	io/net/nposcpack.cpp	/^	int nextWriteBufferIdx;$/;"	m	class:LineList	file:
nextWriteLineIdx	io/net/nposcpack.cpp	/^	int nextWriteLineIdx;$/;"	m	class:LineList	file:
node	data/nptypes.h	/^	pNPnode			node;	\/\/\/< pointer to the scene (node) THIS id references.$/;"	m	struct:NPmapItemNodeID
node	data/nptypes.h	/^	void**		node;					\/\/!<root node array, uses kNPnodeRootMax$/;"	m	struct:NPmap
nodeCount	data/nptypes.h	/^	int			nodeCount;				\/\/!<total for root and children nodes$/;"	m	struct:NPmap
nodeCount	data/nptypes.h	/^	int			nodeCount;				\/\/\/< if exists, node table row count$/;"	m	struct:NPdatabase
nodeField	data/nptypes.h	/^	NPintXYZS	nodeField;			\/\/!<which node parameter to display$/;"	m	struct:NPlabel
nodeID	data/nptypes.h	/^	int*	nodeID;		\/\/\/< matching list of local scene node id's$/;"	m	struct:NPmapID
nodeID	data/nptypes.h	/^	void**		nodeID;					\/\/!<maps nodeID to pNPnode, kNPnodeMax$/;"	m	struct:NPmap
nodePropertyMemoryLocations	data/nptypes.h	/^	void*		nodePropertyMemoryLocations[kNPmaxFloatProperties];		\/\/!< memory address of each node property fed from track data$/;"	m	struct:NPnodePropertyTracks
nodePropertyMemoryNextLocation	data/nptypes.h	/^	void**		nodePropertyMemoryNextLocation;							\/\/!< next available location for a float property memory address$/;"	m	struct:NPnodePropertyTracks
nodeRootCount	data/nptypes.h	/^	int			nodeRootCount;			\/\/!<number of root nodes$/;"	m	struct:NPmap
nodeRootIndex	data/nptypes.h	/^	int			nodeRootIndex;			\/\/!<the active node root$/;"	m	struct:NPmap
normal	data/nptypes.h	/^	int			normal;$/;"	m	struct:NPgl
normalArray	data/nptypes.h	/^	float		*normalArray;				\/\/!<the array of normals$/;"	m	struct:NPgis
normalArray	data/nptypes.h	/^	float		*normalArray;				\/\/!<the array of normals$/;"	m	struct:NPsurface
normalCount	data/nptypes.h	/^	int			normalCount;				\/\/!<$/;"	m	struct:NPgis
normalCount	data/nptypes.h	/^	int			normalCount;				\/\/!<$/;"	m	struct:NPsurface
note	io/npkey.c	/^	char*	note;$/;"	m	struct:NPkeyMap	file:
npActivateDataLoadThread	io/npch.c	/^void npActivateDataLoadThread( void* dataRef )$/;"	f
npAddDb	io/db/npdbz.c	/^int npAddDb(struct databases *dbs, char* dbType, char* hostIP, char* user, char* pass, char* dbName, void* dataRef)$/;"	f
npAddTag	io/gl/nptags.c	/^void npAddTag (pNPtag tag, void* dataRef)$/;"	f
npAddTagToDraw	io/gl/npgldraw.c	/^void npAddTagToDraw (pNPnode node, void* dataRef)$/;"	f
npAppLoop	npctrl.c	/^int npAppLoop (void* dataRef)$/;"	f
npAppLoopGlut	io/npglut.c	/^void npAppLoopGlut (void* dataRef)$/;"	f
npAttachDbsToDataRef	io/db/npdbz.c	/^int npAttachDbsToDataRef(struct databases *dbs, void* dataRef)$/;"	f
npBeginOscPackMessage	io/net/nposcpack.cpp	/^void npBeginOscPackMessage( pNPoscPackSender oscSender, char* address )$/;"	f
npCSVDialog	io/file/npcsv.c	/^FILE* npCSVDialog (const char* fileName, int dialogType, void* dataRef)$/;"	f
npCSVGetAttrib	io/file/npcsv.c	/^void npCSVGetAttrib (int size, void* dataRef)$/;"	f
npCSVSetAttrib	io/file/npcsv.c	/^void npCSVSetAttrib (int size, void* dataRef)$/;"	f
npCSVstrncpy	data/npmapfile.c	/^int npCSVstrncpy(char* cstrout, char** csvstr, int size)$/;"	f
npCSVtoC	data/npmapfile.c	/^int npCSVtoC (pNPrecordSet recSet, const char* read, int size, void* dataRef)$/;"	f
npCSVtoMap	io/file/npcsv.c	/^void npCSVtoMap (FILE* file, int type, void*dataRef)$/;"	f
npCSVtoStr	data/npstr.c	/^void npCSVtoStr (char** str, const char* csv, int type, int size, void* dataRef)$/;"	f
npCSVtoTag	data/npmapfile.c	/^pNPrecordTag npCSVtoTag (char** read, int size, int* scanNumRet, void* dataRef)$/;"	f
npCalloc	data/npmap.c	/^void* npCalloc(int type, int size, void* dataRef)$/;"	f
npCameraTranslate	ctrl/npengine.c	/^void npCameraTranslate (void* nodeRef, void* dataRef )$/;"	f
npChCloseInputStream	io/npch.c	/^void npChCloseInputStream (int needToFigureOut, void* dataRef)$/;"	f
npChCloseOutStream	io/npch.c	/^void npChCloseOutStream (int needToFigureOut, void* dataRef)$/;"	f
npChDataExport	io/npch.c	/^void npChDataExport (char* buffer, int *size, void* dataRef)$/;"	f
npChDataImport	io/npch.c	/^void npChDataImport (char* buffer, int size, void* dataRef)	\/\/antzch0001.csv$/;"	f
npChGetChannelAfter	io/npch.c	/^int npChGetChannelAfter(pNPch ch, int channelNumber) $/;"	f
npChGetChannelBefore	io/npch.c	/^int npChGetChannelBefore(pNPch ch, int channelNumber) $/;"	f
npChGetMaxChannel	io/npch.c	/^int npChGetMaxChannel (pNPch ch)$/;"	f
npChGetMinChannel	io/npch.c	/^int npChGetMinChannel (pNPch ch)$/;"	f
npChHasValidDataSource	io/npch.c	/^bool npChHasValidDataSource( pNPtrackDataSource trackDataSource )$/;"	f
npChMapAttributeAdd	io/npch.c	/^void npChMapAttributeAdd (int channel, int attribute, int track, void* dataRef)$/;"	f
npChMapAttributeDelete	io/npch.c	/^void npChMapAttributeDelete (int channel, int attribute, void* dataRef)$/;"	f
npChMapExport	io/npch.c	/^void npChMapExport (char* buffer, int *size, void* dataRef)$/;"	f
npChMapImport	io/npch.c	/^void npChMapImport (char* buffer, int size, void* dataRef)$/;"	f
npChMapTokens	io/npch.c	/^char** npChMapTokens (pNPch ch, void* dataRef)$/;"	f
npChOpenInputStream	io/npch.c	/^void npChOpenInputStream (int needToFigureOut, void* dataRef)$/;"	f
npChOpenOutputStream	io/npch.c	/^void npChOpenOutputStream (int needToFigureOut, void* dataRef)$/;"	f
npChReadLine	io/npch.c	/^void* npChReadLine( char* bufferStart, int maxLength, pNPtrackDataSource trackDataSource, bool channelRead, void* dataRef )$/;"	f
npChReadLineFromFile	io/npch.c	/^void* npChReadLineFromFile(char* bufferStart, int maxLength, pNPtrackDataSource trackDataSource, bool channelRead)$/;"	f
npChReadTokens	io/npch.c	/^char** npChReadTokens (pNPch ch, bool isChannelRead, void* dataRef)$/;"	f
npChReadTrackTokens	io/npch.c	/^char** npChReadTrackTokens (pNPch ch, void* dataRef)$/;"	f
npChRemoveMemoryReferences	io/npch.c	/^void npChRemoveMemoryReferences (pNPnodePropertyTracks propertyTracks, void* boundaryStart, void* boundaryEnd)$/;"	f
npChRemoveNode	io/npch.c	/^void npChRemoveNode (pNPnode node, void* dataRef)$/;"	f
npChSaveTrackData	io/npch.c	/^bool npChSaveTrackData(int numberTracks, int offset, float** trackData, unsigned char** trackUcharData, int** trackIntData, char** buffer)$/;"	f
npChSetBuildPath	io/npfile.c	/^void npChSetBuildPath(char* path, char* csvPath, char* filePrefix, $/;"	f
npChSubscribeNode	io/npch.c	/^void npChSubscribeNode (pNPnode node, void* dataRef)$/;"	f
npChTrackTokens	io/npch.c	/^char** npChTrackTokens (pNPch ch, void* dataRef)$/;"	f
npCircularBufferLoadLoop	io/npch.c	/^void npCircularBufferLoadLoop (void* dataRef)$/;"	f
npClearLinkQue	io/gl/npgldraw.c	/^void npClearLinkQue (void* dataRef)$/;"	f
npCloseAuxDB	io/db/npauxdb.c	/^void npCloseAuxDB (void* dataRef)		\/\/clean-up$/;"	f
npCloseCSV	io/file/npcsv.c	/^void npCloseCSV (void* dataRef)$/;"	f
npCloseCh	io/npch.c	/^void npCloseCh (void* dataRef)		\/\/clean-up$/;"	f
npCloseCmd	ctrl/npcmd.c	/^void npCloseCmd (void* dataRef)$/;"	f
npCloseConsole	io/npconsole.c	/^void npCloseConsole (void* dataRef)$/;"	f
npCloseCtrl	npctrl.c	/^void npCloseCtrl (void* dataRef)$/;"	f
npCloseDB	io/db/npdb.c	/^void npCloseDB (void* dataRef)		\/\/clean-up$/;"	f
npCloseDOT	io/file/npdot.c	/^void npCloseDOT (void* dataRef)$/;"	f
npCloseData	npdata.c	/^void npCloseData( void* dataRef )$/;"	f
npCloseDataSource	io/npch.c	/^void npCloseDataSource( pNPtrackDataSource trackDataSource, void* dataRef )$/;"	f
npCloseEngine	ctrl/npengine.c	/^void npCloseEngine (void* dataRef)$/;"	f
npCloseFile	io/npfile.c	/^void npCloseFile (void* dataRef)$/;"	f
npCloseFileCSV	io/file/npcsv.c	/^void npCloseFileCSV (int size, void* dataRef)$/;"	f
npCloseFileMapFile	data/npmapfile.c	/^void npCloseFileMapFile (int size, void* dataRef)$/;"	f
npCloseGDAL	io/file/npgdal.c	/^void npCloseGDAL (void* dataRef)$/;"	f
npCloseGL	io/npgl.c	/^void npCloseGL (void* dataRef) $/;"	f
npCloseGLPrimitive	io/gl/npgeometry.c	/^void npCloseGLPrimitive (void* dataRef)$/;"	f
npCloseGlut	io/npglut.c	/^void npCloseGlut (void* dataRef)$/;"	f
npCloseHadoop	io/db/nphadoop.c	/^void npCloseHadoop (void* dataRef)$/;"	f
npCloseIO	npio.c	/^void npCloseIO (void* dataRef)$/;"	f
npCloseJSON	io/file/npjson.c	/^void npCloseJSON (void* dataRef)$/;"	f
npCloseKML	io/file/npkml.c	/^void npCloseKML (void* dataRef)$/;"	f
npCloseKey	io/npkey.c	/^void npCloseKey (void* dataRef)$/;"	f
npCloseMalloc	data/npmap.c	/^void npCloseMalloc(void* dataRef)$/;"	f
npCloseMapFile	data/npmapfile.c	/^void npCloseMapFile (void* dataRef)$/;"	f
npCloseMongoDB	io/db/npmongo.c	/^void npCloseMongoDB (void* dataRef)$/;"	f
npCloseMouse	io/npmouse.c	/^void npCloseMouse (void* dataRef)$/;"	f
npCloseMySQL	io/db/npmysql.c	/^void npCloseMySQL (void* dataRef)$/;"	f
npCloseNode	data/npnode.c	/^void npCloseNode(void* dataRef)$/;"	f
npCloseOBJ	io/file/npobj.c	/^void npCloseOBJ (void* dataRef)$/;"	f
npCloseOFX	ofxantz.cpp	/^void npCloseOFX (void* dataRef)$/;"	f
npClosePlugin	io/plugin/npplugin.c	/^void npClosePlugin (void* dataRef)		\/\/clean-up$/;"	f
npClosePostgreSQL	io/db/npostgresql.c	/^void npClosePostgreSQL (void* dataRef)$/;"	f
npCloseSQLite	io/db/npsqlite.c	/^void npCloseSQLite (void* dataRef)$/;"	f
npCloseTags	io/gl/nptags.c	/^void npCloseTags (void* dataRef)		\/\/clean-up$/;"	f
npCloseTest	ctrl/nptest.c	/^void npCloseTest (void* dataRef)$/;"	f
npCloseTexMap	io/gl/nptexmap.c	/^void npCloseTexMap (void* dataRef)		\/\/clean-up$/;"	f
npCloseVideo	io/video/npvideo.c	/^void npCloseVideo (void* dataRef)$/;"	f
npCloseXML	io/file/npxml.c	/^void npCloseXML (void* dataRef)$/;"	f
npCmdFuncNew	data/npmap.c	/^int npCmdFuncNew( void* funcPtr, pNPfuncDesc descriptor, void* dataRef )$/;"	f
npCmdOpen	npctrl.c	/^void npCmdOpen( char* filePath, void* dataRef)$/;"	f
npCmdQue	data/npmap.c	/^void npCmdQue( void* funcPtr, void* funcData, int type, void* dataRef )$/;"	f
npColorPicker	io/gl/npcolor.c	/^NPfloatRGBA npColorPicker( float x, float y, float z, int type, void* dataRef)$/;"	f
npColorPicker6DOE	io/gl/npcolor.c	/^NPfloatRGBA npColorPicker6DOE ( float x, float y, float z,$/;"	f
npCompareNodes	io/gl/nptags.c	/^int npCompareNodes (const void* a, const void* b)$/;"	f
npCompareTags	io/gl/nptags.c	/^int npCompareTags (const void* a, const void* b)$/;"	f
npConnectDB	io/db/npdbz.c	/^int npConnectDB (void* dataRef)$/;"	f
npConnectToDatabaseServer	io/db/npdbz.c	/^int npConnectToDatabaseServer(struct dbNewConnect *connect, void* dataRef)$/;"	f
npConsole	io/npconsole.c	/^void npConsole (void* dataRef)$/;"	f
npConsoleCLS	io/npconsole.c	/^void npConsoleCLS (pNPconsole console, void* dataRef)$/;"	f
npConsoleCmd	io/npconsole.c	/^void npConsoleCmd( pNPconsole console, void* dataRef )$/;"	f
npConsoleCmdText	io/npconsole.c	/^void npConsoleCmdText( pNPconsole console, void* dataRef )$/;"	f
npConsoleExit	io/npconsole.c	/^void npConsoleExit( pNPconsole console, void* dataRef )$/;"	f
npConsoleKeyEvent	io/npconsole.c	/^void npConsoleKeyEvent (int key, int keyEventType, void* dataRef)$/;"	f
npConsoleMenu	io/npconsole.c	/^void npConsoleMenu (void (*pMenuCallback)(int menuItem, void* dataRef),$/;"	f
npConsoleMenuText	io/npconsole.c	/^void npConsoleMenuText( pNPconsole console, void* dataRef )$/;"	f
npConsolePrompt	io/npconsole.c	/^void npConsolePrompt(pNPconsole console, void* dataRef)$/;"	f
npConsolePromptBlank	io/npconsole.c	/^void npConsolePromptBlank( pNPconsole console, void* dataRef )$/;"	f
npConsolePromptInputStr	io/npconsole.c	/^void npConsolePromptInputStr( pNPconsole console, void* dataRef )$/;"	f
npCopyGPUtoCPU	io/npgl.c	/^void npCopyGPUtoCPU (void* dataRef)$/;"	f
npCopyMatrix	data/npmath.c	/^void npCopyMatrix (float dest[], float src[])$/;"	f
npCreateDatabase2	io/db/npdbz.c	/^int npCreateDatabase2(int dbID, struct dbFunction *db, char* dbName)$/;"	f
npCreateOscPackBundle	io/net/nposcpack.cpp	/^void npCreateOscPackBundle( pNPoscPackSender oscSender )$/;"	f
npCreatePrimitiveDL	io/gl/npgeometry.c	/^GLuint npCreatePrimitiveDL(void)$/;"	f
npCreateTable2	io/db/npdbz.c	/^int npCreateTable2(struct dbFunction *db, int dbID, char* table, char* fields)$/;"	f
npCtrlChannel	npctrl.c	/^void npCtrlChannel (int command, pNPnode node, void* dataRef)$/;"	f
npCtrlCommand	npctrl.c	/^void npCtrlCommand (int command, void* dataRef)$/;"	f
npCtrlCommandSet	npctrl.c	/^void npCtrlCommandSet (int command, void* nodeRef, void* dataRef)$/;"	f
npCtrlFile	npctrl.c	/^void npCtrlFile (int command, void* dataRef)$/;"	f
npCtrlGlobal	npctrl.c	/^void npCtrlGlobal (int command, void* dataRef)$/;"	f
npCtrlProperty	npctrl.c	/^void npCtrlProperty (int command, void* dataRef)$/;"	f
npCtrlSelect	npctrl.c	/^void npCtrlSelect (int command, void* dataRef)$/;"	f
npCtrlVector	npctrl.c	/^void npCtrlVector (int command, void* dataRef)$/;"	f
npDataCameraPreset	npdata.c	/^void npDataCameraPreset (int preset, pNPnode node, void* dataRef)$/;"	f
npDataPreset	npdata.c	/^void npDataPreset (int preset, void* dataRef)$/;"	f
npDelDir	io/npfile.c	/^void npDelDir ( char* pathName, void* dataRef)$/;"	f
npDeleteAllTags	io/gl/nptags.c	/^void npDeleteAllTags (void* dataRef)$/;"	f
npDeleteChannel	io/npch.c	/^void npDeleteChannel (int channel, void* dataRef)$/;"	f
npDeleteTag	io/gl/nptags.c	/^void npDeleteTag (int recordID, int tableID, void* dataRef)$/;"	f
npDialogMapFile	data/npmapfile.c	/^FILE* npDialogMapFile (const char* fileName, int dialogType, void* dataRef)$/;"	f
npDispatchMessages	npctrl.c	/^void npDispatchMessages (void* dataRef)$/;"	f
npDistance	io/gl/npgldraw.c	/^float npDistance( NPfloatXYZ vecA, NPfloatXYZ vecB )$/;"	f
npDrawCompass	io/gl/npgldraw.c	/^void npDrawCompass (void* dataRef)$/;"	f
npDrawConsole	io/gl/npgldraw.c	/^void npDrawConsole (void* dataRef)$/;"	f
npDrawFPS	io/gl/npgldraw.c	/^void npDrawFPS (void* dataRef)$/;"	f
npDrawHUD	io/gl/npgldraw.c	/^void npDrawHUD (void* dataRef)$/;"	f
npDrawNodeTags	io/gl/nptags.c	/^void npDrawNodeTags (void* dataRef)$/;"	f
npDrawNodeTextTag	io/gl/nptags.c	/^void npDrawNodeTextTag (pNPnode node, void* dataRef)$/;"	f
npDrawNodes	io/gl/npgldraw.c	/^void npDrawNodes (void* dataRef)$/;"	f
npDrawSelect	io/gl/npgldraw.c	/^void npDrawSelect (void* dataRef)$/;"	f
npDrawSort	io/gl/npgldraw.c	/^void npDrawSort(void** sort, int count, void* dataRef)						\/\/zzhp$/;"	f
npDrawSortThread	io/gl/npgldraw.c	/^void npDrawSortThread(void* dataRef)										 \/\/zzhp$/;"	f
npDrawTextTag	io/gl/nptags.c	/^void npDrawTextTag (pNPtag tag, void* dataRef)$/;"	f
npDrawTorus	io/gl/npgeometry.c	/^void npDrawTorus (int geometry, GLfloat innerRadius)$/;"	f
npDropDatabase	io/db/npdbz.c	/^int npDropDatabase(int dbID, struct dbFunction *db, const char* dbName, void* dataRef )$/;"	f
npDropTable	io/db/npdbz.c	/^int npDropTable(int dbID, struct dbFunction *db, char* table)$/;"	f
npEndOscPackMessage	io/net/nposcpack.cpp	/^void npEndOscPackMessage( pNPoscPackSender oscSender )$/;"	f
npEvenNewerAllChunk	io/db/npdbz.c	/^struct newChunksObj* npEvenNewerAllChunk(struct csvStrObjects *csvObjects, void* dataRef)$/;"	f
npExportCSV	io/file/npcsv.c	/^void npExportCSV (FILE* file, void* dataRef)$/;"	f
npExportMapFile	data/npmapfile.c	/^int npExportMapFile (FILE* file, int type, void* dataRef)$/;"	f
npExportTagsToCSV	io/gl/nptags.c	/^void npExportTagsToCSV (char* buffer, int* size, int* wordSize, void* dataRef)$/;"	f
npFileBrowser	io/npfile.c	/^void npFileBrowser( void* dataRef )$/;"	f
npFileClose	io/npfile.c	/^int npFileClose (FILE* file, void* dataRef)$/;"	f
npFileDialog	io/npfile.c	/^FILE* npFileDialog (const char* fileName, int dialogType, void* dataRef)$/;"	f
npFileExport	io/npfile.c	/^void npFileExport (int size, void* dataRef)$/;"	f
npFileFormat	data/npmapfile.c	/^int npFileFormat(char* buffer, int wordSize, int size)$/;"	f
npFileImport	io/npfile.c	/^void npFileImport (const char* fileName, void* dataRef)$/;"	f
npFileNew	io/npfile.c	/^FILE* npFileNew (const char* fileName, const char* mode, void* dataRef)$/;"	f
npFileOpen	io/npfile.c	/^FILE* npFileOpen( const char* fileName, const char* mode, void* dataRef )$/;"	f
npFileOpenAuto	data/npmapfile.c	/^int npFileOpenAuto (const char* filePath, FILE* file, void* dataRef)$/;"	f
npFileOpenChMap	io/npfile.c	/^void npFileOpenChMap (const char* filePath, void* dataRef)$/;"	f
npFileOpenChMeta	io/npfile.c	/^void npFileOpenChMeta (const char* filePath, void* dataRef)$/;"	f
npFileOpenChSet	io/npfile.c	/^void npFileOpenChSet (const char* filePath, void* dataRef)$/;"	f
npFileOpenChTracks	io/npfile.c	/^void npFileOpenChTracks (const char* filePath, void* dataRef)$/;"	f
npFileOpenMap	data/npmapfile.c	/^int npFileOpenMap (char* filePath, int wordSize, int size, void* dataRef)$/;"	f
npFileOpenMapAttrib	data/npmapfile.c	/^void npFileOpenMapAttrib (int attrib, void* dataRef)$/;"	f
npFileOpenThread	data/npmapfile.c	/^void npFileOpenThread (void* threadData)$/;"	f
npFileRead	io/npfile.c	/^int npFileRead (void* readBuffer, int elementSize, int elementCount, $/;"	f
npFileReadBlocks	data/npmapfile.c	/^int npFileReadBlocks (const char* filePath, char* buffer, void* dataRef)$/;"	f
npFileRewind	io/npfile.c	/^void npFileRewind (FILE* file)$/;"	f
npFileSaveMap	data/npmapfile.c	/^int npFileSaveMap (char* filePath, int wordSize, int size, void* dataRef)$/;"	f
npFileSaveTag	data/npmapfile.c	/^int npFileSaveTag (const char* filePath, int wordSize, int size, void* dataRef)$/;"	f
npFileSeek	io/npfile.c	/^int npFileSeek (FILE* file, long offSet, int origin)$/;"	f
npFileTell	io/npfile.c	/^long npFileTell (FILE* file)$/;"	f
npFileWrite	io/npfile.c	/^int npFileWrite (const void* str, int wordSize, int size, FILE* file, void* dataRef)$/;"	f
npFlagLink	io/gl/npgldraw.c	/^void npFlagLink (pNPnode node, void* dataRef)$/;"	f
npFree	data/npmap.c	/^void npFree(void* memory, void* dataRef)$/;"	f
npGLDrawScene	io/npgl.c	/^void npGLDrawScene (void* dataRef) $/;"	f
npGLLighting	io/npgl.c	/^void npGLLighting (void* dataRef)$/;"	f
npGLPrimitive	io/gl/npgeometry.c	/^void npGLPrimitive (int geometry, float ratio)$/;"	f
npGLResizeScene	io/npgl.c	/^void npGLResizeScene (int width, int height)							$/;"	f
npGLShading	io/npgl.c	/^void npGLShading (void* dataRef)$/;"	f
npGLSolidCone	io/npglut.c	/^void npGLSolidCone (GLdouble base, GLdouble height, GLint slices, GLint stacks)$/;"	f
npGLSolidSphere	io/npglut.c	/^void npGLSolidSphere (GLdouble radius, GLint slices, GLint stacks)$/;"	f
npGLSolidTorus	io/npglut.c	/^void npGLSolidTorus (GLdouble innerRadius, GLdouble outerRadius, $/;"	f
npGLSurface	io/gl/npgeometry.c	/^void npGLSurface (bool texture, pNPnode node, void* dataRef)$/;"	f
npGLTexture	io/gl/npgeometry.c	/^void npGLTexture (pNPnode node, void* dataRef)$/;"	f
npGLWireCone	io/npglut.c	/^void npGLWireCone (GLdouble base, GLdouble height, GLint slices, GLint stacks)$/;"	f
npGLWireSphere	io/npglut.c	/^void npGLWireSphere (GLdouble radius, GLint slices, GLint stacks)$/;"	f
npGLWireTorus	io/npglut.c	/^void npGLWireTorus (GLdouble innerRadius, GLdouble outerRadius, $/;"	f
npGeneralAddObjectsToChunks	io/db/npdbz.c	/^struct newChunksObj* npGeneralAddObjectsToChunks(struct newChunksObj* chunks, struct csvStrObjects* strObjects, void* dataRef)$/;"	f
npGetActiveCam	data/npnode.c	/^pNPnode npGetActiveCam (void* dataRef)$/;"	f
npGetCWD	io/npfile.c	/^void npGetCWD (char* buffer, int* size)					$/;"	f
npGetConsoleMenuName	io/npconsole.c	/^char* npGetConsoleMenuName( pNPconsole console, char* input, void* dataRef )$/;"	f
npGetDataRef	npdata.c	/^void* npGetDataRef()$/;"	f
npGetDataTypeDesc	npdata.c	/^char* npGetDataTypeDesc (int type)$/;"	f
npGetDataTypeName	npdata.c	/^char* npGetDataTypeName (int type)$/;"	f
npGetFileAttrib	io/npfile.c	/^int npGetFileAttrib ( char* pathName, int attrib, void* dataRef)$/;"	f
npGetFileFormat	data/npmapfile.c	/^int npGetFileFormat(const char* buffer, void* dataRef)$/;"	f
npGetFileRef	io/npfile.c	/^FILE* npGetFileRef (int index)$/;"	f
npGetFileType	data/npmapfile.c	/^int npGetFileType(const char* filePath, void* dataRef)$/;"	f
npGetFormat	io/file/npcsv.c	/^int npGetFormat( const char* file, const char* curs, int size, void* dataRef )$/;"	f
npGetMap	io/npfile.c	/^void npGetMap (int mapType, int format, void* dataRef)$/;"	f
npGetMapFileAttrib	data/npmapfile.c	/^int npGetMapFileAttrib (int attrib, void* dataRef)$/;"	f
npGetMapType	io/file/npcsv.c	/^int npGetMapType( int format, const char* curs, int size, void* dataRef )$/;"	f
npGetMapTypeName	io/file/npcsv.c	/^char* npGetMapTypeName (int elementID, void* dataRef)$/;"	f
npGetNodeByID	data/npmap.c	/^void* npGetNodeByID (int id, void* dataRef)$/;"	f
npGetOpenFilePath	io/npfile.c	/^void npGetOpenFilePath (char* buffer, int* size, void* dataRef)$/;"	f
npGetRootIndex	data/npmap.c	/^int npGetRootIndex (pNPnode node, void* dataRef)$/;"	f
npGetTableID	data/npmapfile.c	/^int npGetTableID(const char* filePath, void* dataRef)$/;"	f
npGetTag	io/gl/nptags.c	/^pNPtag npGetTag (int recordID, int tableID, void* dataRef)$/;"	f
npGetType	data/npmapfile.c	/^char* npGetType(int* type, int* format, const char* str, int size, void* dataRef)$/;"	f
npGetValueStr	io/file/npcsv.c	/^char* npGetValueStr(char* dest, pNPmapLink item, void* dataRef) \/\/*(int*)mapGlobals[id].mapPtr,$/;"	f
npGlutDrawGLScene	io/npglut.c	/^void npGlutDrawGLScene(void) $/;"	f
npGlutDrawGLSceneIdle	io/npglut.c	/^void npGlutDrawGLSceneIdle(void)$/;"	f
npGlutDrawString	io/gl/nptags.c	/^void npGlutDrawString (void *font, char *str)$/;"	f
npGlutKeyDown	io/npglut.c	/^void npGlutKeyDown (unsigned char key, int x, int y) $/;"	f
npGlutKeyDownSpecial	io/npglut.c	/^void npGlutKeyDownSpecial (int key, int x, int y) $/;"	f
npGlutKeyUp	io/npglut.c	/^void npGlutKeyUp (unsigned char key, int x, int y) $/;"	f
npGlutKeyUpSpecial	io/npglut.c	/^void npGlutKeyUpSpecial (int key, int x, int y) $/;"	f
npGlutPrimitive	io/npglut.c	/^void npGlutPrimitive (int primitive)$/;"	f
npGridSpiralXY	data/npnode.c	/^NPfloatXY npGridSpiralXY( int nX, int nY, float dX, float dY, int index )$/;"	f
npHSLtoRGB	io/gl/npcolor.c	/^void npHSLtoRGB( float H, float S, float L, float* R, float* G, float* B ) \/\/pNPfloatRGB rgbOut$/;"	f
npHSLtoRGB8	io/gl/npcolor.c	/^void npHSLtoRGB8 (float H, float S, float L,$/;"	f
npHSLtoRGBA	io/gl/npcolor.c	/^NPfloatRGBA npHSLtoRGBA( float H, float S, float L, float alpha )$/;"	f
npHideSubNodes	io/npgl.c	/^void npHideSubNodes (bool hide, pNPnode node, void* dataRef)$/;"	f
npHitTestHUD	io/npmouse.c	/^int npHitTestHUD (int x, int y, void* dataRef)$/;"	f
npHueToRGB	io/gl/npcolor.c	/^float npHueToRGB( float v1, float v2, float vH )             \/\/Function Hue_2_RGB$/;"	f
npIDtoRGB	io/gl/npgldraw.c	/^void npIDtoRGB( int id, int* r, int* g, int* b )$/;"	f
npImportCSV	io/file/npcsv.c	/^void npImportCSV (FILE* file, int type, void* dataRef)$/;"	f
npImportMapFile	data/npmapfile.c	/^int npImportMapFile (FILE* file, int type, void* dataRef)$/;"	f
npImportTagsFromCSV	io/gl/nptags.c	/^void npImportTagsFromCSV (char* buffer, int size, int wordSize, void* dataRef)$/;"	f
npInitAllChunkObjects	io/db/npdbz.c	/^struct newChunksObj* npInitAllChunkObjects(struct newChunksObj *chunks, void* dataRef)$/;"	f
npInitAuxDB	io/db/npauxdb.c	/^void npInitAuxDB (void* dataRef)$/;"	f
npInitCPU	npctrl.c	/^void npInitCPU (void* dataRef)$/;"	f
npInitCSV	io/file/npcsv.c	/^void npInitCSV (void* dataRef)$/;"	f
npInitCh	io/npch.c	/^void npInitCh (void* dataRef)$/;"	f
npInitCmd	ctrl/npcmd.c	/^void npInitCmd (void* dataRef)$/;"	f
npInitColor	io/gl/npcolor.c	/^void npInitColor( void* dataRef )$/;"	f
npInitConsole	io/npconsole.c	/^void npInitConsole (void* dataRef)$/;"	f
npInitCtrl	npctrl.c	/^void npInitCtrl (void* dataRef)$/;"	f
npInitDB	io/db/npdb.c	/^void npInitDB (void* dataRef)$/;"	f
npInitDOT	io/file/npdot.c	/^void npInitDOT (void* dataRef)$/;"	f
npInitData	npdata.c	/^void* npInitData (int argc, char** argv)$/;"	f
npInitDataCPU	npdata.c	/^void npInitDataCPU (pNPcpu cpu)$/;"	f
npInitDataChannel	npdata.c	/^void npInitDataChannel (void* dataRef)$/;"	f
npInitDataCtrl	npdata.c	/^void npInitDataCtrl(void* dataRef)$/;"	f
npInitDataDB	npdata.c	/^void npInitDataDB (struct databases* dbs, void* dataRef)$/;"	f
npInitDataFile	npdata.c	/^void npInitDataFile (pNPfile file, void* dataRef)$/;"	f
npInitDataGL	npdata.c	/^void npInitDataGL(void* dataRef)$/;"	f
npInitDataHUD	npdata.c	/^void npInitDataHUD (void* dataRef)$/;"	f
npInitDataIO	npdata.c	/^void npInitDataIO(int argc, char** argv, void* dataRef)$/;"	f
npInitDataMap	npdata.c	/^void npInitDataMap(void* dataRef)$/;"	f
npInitDataOSC	npdata.c	/^void npInitDataOSC (pNPosc osc, void* dataRef)$/;"	f
npInitDataQue	npdata.c	/^void npInitDataQue (pNPque que, void* dataRef)$/;"	f
npInitDataRecordTag	npdata.c	/^void npInitDataRecordTag (pNPrecordTag recordTag, void* dataRef)$/;"	f
npInitDataTags	npdata.c	/^void npInitDataTags (pNPtags tags, void* dataRef)$/;"	f
npInitDatabase	npdata.c	/^pNPdatabase npInitDatabase( void )$/;"	f
npInitEngine	ctrl/npengine.c	/^void npInitEngine (void* dataRef)$/;"	f
npInitFile	io/npfile.c	/^void npInitFile (void* dataRef)$/;"	f
npInitGDAL	io/file/npgdal.c	/^void npInitGDAL (void* dataRef)$/;"	f
npInitGL	io/npgl.c	/^void npInitGL(void* dataRef) $/;"	f
npInitGLDraw	io/gl/npgldraw.c	/^void npInitGLDraw(void* dataRef)$/;"	f
npInitGLPrimitive	io/gl/npgeometry.c	/^void npInitGLPrimitive (void* dataRef)$/;"	f
npInitGlut	io/npglut.c	/^void npInitGlut (int argc, char **argv, void* dataRef)$/;"	f
npInitHadoop	io/db/nphadoop.c	/^void npInitHadoop (void* dataRef)$/;"	f
npInitHostDB	npdata.c	/^pNPdbHost npInitHostDB( void )$/;"	f
npInitIO	npio.c	/^void npInitIO( void* dataRef )$/;"	f
npInitJSON	io/file/npjson.c	/^void npInitJSON (void* dataRef)$/;"	f
npInitKML	io/file/npkml.c	/^void npInitKML (void* dataRef)$/;"	f
npInitKey	io/npkey.c	/^void npInitKey (void* dataRef)$/;"	f
npInitKeyMap	io/npkey.c	/^void npInitKeyMap (void* dataRef)$/;"	f
npInitMalloc	data/npmap.c	/^void npInitMalloc(void* dataRef)$/;"	f
npInitMap	data/npmap.c	/^void npInitMap (void* dataRef)$/;"	f
npInitMapFile	data/npmapfile.c	/^void npInitMapFile (void* dataRef)$/;"	f
npInitMessage	npdata.c	/^void npInitMessage (void* dataRef)$/;"	f
npInitMongoDB	io/db/npmongo.c	/^void npInitMongoDB (void* dataRef)$/;"	f
npInitMouse	io/npmouse.c	/^void npInitMouse (void* dataRef)$/;"	f
npInitMySQL	io/db/npmysql.c	/^void npInitMySQL (void* dataRef)$/;"	f
npInitNode	data/npnode.c	/^void npInitNode (void* dataRef)$/;"	f
npInitNodeCamera	data/npnode.c	/^void npInitNodeCamera (pNPnode node)$/;"	f
npInitNodeConsole	npdata.c	/^void npInitNodeConsole (void* consoleRef, void* dataRef)$/;"	f
npInitNodeDefault	data/npnode.c	/^void npInitNodeDefault (pNPnode node)$/;"	f
npInitNodeHUD	data/npnode.c	/^void npInitNodeHUD (pNPnode node)$/;"	f
npInitOBJ	io/file/npobj.c	/^void npInitOBJ (void* dataRef)$/;"	f
npInitOFX	ofxantz.cpp	/^void npInitOFX (void* dataRef)$/;"	f
npInitOSC	io/net/nposc.c	/^void npInitOSC (void* dataRef )$/;"	f
npInitOscPackListener	io/net/nposcpack.cpp	/^void npInitOscPackListener( pNPoscPackListener oscListener, void* dataRef )$/;"	f
npInitOscPackSender	io/net/nposcpack.cpp	/^void npInitOscPackSender( pNPoscPackSender oscSender, char* ip, int port )$/;"	f
npInitPlugin	io/plugin/npplugin.c	/^void npInitPlugin (void* dataRef)$/;"	f
npInitPostgreSQL	io/db/npostgresql.c	/^void npInitPostgreSQL (void* dataRef)$/;"	f
npInitPropertyTracks	npdata.c	/^void npInitPropertyTracks (pNPnodePropertyTracks propertyTracks)$/;"	f
npInitSQLite	io/db/npsqlite.c	/^void npInitSQLite (void* dataRef)$/;"	f
npInitTags	io/gl/nptags.c	/^void npInitTags (void* dataRef)$/;"	f
npInitTest	ctrl/nptest.c	/^void npInitTest (void* dataRef)$/;"	f
npInitTexMap	io/gl/nptexmap.c	/^void npInitTexMap (void* dataRef)$/;"	f
npInitTextTag	npdata.c	/^void npInitTextTag (pNPtag tag, void* dataRef)$/;"	f
npInitTools	npdata.c	/^void npInitTools (pNPnode root, void* dataRef)$/;"	f
npInitVideo	io/video/npvideo.c	/^void npInitVideo (void* dataRef)$/;"	f
npInitXML	io/file/npxml.c	/^void npInitXML (void* dataRef)$/;"	f
npInitcsvStrObjects	io/db/npdbz.c	/^void npInitcsvStrObjects(struct csvStrObjects *csvObjects, int numOfObjects, void* dataRef)$/;"	f
npInsert	io/db/npdbz.c	/^void npInsert(void* dbID, pNPdbFuncSet func, char* table, struct newChunkObj *value)$/;"	f
npInsertAllChunks	io/db/npdbz.c	/^void npInsertAllChunks(struct newChunksObj *chunks, void* dbID, pNPdbFuncSet func, char* table)$/;"	f
npInvertMatrixf	data/npmath.c	/^bool npInvertMatrixf (const float m[16], float invOut[16])$/;"	f
npKeyEvent	io/npkey.c	/^void npKeyEvent (int key, int keyEventType)$/;"	f
npKeyGlut	io/npkey.c	/^void npKeyGlut (int key, int x, int y, int keyTypeGlut, int modifiers)$/;"	f
npKeyRAW	io/npkey.c	/^int npKeyRAW (int convertKey, int keyCodeType)$/;"	f
npLastEOL	data/npstr.c	/^int npLastEOL(const char* buffer, int size)$/;"	f
npListDir	io/npfile.c	/^void npListDir ( char* pathName, void* dataRef)$/;"	f
npLoadChMap	io/npch.c	/^void npLoadChMap (const char* filePath, void* dataRef)$/;"	f
npLoadChMeta	io/npch.c	/^void npLoadChMeta (const char* filePath, void* dataRef)$/;"	f
npLoadChTracks	io/npch.c	/^void npLoadChTracks (const char* filePath, void* dataRef)$/;"	f
npLoadMapFile	data/npmapfile.c	/^void npLoadMapFile (char* buffer, int wordSize, int size, void* dataRef)$/;"	f
npLoadNodesCSV	data/npmapfile.c	/^int npLoadNodesCSV (const char* buffer, int size, int type, void* dataRef)$/;"	f
npLoadScene	io/npfile.c	/^int npLoadScene( int format, char* datasetName, void* dataRef)$/;"	f
npLoadTags	data/npmapfile.c	/^int npLoadTags (const char* buffer, int size, void* dataRef)$/;"	f
npLoadTextures	io/npgl.c	/^void npLoadTextures(void* dataRef) $/;"	f
npLocalToWorld	data/npmath.c	/^void npLocalToWorld (NPfloatXYZ *world, const float *inverseCam, const float *modelView)$/;"	f
npLowPassFilter	io/npmouse.c	/^float npLowPassFilter( float start, float target, float fac )$/;"	f
npMainArgcArgvHandler	io/npconsole.c	/^void npMainArgcArgvHandler( int argc, char** argv, void* dataRef )$/;"	f
npMakeDir	io/npfile.c	/^void npMakeDir ( char* pathName, void* dataRef)$/;"	f
npMalloc	data/npmap.c	/^void* npMalloc(int type, int size, void* dataRef)$/;"	f
npMapAddressToMapTypeItem	io/file/npcsv.c	/^pNPmapLink npMapAddressToMapTypeItem (const char* str, void* dataRef)$/;"	f
npMapAddressToPtr	io/file/npcsv.c	/^void* npMapAddressToPtr (const char* str, void* dataRef)$/;"	f
npMapAuto	io/file/npcsv.c	/^int npMapAuto( int format, const char* curs, int size, void* dataRef )$/;"	f
npMapCSVvOne	data/npmapfile.c	/^void npMapCSVvOne(pNPnode node)$/;"	f
npMapElementIDtoPtr	io/file/npcsv.c	/^void* npMapElementIDtoPtr (int elementID, void* dataRef)$/;"	f
npMapElementToPtr	io/file/npcsv.c	/^void* npMapElementToPtr (const char* str, void* dataRef)$/;"	f
npMapItemPtr	io/file/npcsv.c	/^void* npMapItemPtr (char* mapPath, char* item, char* element, char* typeTag, void* dataRef)$/;"	f
npMapNodeAdd	data/npmap.c	/^void* npMapNodeAdd (int id, int type, int branchLevel, int parentID, $/;"	f
npMapNodeDown	data/npmap.c	/^pNPnode npMapNodeDown (void* dataRef){return NULL;}			\/\/select $/;"	f
npMapNodeNext	data/npmap.c	/^pNPnode npMapNodeNext (void* dataRef){return NULL;}			\/\/select next sibling node$/;"	f
npMapNodePrevious	data/npmap.c	/^pNPnode npMapNodePrevious (void* dataRef){return NULL;}		\/\/previous sibling$/;"	f
npMapNodeUp	data/npmap.c	/^pNPnode npMapNodeUp (void* dataRef){return NULL;}				\/\/select parent$/;"	f
npMapNodesToCSV	data/npmapfile.c	/^int npMapNodesToCSV (char* buffer, int size, int* rootIndex, void* dataRef)$/;"	f
npMapSort	data/npmap.c	/^void npMapSort(void* dataRef)$/;"	f
npMapSortAdd	data/npmap.c	/^void npMapSortAdd (int id, int parentID, void* nodeRef, void* dataRef)$/;"	f
npMapSortID	data/npmap.c	/^pNPnode npMapSortID (int id, void* dataRef)$/;"	f
npMapSortInit	data/npmap.c	/^void npMapSortInit (void** mapRef, void* dataRef)$/;"	f
npMapStrToC	data/npstr.c	/^void npMapStrToC (void** dest, const char* str, int type, int size, void* dataRef)$/;"	f
npMapStrToID	io/file/npcsv.c	/^int npMapStrToID (const char* str, void* dataRef)$/;"	f
npMapStrToPtr	io/file/npcsv.c	/^void* npMapStrToPtr (const char* str, void* dataRef)$/;"	f
npMapToCSV	io/file/npcsv.c	/^int npMapToCSV (char* csvStr, int mapType, int size, int* index, void* dataRef)$/;"	f
npMapTokens	io/npch.c	/^void npMapTokens( char** tokens, pData data )$/;"	f
npMapTraverseTree	data/npmapfile.c	/^int npMapTraverseTree (char* buffer, pNPnode node, int format, void* dataRef)$/;"	f
npMapTraverseTreeLL	data/npmapfile.c	/^int npMapTraverseTreeLL(char* buffer, int* index, pNPnode node, int format, void* dataRef)$/;"	f
npMapTypeInit	io/file/npcsv.c	/^void npMapTypeInit (void* dataRef)$/;"	f
npMapTypeName	io/file/npcsv.c	/^char* npMapTypeName (int mapType, void* dataRef)$/;"	f
npMenuRefresh	io/npgl.c	/^void npMenuRefresh( pNPhud hud, void* dataRef )$/;"	f
npMouseEvent	io/npmouse.c	/^void npMouseEvent (int button, int state, int x, int y)$/;"	f
npMouseMotion	io/npmouse.c	/^void npMouseMotion (int x, int y)$/;"	f
npMouseWheel	io/npmouse.c	/^void npMouseWheel (int wheel, int direction, int x, int y)$/;"	f
npMultMatrix	data/npmath.c	/^void npMultMatrix (float *matDest, float *matA, float *matB)$/;"	f
npMysqlAddFuncSet	io/db/npmysql.c	/^pNPdbFuncSet npMysqlAddFuncSet( pNPdbs db, pNPdbFuncSet funcSet )$/;"	f
npMysqlGetTableFields	io/db/npmysql.c	/^char* npMysqlGetTableFields( int type, void* dataRef )$/;"	f
npMysqlHook	io/db/npmysql.c	/^int npMysqlHook( pNPdbFuncSet func, void* dbLib)$/;"	f
npMysqlInitConnOptions	io/db/npmysql.c	/^int npMysqlInitConnOptions( pNPdbFuncSet func, void* connInit )$/;"	f
npMysqlServerCtrl	io/db/npmysql.c	/^int npMysqlServerCtrl(void (*ctrlFunction)(void*), void* parameters)$/;"	f
npMysqlStatementCreate	io/db/npmysql.c	/^char* npMysqlStatementCreate(char* dbName)$/;"	f
npMysqlStatementCreateTable	io/db/npmysql.c	/^char* npMysqlStatementCreateTable(char* table, char* fields)$/;"	f
npMysqlStatementDrop	io/db/npmysql.c	/^char* npMysqlStatementDrop(char* dropType, char* dropName)$/;"	f
npMysqlStatementInsert	io/db/npmysql.c	/^char* npMysqlStatementInsert(char* table)$/;"	f
npMysqlStatementSelect	io/db/npmysql.c	/^char* npMysqlStatementSelect( char* table )$/;"	f
npMysqlStatementShow	io/db/npmysql.c	/^char* npMysqlStatementShow(char* showWhat)$/;"	f
npMysqlStatementTruncate	io/db/npmysql.c	/^char* npMysqlStatementTruncate( int dbID, char* tableName )$/;"	f
npMysqlStatementUpdate	io/db/npmysql.c	/^char* npMysqlStatementUpdate( int dbID, char* tableName )$/;"	f
npMysqlStatementUse	io/db/npmysql.c	/^char* npMysqlStatementUse( char* dbName )$/;"	f
npNewChannel	io/npch.c	/^void npNewChannel (int channel, void* dataRef)$/;"	f
npNewDirNode	io/npfile.c	/^pNPnode npNewDirNode( pNPnode node, char* path, int type, int view, void* dataRef )$/;"	f
npNewFreeChunks	io/db/npdbz.c	/^void npNewFreeChunks(struct newChunksObj * chunks, void* dataRef)$/;"	f
npNewGenMysqlFields	io/db/npdbz.c	/^char* npNewGenMysqlFields(int count, int type, void* dataRef)$/;"	f
npNewInitChunksObj	io/db/npdbz.c	/^struct newChunksObj* npNewInitChunksObj(struct newChunksObj *chunks, int totalObjsSize, int chunkSize, void* dataRef)$/;"	f
npNewMapFile	data/npmapfile.c	/^FILE* npNewMapFile (const char* fileName, const char* mode, void* dataRef)$/;"	f
npNewMapTraverseTreeLL	io/db/npdbz.c	/^void npNewMapTraverseTreeLL(struct csvStrObjects *nodes, int* index, pNPnode node, int format, void* dataRef)$/;"	f
npNewNodeID	data/npnode.c	/^int npNewNodeID()				\/\/improve this to re-use nodeID upon delete, debug zz$/;"	f
npNewStrcpy	data/npstr.c	/^char* npNewStrcpy (const char* str, void* dataRef) $/;"	f
npNewTag	data/npmap.c	/^pNPrecordTag npNewTag(void* dataRef)$/;"	f
npNewerMapTraverseTreeLL	io/db/npdbz.c	/^void npNewerMapTraverseTreeLL(struct csvStrObjects *nodes, int* index, pNPnode node, int format, void* dataRef)$/;"	f
npNextField	data/npstr.c	/^int npNextField(const char* buffer)	\/\/does NOT Check Max$/;"	f
npNextLine	data/npstr.c	/^int npNextLine(const char* buffer )	\/\/does NOT Check Max$/;"	f
npNextLineLimit	data/npstr.c	/^int npNextLineLimit(const char* buffer, int size )	\/\/Checks Max$/;"	f
npNextWhiteSpace	data/npstr.c	/^char* npNextWhiteSpace (const char* buffer, int size)$/;"	f
npNodeAttach	data/npnode.c	/^bool npNodeAttach (pNPnode node, pNPnode parent, void* dataRef)$/;"	f
npNodeDelete	data/npnode.c	/^void npNodeDelete (pNPnode node, void* dataRef)$/;"	f
npNodeFilePath	io/npfile.c	/^bool npNodeFilePath( char* buildPath, pNPnode node, void* dataRef )$/;"	f
npNodeMoveBranch	data/npmap.c	/^void npNodeMoveBranch (pNPnode node, pNPnode newParent, void* dataRef)$/;"	f
npNodeNew	data/npnode.c	/^pNPnode npNodeNew (int nodeType, pNPnode nodeParent, void* dataRef)$/;"	f
npNodeNewLink	data/npnode.c	/^pNPnode npNodeNewLink (pNPnode linkA, pNPnode linkB, void* dataRef)$/;"	f
npNodeRemove	data/npnode.c	/^void npNodeRemove (bool freeNode, pNPnode node, void* dataRef)$/;"	f
npNodeTraverseTree	io/gl/nptags.c	/^void npNodeTraverseTree ( void (*nodeFunc)(pNPnode node, void* dataRef), $/;"	f
npNodeUpdateBranchLevel	data/npmap.c	/^void npNodeUpdateBranchLevel (pNPnode node)$/;"	f
npNodeValues	io/db/npdbz.c	/^struct csvStrObjects* npNodeValues(void *dataRef)$/;"	f
npOpenAntz	io/npfile.c	/^void npOpenAntz (const char* command, void* dataRef)$/;"	f
npOpenApp	io/npfile.c	/^void npOpenApp (const char* command, void* dataRef)$/;"	f
npOpenCSV	io/file/npcsv.c	/^FILE* npOpenCSV (const char* fileName, const char* mode, void* dataRef)$/;"	f
npOpenDb	io/db/npdbz.c	/^int npOpenDb(struct database *db)$/;"	f
npOpenGlobalsCSV	io/file/npcsv.c	/^int npOpenGlobalsCSV (char* filePath, int wordSize, int size, void* dataRef)$/;"	f
npOpenMapCSV	io/file/npcsv.c	/^int npOpenMapCSV (char* filePath, int mapType, void* dataRef)$/;"	f
npOpenMapFile	data/npmapfile.c	/^FILE* npOpenMapFile (const char* fileName, const char* mode, void* dataRef)$/;"	f
npOpenNode	io/npfile.c	/^bool npOpenNode( pNPnode node, void* dataRef )$/;"	f
npOpenNodeFile	io/npfile.c	/^bool npOpenNodeFile( pNPnode node, void* dataRef )$/;"	f
npOpenURL	io/npfile.c	/^void npOpenURL (const char* command, void* dataRef)$/;"	f
npOscAddBool	io/net/nposcpack.cpp	/^void npOscAddBool( pNPoscPackSender oscSender, bool val )$/;"	f
npOscAddFloat	io/net/nposcpack.cpp	/^void npOscAddFloat( pNPoscPackSender oscSender, float val )$/;"	f
npOscAddInt	io/net/nposcpack.cpp	/^void npOscAddInt( pNPoscPackSender oscSender, int val )$/;"	f
npOscAddString	io/net/nposcpack.cpp	/^void npOscAddString( pNPoscPackSender oscSender, char* val )$/;"	f
npOscConnect	io/net/nposcpack.cpp	/^extern "C" void npOscConnect( pNPosc Item, void* dataRef )$/;"	f
npOscListenerThread	io/net/nposcpack.cpp	/^void npOscListenerThread (void* oscListenerX)$/;"	f
npOscReadLine	io/net/nposcpack.cpp	/^extern "C" char* npOscReadLine( char* bufferStart, int maxLength, int udpFd )$/;"	f
npOscRx	io/net/nposc.c	/^void npOscRx (int oscID, const char* addr, const char* tag, void** arguments, void* dataRef )$/;"	f
npOscTx	io/net/nposcpack.cpp	/^extern "C" void npOscTx (int oscID, char* addr, char* tag, void** arguments, void* dataRef ) $/;"	f
npPathNameToTag	io/npfile.c	/^void npPathNameToTag( pNPnode node, char* path )$/;"	f
npPick	io/npgl.c	/^void npPick (int x, int y, void* dataRef)$/;"	f
npPickHUD	io/npgl.c	/^void npPickHUD (pNPnode node, void* dataRef)$/;"	f
npPickTool	io/npgl.c	/^void npPickTool (pNPnode node, void* dataRef)$/;"	f
npPostAxes	io/npgl.c	/^void npPostAxes (void* dataRef)$/;"	f
npPostMap	data/npmapfile.c	/^void npPostMap (pNPrecordSet recSet, void* dataRef)$/;"	f
npPostMode	io/npgl.c	/^void npPostMode (pNPnode node, void* dataRef)$/;"	f
npPostMsg	npdata.c	/^void npPostMsg (char* message, int type, void* dataRef)$/;"	f
npPostNodeID	io/npconsole.c	/^void npPostNodeID( pNPnode node, void* dataRef )$/;"	f
npPostTool	io/npgl.c	/^void npPostTool (pNPnode node, void* dataRef)$/;"	f
npPreLoadInit	data/npmapfile.c	/^void npPreLoadInit(pNPrecordSet recSet, void* dataRef)$/;"	f
npProcessLinkQue	io/gl/npgldraw.c	/^void npProcessLinkQue (void* dataRef)$/;"	f
npProcessQue	data/npmap.c	/^void npProcessQue(pNPque que, void* dataRef)$/;"	f
npProcessQueItem	data/npmap.c	/^void npProcessQueItem( pNPqueItem item, void* dataRef )$/;"	f
npProjectWorldToScreen	io/gl/npgldraw.c	/^NPfloatXYZ npProjectWorldToScreen (const pNPfloatXYZ offset)$/;"	f
npQueCmdFromCSV	io/npconsole.c	/^void npQueCmdFromCSV ( const char* cmdElement, const char* cmdData, void* dataRef )$/;"	f
npQueDel	data/npmap.c	/^int npQueDel( pNPque que, void* dataRef )$/;"	f
npQueMapItem	data/npmap.c	/^void npQueMapItem( int queID, void* dest, void* srcData, int type, void* dataRef)$/;"	f
npQueNew	data/npmap.c	/^int npQueNew( int queType, int itemCount, void* dataRef )$/;"	f
npQueOverflow	data/npmap.c	/^void npQueOverflow( pNPque que, void* dataRef )$/;"	f
npQueResize	data/npmap.c	/^int npQueResize( pNPque que, int newCount, void* dataRef )$/;"	f
npRGBtoID	io/gl/npgldraw.c	/^int npRGBtoID( int r, int g, int b )$/;"	f
npReadCSV	io/file/npcsv.c	/^int npReadCSV (void* readBuffer, int elementSize, int elementCount, $/;"	f
npReadMapFile	data/npmapfile.c	/^int npReadMapFile (void* readBuffer, int elementSize, int elementCount, $/;"	f
npReadMapNodeCSV	data/npmapfile.c	/^void* npReadMapNodeCSV (const char* buffer, int wordSize, int size, $/;"	f
npReopenDataSource	io/npch.c	/^void npReopenDataSource( pNPch ch, void* dataRef )$/;"	f
npResizeConsole	io/npgl.c	/^void npResizeConsole (void* dataRef)$/;"	f
npRevisedFreeNodeValues	io/db/npdbz.c	/^void npRevisedFreeNodeValues(struct csvStrObjects *nodes, void* dataRef)$/;"	f
npRevisedNodeValues	io/db/npdbz.c	/^struct csvStrObjects* npRevisedNodeValues(void* dataRef)$/;"	f
npSave	io/npfile.c	/^void npSave (FILE* file, void* dataRef)$/;"	f
npSaveAs	io/npfile.c	/^void npSaveAs (int size, void* dataRef)$/;"	f
npSaveCSV	io/file/npcsv.c	/^void npSaveCSV (FILE* file, void* dataRef)$/;"	f
npSaveChMap	io/npch.c	/^void npSaveChMap (const char* filePath, void* dataRef)$/;"	f
npSaveMapFile	data/npmapfile.c	/^void npSaveMapFile (FILE* file, void* dataRef)$/;"	f
npSaveMapToCSV	io/file/npcsv.c	/^int npSaveMapToCSV( char* datasetName, int mapTypeID, void* dataRef )$/;"	f
npSaveScene	io/npfile.c	/^int npSaveScene( int format, char* datasetName, void* dataRef)$/;"	f
npScreenGrab	io/npglut.c	/^void npScreenGrab( char* filePath, int type, int x, int y, int w, int h,  void* dataRef )$/;"	f
npScreenGrabThumb	io/npgl.c	/^npScreenGrabThumb( char* name, int type, int x, int y, int w, int h, void* dataRef )$/;"	f
npSelect	io/db/npdbz.c	/^int npSelect(void* conn, pNPdbFuncSet func, char* table) \/\/Add field(s) choice later$/;"	f
npSelectNode	data/npmap.c	/^void npSelectNode (pNPnode node, void* dataRef)$/;"	f
npSelectNodeByID	data/npmap.c	/^void npSelectNodeByID (int id, void* dataRef)$/;"	f
npSelectRegionNode	ctrl/npengine.c	/^void npSelectRegionNode (pNPnode node, pData dataRef)$/;"	f
npSendOscPackBundle	io/net/nposcpack.cpp	/^void npSendOscPackBundle( pNPoscPackSender oscSender )$/;"	f
npSetCamTarget	io/npmouse.c	/^void npSetCamTarget (void* dataRef)$/;"	f
npSetFileAttrib	io/npfile.c	/^bool npSetFileAttrib ( char* pathName, int attrib, void* dataRef)$/;"	f
npSetIndexColor	io/gl/npcolor.c	/^void npSetIndexColor( NPubyteRGBA *color, int *colorIndex, pNPmapColor palette )$/;"	f
npSetMapItem	data/npmap.c	/^void npSetMapItem( char* mapPath, char* item, char* element, char* typeTag,$/;"	f
npSetMode	io/npgl.c	/^void npSetMode( int mode, void* dataRef )$/;"	f
npSetNodeTag	io/gl/nptags.c	/^void npSetNodeTag (pNPnode node, void* dataRef)$/;"	f
npSetTagOffset	data/npnode.c	/^void npSetTagOffset (pNPnode node)$/;"	f
npShowDatabases	io/db/npdbz.c	/^void* npShowDatabases(int dbID, struct dbFunction *db, void* dataRef )$/;"	f
npSkipWhiteSpace	data/npstr.c	/^char* npSkipWhiteSpace (const char* buffer, int size)$/;"	f
npSort	data/npmap.c	/^void npSort (void* base, int count, int elementSize, $/;"	f
npStartOscPackListener	io/net/nposcpack.cpp	/^void npStartOscPackListener( pNPoscPackListener oscListener )$/;"	f
npStrDigitIsNext	data/npstr.c	/^int npStrDigitIsNext( const char* str, int size )$/;"	f
npStrToRange	data/npstr.c	/^int npStrToRange( int* lower, int* upper, const char* str, int size )$/;"	f
npSyncChMap	io/npch.c	/^void npSyncChMap (void* dataRef)$/;"	f
npSyncRecords	data/npmapfile.c	/^void npSyncRecords (pNPrecordSet recordSet, void* dataRef)$/;"	f
npSyncTags	io/gl/nptags.c	/^void npSyncTags (void* dataRef)$/;"	f
npSystemConsoleHelp	io/npconsole.c	/^void npSystemConsoleHelp (int argc, char** argv)$/;"	f
npTableAlreadyLoaded	data/npmapfile.c	/^int npTableAlreadyLoaded(const char* filePath, void* dataRef)$/;"	f
npTableMapUpdate	data/npmapfile.c	/^int npTableMapUpdate (const char* filePath, FILE* file, void* dataRef)$/;"	f
npTagEditMode	io/npgl.c	/^void npTagEditMode( bool tagEditMode, void* dataRef )$/;"	f
npTagNode	io/gl/nptags.c	/^void npTagNode (pNPnode node, void* dataRef)$/;"	f
npTagSort	data/npmap.c	/^void npTagSort (void* dataRef)$/;"	f
npTagSortAdd	data/npmap.c	/^void npTagSortAdd (pNPrecordTag recordTag, void* dataRef)$/;"	f
npTestCSV	io/file/npcsv.c	/^void npTestCSV (void* fileName, int wordSize, int size, void* dataRef)$/;"	f
npTestEvenNewerAllChunk	io/db/npdbz.c	/^struct newChunksObj* npTestEvenNewerAllChunk(void* dataRef)$/;"	f
npTestNewInitChunksObj	io/db/npdbz.c	/^struct newChunksObj* npTestNewInitChunksObj(struct newChunksObj *chunks, int chunkSize, void* dataRef)$/;"	f
npTestOSC	io/net/nposc.c	/^int npTestOSC(void* dataRef)$/;"	f
npThreadFileOpenMap	data/npmapfile.c	/^void npThreadFileOpenMap (void* dataRef)$/;"	f
npTraverseMap	data/npmap.c	/^void npTraverseMap (void (*pNodeFunc)(pNPnode node, void* dataRef),$/;"	f
npTraverseTree	data/npmap.c	/^void npTraverseTree (void (*pNodeFunc)(pNPnode node, void* dataRef), $/;"	f
npUpdateAuxDB	io/db/npauxdb.c	/^void npUpdateAuxDB (void* dataRef)							\/\/add to ctrl loop, debug zz$/;"	f
npUpdateCh	io/npch.c	/^void npUpdateCh (void* dataRef)$/;"	f
npUpdateCmd	ctrl/npcmd.c	/^void npUpdateCmd (void* dataRef)$/;"	f
npUpdateConsole	io/npconsole.c	/^void npUpdateConsole (void* dataRef)$/;"	f
npUpdateConsoleMenu	io/npconsole.c	/^void npUpdateConsoleMenu (pNPconsole console, void* dataRef)$/;"	f
npUpdateConsoleText	io/npconsole.c	/^void npUpdateConsoleText (pNPconsole console, void* dataRef)$/;"	f
npUpdateConsoleUserText	io/npconsole.c	/^void npUpdateConsoleUserText(pNPconsole console, void* dataRef)$/;"	f
npUpdateCtrl	npctrl.c	/^void npUpdateCtrl (void* dataRef)$/;"	f
npUpdateDB	io/db/npdb.c	/^void npUpdateDB (void* dataRef)							\/\/add to ctrl loop, debug zz$/;"	f
npUpdateData	npdata.c	/^void npUpdateData (void* dataRef)$/;"	f
npUpdateEngine	ctrl/npengine.c	/^void npUpdateEngine (void* dataRef)$/;"	f
npUpdateGlobals	io/file/npcsv.c	/^void npUpdateGlobals( void* dataRef )$/;"	f
npUpdateHadoop	io/db/nphadoop.c	/^void npUpdateHadoop (void* dataRef)$/;"	f
npUpdateIO	npio.c	/^void npUpdateIO (void* dataRef)$/;"	f
npUpdateMalloc	data/npmap.c	/^void npUpdateMalloc(void* dataRef)$/;"	f
npUpdateMongoDB	io/db/npmongo.c	/^void npUpdateMongoDB (void* dataRef)$/;"	f
npUpdateMouse	io/npmouse.c	/^void npUpdateMouse (void* dataRef)$/;"	f
npUpdateMySQL	io/db/npmysql.c	/^void npUpdateMySQL (void* dataRef)$/;"	f
npUpdateNodes	io/npch.c	/^void npUpdateNodes(void *dataRef)$/;"	f
npUpdateOFX	ofxantz.cpp	/^void npUpdateOFX (void* dataRef)$/;"	f
npUpdatePlugin	io/plugin/npplugin.c	/^void npUpdatePlugin (void* dataRef)							\/\/add to ctrl loop, debug zz$/;"	f
npUpdatePostgreSQL	io/db/npostgresql.c	/^void npUpdatePostgreSQL (void* dataRef)$/;"	f
npUpdateSQLite	io/db/npsqlite.c	/^void npUpdateSQLite (void* dataRef)$/;"	f
npUpdateTag	io/gl/nptags.c	/^void npUpdateTag (pNPtag tag)$/;"	f
npUpdateTags	io/gl/nptags.c	/^void npUpdateTags (void* dataRef)							\/\/add to ctrl loop, debug zz$/;"	f
npUpdateTest	ctrl/nptest.c	/^void npUpdateTest (void* dataRef)$/;"	f
npUpdateTexMap	io/gl/nptexmap.c	/^void npUpdateTexMap (void* dataRef)							\/\/add to ctrl loop, debug zz$/;"	f
npUpdateTopo	npctrl.c	/^void npUpdateTopo (pNPnode node, void* dataRef)$/;"	f
npUpdateVideo	io/video/npvideo.c	/^void npUpdateVideo (void* dataRef)$/;"	f
npUseDatabase2	io/db/npdbz.c	/^int npUseDatabase2(void* conn, pNPdbFuncSet func, char* dbName)$/;"	f
npValidateURL	io/npfile.c	/^bool npValidateURL( const char* urlASCII, void* dataRef )$/;"	f
npViewDatabases	npio.c	/^void npViewDatabases (void* dataRef)$/;"	f
npViewFiles	npio.c	/^void npViewFiles (void* dataRef)$/;"	f
npViewer	npio.c	/^void npViewer (void* dataRef)$/;"	f
npViewerOFX	ofxantz.cpp	/^void npViewerOFX (void* dataRef)$/;"	f
npWriteCSV	io/file/npcsv.c	/^int npWriteCSV (const void* str, int wordSize, int size, FILE* file, void* dataRef)$/;"	f
npWriteMapFile	data/npmapfile.c	/^int npWriteMapFile (const void* str, int wordSize, int size, FILE* file, void* dataRef)$/;"	f
npWriteMapHeader	data/npmapfile.c	/^int npWriteMapHeader (char* bufferIndex, int count, int type, void* dataRef)$/;"	f
npWriteNode	data/npmapfile.c	/^int npWriteNode (const char* buffer, pNPnode node, int format, void* dataRef)$/;"	f
npWriteNodeNewest	data/npmapfile.c	/^int npWriteNodeNewest (const char* buffer, pNPnode node, int format, void* dataRef)$/;"	f
npWriteTagCSV	io/gl/nptags.c	/^void npWriteTagCSV (void* dataRef)$/;"	f
npatod	data/npstr.c	/^double npatod (const char *p)$/;"	f
npatof	data/npstr.c	/^float npatof (const char *p)$/;"	f
npatoi	data/npstr.c	/^int npatoi(const char* buffer)$/;"	f
npchPause	io/npch.c	/^void npchPause (void* dataRef)	\/\/zz-JJ$/;"	f
npcmd_H_	ctrl/npcmd.h	26;"	d
npctrl_H_	npctrl.h	26;"	d
npdbActiveDB	io/db/npdb.c	/^char* npdbActiveDB( void* dataRef )$/;"	f
npdbActiveHost	io/db/npdb.c	/^void npdbActiveHost( char* hostName, void* dataRef)$/;"	f
npdbAddDatabase	io/db/npdb.c	/^pNPdatabase npdbAddDatabase( char* dbName, pNPdbHost host, pNPdbs dbs )$/;"	f
npdbAddHost	io/db/npdb.c	/^int npdbAddHost( char* type, char* ip, int port, char* user, char* pass, void* dataRef)	\/\/zzd$/;"	f
npdbAddHostDatabases	io/db/npdb.c	/^int npdbAddHostDatabases( pNPdbHost host, pNPdbs dbs )$/;"	f
npdbAddTable	npdata.c	/^pNPdatabase npdbAddTable( void )$/;"	f
npdbAttachHostFuncSets	io/db/npdb.c	/^void npdbAttachHostFuncSets( pNPdbs dbs )$/;"	f
npdbClearDatabaseList	io/db/npdb.c	/^int npdbClearDatabaseList( pNPdbs dbs )$/;"	f
npdbConnMonitorThread	io/db/npdb.c	/^void npdbConnMonitorThread( pNPdbs dbs, void* dataRef )$/;"	f
npdbConnect	io/db/npdb.c	/^int npdbConnect( pNPdbHost host, void* dataRef )$/;"	f
npdbConnectHosts	io/db/npdb.c	/^void npdbConnectHosts( pNPdbs dbs, void* dataRef )$/;"	f
npdbCreateDatabase	io/db/npdb.c	/^pNPdatabase npdbCreateDatabase( char* dbName, pNPdbHost host, pNPdbs dbs )$/;"	f
npdbCreateTable	io/db/npdb.c	/^int npdbCreateTable( pNPdatabase dbItem, char* table, char* fields )$/;"	f
npdbDrop	io/db/npdb.c	/^int npdbDrop( const char* dbName, void* dataRef )							\/\/add to ctrl loop, debug zz$/;"	f
npdbGetByName	io/db/npdb.c	/^pNPdatabase npdbGetByName( char* dbName, void* dataRef)$/;"	f
npdbGetByNameAndHost	io/db/npdb.c	/^pNPdatabase npdbGetByNameAndHost( char* dbName, pNPdbHost host, pNPdbs dbs )$/;"	f
npdbGetConnectedHost	io/db/npdb.c	/^pNPdbHost npdbGetConnectedHost( pNPdbs dbs )$/;"	f
npdbGetHostFuncSet	io/db/npdb.c	/^pNPdbFuncSet npdbGetHostFuncSet( char* hostType, pNPdbs dbs )$/;"	f
npdbGetList	io/db/npdbz.c	/^void* npdbGetList(struct database *db, void* dataRef )$/;"	f
npdbGetMenu	io/db/npdb.c	/^pNPmenu npdbGetMenu ( pNPmenu menu, void* dataRef)$/;"	f
npdbGetNodeByMapID	io/db/npdb.c	/^pNPnode npdbGetNodeByMapID( int id, pNPmapID map, void* dataRef )$/;"	f
npdbHostErr	io/db/npdb.c	/^int npdbHostErr( pNPdbHost host )$/;"	f
npdbInitMapID	io/db/npdb.c	/^int npdbInitMapID( pNPmapID map, int count, void* dataRef )$/;"	f
npdbItemErr	io/db/npdb.c	/^int npdbItemErr( pNPdatabase dbItem )$/;"	f
npdbLoadMenuItem	io/db/npdb.c	/^int npdbLoadMenuItem (int item, void* dataRef)$/;"	f
npdbLoadNodeTbl	io/db/npdb.c	/^int npdbLoadNodeTbl( pNPdatabase dbItem, void* dataRef )$/;"	f
npdbLoadNodes	io/db/npdb.c	/^int npdbLoadNodes( pNPdbFuncSet func, void* result, void* dataRef )$/;"	f
npdbLoadScene	io/db/npdb.c	/^int npdbLoadScene( pNPdatabase dbItem, void* dataRef )$/;"	f
npdbLoadUpdate	io/db/npdb.c	/^int npdbLoadUpdate( void* dataRef )							\/\/add to ctrl loop, debug zz$/;"	f
npdbNewDatabase	io/db/npdb.c	/^pNPdatabase npdbNewDatabase( char* name, pNPdbHost host, pNPdbs db )$/;"	f
npdbNewFuncSet	io/db/npdb.c	/^pNPdbFuncSet npdbNewFuncSet( pNPdbs db )$/;"	f
npdbOpen	io/db/npdbz.c	/^int npdbOpen( pNPdatabase database, void* dataRef ) $/;"	f
npdbPushScene	io/db/npdbz.c	/^int npdbPushScene ( void* dbID, const char* dbName, void* dataRef )							\/\/add to ctrl loop, debug zz$/;"	f
npdbRefreshDatabaseList	io/db/npdb.c	/^int npdbRefreshDatabaseList( pNPdbs dbs )$/;"	f
npdbRowToNode	io/db/npdb.c	/^void npdbRowToNode( pNPnode node, char** row )$/;"	f
npdbSaveAs	io/db/npdb.c	/^pNPdatabase npdbSaveAs( char* dbName, pNPdbHost host, void* dataRef )$/;"	f
npdbSaveScene	io/db/npdb.c	/^void npdbSaveScene( void* dataRef )$/;"	f
npdbSaveUpdate	io/db/npdb.c	/^int npdbSaveUpdate ( pNPdatabase dbItem, void* dataRef )$/;"	f
npdbSelect	io/db/npdb.c	/^void npdbSelect( char* dbName, char* tblName, char* selectWhere, void* dataRef)$/;"	f
npdbSelectTable	io/db/npdb.c	/^int npdbSelectTable( pNPdatabase dbItem, char* table ) \/\/Add field(s) choice later$/;"	f
npdbSet	io/db/npdb.c	/^void npdbSet( char* dbName, char* tblName, char* setStatement, void* dataRef)$/;"	f
npdbShowDatabases	io/db/npdb.c	/^int npdbShowDatabases( pNPdbHost host )$/;"	f
npdbStartConnMonitor	io/db/npdb.c	/^void npdbStartConnMonitor( pNPdbs dbs )							\/\/add to ctrl loop, debug zz$/;"	f
npdbStartMapID	io/db/npdb.c	/^void npdbStartMapID( pNPmapID map, void* dataRef )$/;"	f
npdbStopMapID	io/db/npdb.c	/^void npdbStopMapID( pNPmapID map, void* dataRef )$/;"	f
npdbTruncate	io/db/npdb.c	/^int npdbTruncate(void* conn, struct dbFunction *db, char* table)$/;"	f
npdbUpdateAntzStateFromDatabase	io/db/npdb.c	/^int npdbUpdateAntzStateFromDatabase(void* dataRef)$/;"	f
npdbUpdateMapID	io/db/npdb.c	/^int npdbUpdateMapID(pNPmapID map, void* dataRef)$/;"	f
npdbUpdateNodeFromRow	io/db/npdb.c	/^void npdbUpdateNodeFromRow( char** row, void* dataRef ) \/\/ Generalize here$/;"	f
npdbUpdateNodesFromMysqlResult	io/db/npdb.c	/^void npdbUpdateNodesFromMysqlResult(MYSQL_RES *result, void* dataRef)$/;"	f
npdbUse	io/db/npdb.c	/^int npdbUse( pNPdatabase dbItem )$/;"	f
npdbUse_old	io/db/npdbz.c	/^int npdbUse_old( const char* dbName, void* dataRef )							\/\/add to ctrl loop, debug zz$/;"	f
npengine_H_	ctrl/npengine.h	26;"	d
npglFullscreen	io/npglut.c	/^void npglFullscreen (void* dataRef)$/;"	f
npnode_H_	data/npnode.h	26;"	d
nposBeginThread	os/msw/npos.c	/^void nposBeginThread (voidFnPtr vfp, void *dataRef)$/;"	f
nposBeginThread	os/osx/nposx.c	/^void nposBeginThread (voidFnPtr vfp, void *dataRef)$/;"	f
nposEndThread	os/msw/npos.c	/^void nposEndThread (void)$/;"	f
nposEndThread	os/osx/nposx.c	/^void nposEndThread (void)$/;"	f
nposFileDialog	os/msw/npos.c	/^FILE* nposFileDialog (const char* fileName, int dialogType, void* dataRef)$/;"	f
nposFileDialog	os/posix/npos_posix.c	/^FILE* nposFileDialog (const char* fileName, int dialogType, void* dataRef)$/;"	f
nposGetAppPath	os/msw/npos.c	/^void nposGetAppPath (char* buffer, int* size)$/;"	f
nposGetAppPath	os/posix/npos_posix.c	/^void nposGetAppPath (char* buffer, int* size)$/;"	f
nposGetCWD	os/msw/npos.c	/^void nposGetCWD (char* buffer, int* size)$/;"	f
nposGetCWD	os/posix/npos_posix.c	/^void nposGetCWD (char* buffer, int* size)$/;"	f
nposGetKey	os/osx/nposx.c	/^int nposGetKey (void)$/;"	f
nposGetLibSymbol	os/osx/nposx.c	/^void* nposGetLibSymbol(void* library, char* symbolName) \/\/ New function, lde$/;"	f
nposGetOpenFilePath	os/msw/npos.c	/^void nposGetOpenFilePath (char* buffer, int* size, void* dataRef)$/;"	f
nposGetOpenFilePath	os/posix/npos_posix.c	/^void nposGetOpenFilePath (char* buffer, int* size, void* dataRef)$/;"	f
nposGetTime	os/msw/npos.c	/^double nposGetTime (void)$/;"	f
nposGetTime	os/posix/npos_posix.c	/^double nposGetTime (void)									\/\/untested, debug zz$/;"	f
nposLoadLibrary	os/osx/nposx.c	/^void* nposLoadLibrary( char* filePath )$/;"	f
nposSetCWD	os/msw/npos.c	/^void nposSetCWD (char* buffer)$/;"	f
nposSetCWD	os/posix/npos_posix.c	/^void nposSetCWD (char* buffer)$/;"	f
nposSetCursorPos	os/msw/npos.c	/^int nposSetCursorPos (int x, int y)$/;"	f
nposSetCursorPos	os/posix/npos_posix.c	/^int nposSetCursorPos (int x, int y)$/;"	f
nposSetOpenFilePath	os/msw/npos.c	/^void nposSetOpenFilePath (char* buffer, void* dataRef)$/;"	f
nposSetOpenFilePath	os/posix/npos_posix.c	/^void nposSetOpenFilePath (char* buffer, void* dataRef)$/;"	f
nposShowCursor	os/msw/npos.c	/^int nposShowCursor (int hide)$/;"	f
nposShowCursor	os/posix/npos_posix.c	/^int nposShowCursor (int hide)$/;"	f
nposSleep	os/msw/npos.c	/^void nposSleep (double seconds)$/;"	f
nposSleep	os/posix/npos_posix.c	/^void nposSleep (double seconds)$/;"	f
nposSupportsAntzThreads	os/msw/npos.c	/^bool nposSupportsAntzThreads (void)$/;"	f
nposSupportsAntzThreads	os/osx/nposx.c	/^bool nposSupportsAntzThreads (void)$/;"	f
nposTimeStampName	os/msw/npos.c	/^void nposTimeStampName (char* fileName)$/;"	f
nposTimeStampName	os/posix/npos_posix.c	/^void nposTimeStampName (char* fileName)$/;"	f
nposUpdateTime	os/msw/npos.c	/^void nposUpdateTime (void* dataRef)$/;"	f
nposUpdateTime	os/posix/npos_posix.c	/^void nposUpdateTime (void* dataRef)										\/\/debug zz$/;"	f
nposxFileDialog	os/osx/nposx.c	/^FILE* nposxFileDialog (const char* fileName, int dialogType, void* dataRef)$/;"	f
nposxGetCWD	os/osx/nposx.c	/^void nposxGetCWD (char* buffer, int* size)$/;"	f
nposxGetLibSymbol	os/osx/nposx.c	/^void* nposxGetLibSymbol(void* library, char* symbolName) \/\/ New function, lde$/;"	f
nposxSetCursorPos	os/osx/nposx.c	/^void nposxSetCursorPos (int x, int y)$/;"	f
nposxShowCursor	os/osx/nposx.c	/^void nposxShowCursor (int hide)$/;"	f
nposxSleep	os/osx/nposx.c	/^void nposxSleep (double seconds)$/;"	f
nposxTimeStampCSV	os/osx/nposx.c	/^void nposxTimeStampCSV (char* fileName)$/;"	f
nposxUpdateTime	os/osx/nposx.c	/^void nposxUpdateTime (void* dataRef)$/;"	f
npstrtod	data/npstr.c	/^double npstrtod(char** buffer)$/;"	f
npstrtof	data/npstr.c	/^float npstrtof(char** buffer)$/;"	f
npstrtoi	data/npstr.c	/^int npstrtoi(char** buffer)$/;"	f
npstrtol	data/npstr.c	/^long npstrtol(char** buffer)$/;"	f
nptest_H_	ctrl/nptest.h	26;"	d
numOfChunks	io/db/npdbz.h	/^	int numOfChunks;$/;"	m	struct:newChunksObj
numOfcsvStrObjects	io/db/npdbz.h	/^	int numOfcsvStrObjects;$/;"	m	struct:csvStrObjects
num_fields	data/nptypes.h	/^	void* (*num_fields)	    ();$/;"	m	struct:NPdbFuncSet
num_rows	data/nptypes.h	/^	void* (*num_rows)		();$/;"	m	struct:NPdbFuncSet
numberOfDatabases	io/db/npdbz.h	/^	int numberOfDatabases;$/;"	m	struct:databases
numberTracks	data/nptypes.h	/^	int			numberTracks;			\/\/!< number of tracks in this channel$/;"	m	struct:NPch
offset	data/nptypes.h	/^	NPfloatXYZS	offset;				\/\/!<constant to offset value by$/;"	m	struct:NPlabel
options	data/nptypes.h	/^	void* (*options)		();$/;"	m	struct:NPdbFuncSet
orphanCount	data/nptypes.h	/^	int			orphanCount;$/;"	m	struct:NPmap
orphanList	data/nptypes.h	/^	int*		orphanList;				\/\/!<list of orphans by node ID$/;"	m	struct:NPmap
osc	data/nptypes.h	/^	NPosc		osc;				\/\/!<OSC stuff uses io que for thread safety$/;"	m	struct:NPio
oscCommandIdx	io/net/nposcpack.cpp	/^	int oscCommandIdx;$/;"	m	class:OscTrackPacketListener	file:
oscCount	data/nptypes.h	/^	int			oscCount;$/;"	m	struct:NPmap
oscID_	io/net/nposcpack.cpp	/^	int oscID_;$/;"	m	class:OscAntzPacketListener	file:
oscListener	data/nptypes.h	/^	NPoscPackListener oscListener;	\/\/!<zz osc$/;"	m	struct:NPconnect
oscPackIdx	io/net/nposcpack.h	/^	int oscPackIdx; \/\/ index into array that holds the oscpack instances$/;"	m	struct:NPoscPackSender
outerRadius	data/nptypes.h	/^	float		outerRadius;				\/\/!<outer radius of the toroid$/;"	m	struct:NPpin
outgoingCommand	io/net/nposcpack.cpp	/^	int outgoingCommand[kNPmaxCommands];$/;"	m	class:OscTrackPacketListener	file:
outgoingFloatAddress	io/net/nposcpack.cpp	/^	float* outgoingFloatAddress[10];  \/\/ memory address of the destination float$/;"	m	class:OscTrackPacketListener	file:
outgoingFloatValue	io/net/nposcpack.cpp	/^	float outgoingFloatValue[10];  \/\/ the translated value$/;"	m	class:OscTrackPacketListener	file:
overlay	data/nptypes.h	/^	bool		overlay;					\/\/!<overlays relative to screen coord$/;"	m	struct:NPgrid
pData	data/nptypes.h	/^typedef struct Data* pData;$/;"	t	typeref:struct:Data
pMenuCallback	data/nptypes.h	/^	NPfuncPtr   pMenuCallback;			\/\/!<menu item selected callback$/;"	m	struct:NPconsole
pNPboolXYZ	data/nptypes.h	/^typedef struct NPboolXYZ *pNPboolXYZ;$/;"	t	typeref:struct:NPboolXYZ
pNPboolXYZS	data/nptypes.h	/^typedef struct NPboolXYZS *pNPboolXYZS;$/;"	t	typeref:struct:NPboolXYZS
pNPbuffer	data/npmapfile.c	/^typedef struct NPbuffer *pNPbuffer;$/;"	t	typeref:struct:NPbuffer	file:
pNPch	data/nptypes.h	/^typedef struct NPch* pNPch;$/;"	t	typeref:struct:NPch
pNPconnect	data/nptypes.h	/^typedef struct NPconnect* pNPconnect;$/;"	t	typeref:struct:NPconnect
pNPconsole	data/nptypes.h	/^typedef struct NPconsole * pNPconsole;$/;"	t	typeref:struct:NPconsole
pNPcpu	data/nptypes.h	/^typedef struct NPcpu* pNPcpu;$/;"	t	typeref:struct:NPcpu
pNPctrl	data/nptypes.h	/^typedef struct NPctrl* pNPctrl;$/;"	t	typeref:struct:NPctrl
pNPdatabase	data/nptypes.h	/^typedef struct NPdatabase * pNPdatabase;$/;"	t	typeref:struct:NPdatabase
pNPdatabases	data/nptypes.h	/^typedef struct NPdatabases *pNPdatabases;$/;"	t	typeref:struct:NPdatabases
pNPdbFields	data/nptypes.h	/^typedef struct NPdbFields * pNPdbFields;$/;"	t	typeref:struct:NPdbFields
pNPdbFuncSet	data/nptypes.h	/^typedef struct NPdbFuncSet *pNPdbFuncSet;$/;"	t	typeref:struct:NPdbFuncSet
pNPdbFunction	data/nptypes.h	/^typedef struct NPdbFunction *pNPdbFunction;$/;"	t	typeref:struct:NPdbFunction
pNPdbHost	data/nptypes.h	/^typedef struct NPdbHost * pNPdbHost;$/;"	t	typeref:struct:NPdbHost
pNPdbTable	data/nptypes.h	/^typedef struct NPdbTable * pNPdbTable;$/;"	t	typeref:struct:NPdbTable
pNPdbs	data/nptypes.h	/^typedef struct NPdbs *pNPdbs;$/;"	t	typeref:struct:NPdbs
pNPfile	data/nptypes.h	/^typedef struct NPfile* pNPfile;$/;"	t	typeref:struct:NPfile
pNPfloatRGB	data/nptypes.h	/^typedef struct NPfloatRGB *pNPfloatRGB;$/;"	t	typeref:struct:NPfloatRGB
pNPfloatRGBA	data/nptypes.h	/^typedef struct NPfloatRGBA *pNPfloatRGBA;$/;"	t	typeref:struct:NPfloatRGBA
pNPfloatXY	data/nptypes.h	/^typedef struct NPfloatXY *pNPfloatXY;$/;"	t	typeref:struct:NPfloatXY
pNPfloatXYZ	data/nptypes.h	/^typedef struct NPfloatXYZ * pNPfloatXYZ;$/;"	t	typeref:struct:NPfloatXYZ
pNPfloatXYZA	data/nptypes.h	/^typedef struct NPfloatXYZA *pNPfloatXYZA;$/;"	t	typeref:struct:NPfloatXYZA
pNPfloatXYZS	data/nptypes.h	/^typedef struct NPfloatXYZS *pNPfloatXYZS;$/;"	t	typeref:struct:NPfloatXYZS
pNPfuncDesc	data/npmap.c	/^typedef struct NPfuncDesc* pNPfuncDesc;$/;"	t	typeref:struct:NPfuncDesc	file:
pNPgl	data/nptypes.h	/^typedef struct NPgl * pNPgl;$/;"	t	typeref:struct:NPgl
pNPhud	data/nptypes.h	/^typedef struct NPhud * pNPhud;$/;"	t	typeref:struct:NPhud
pNPintXY	data/nptypes.h	/^typedef struct NPintXY *pNPintXY;$/;"	t	typeref:struct:NPintXY
pNPintXYZ	data/nptypes.h	/^typedef struct NPintXYZ *pNPintXYZ;$/;"	t	typeref:struct:NPintXYZ
pNPintXYZS	data/nptypes.h	/^typedef struct NPintXYZS *pNPintXYZS;$/;"	t	typeref:struct:NPintXYZS
pNPio	data/nptypes.h	/^typedef struct NPio* pNPio;$/;"	t	typeref:struct:NPio
pNPkey	data/nptypes.h	/^typedef struct NPkey * pNPkey;$/;"	t	typeref:struct:NPkey
pNPmap	data/nptypes.h	/^typedef struct NPmap * pNPmap;$/;"	t	typeref:struct:NPmap
pNPmapColor	data/nptypes.h	/^typedef struct NPmapColor* pNPmapColor;$/;"	t	typeref:struct:NPmapColor
pNPmapID	data/nptypes.h	/^typedef struct NPmapID * pNPmapID;	$/;"	t	typeref:struct:NPmapID
pNPmapItemNodeID	data/nptypes.h	/^typedef struct NPmapItemNodeID *pNPmapItemNodeID;$/;"	t	typeref:struct:NPmapItemNodeID
pNPmapLink	data/nptypes.h	/^typedef struct NPmapLink *pNPmapLink;$/;"	t	typeref:struct:NPmapLink
pNPmapNodeID	data/nptypes.h	/^typedef struct NPmapNodeID *pNPmapNodeID;$/;"	t	typeref:struct:NPmapNodeID
pNPmapPair	data/nptypes.h	/^typedef struct NPmapPair *pNPmapPair;$/;"	t	typeref:struct:NPmapPair
pNPmapType	data/nptypes.h	/^typedef struct NPmapType *pNPmapType;$/;"	t	typeref:struct:NPmapType
pNPmenu	data/nptypes.h	/^typedef struct NPmenu* pNPmenu;$/;"	t	typeref:struct:NPmenu
pNPmessage	data/nptypes.h	/^typedef struct NPmessage * pNPmessage;$/;"	t	typeref:struct:NPmessage
pNPmouse	data/nptypes.h	/^typedef struct NPmouse * pNPmouse;$/;"	t	typeref:struct:NPmouse
pNPnode	data/nptypes.h	/^typedef struct NPnode *pNPnode;$/;"	t	typeref:struct:NPnode
pNPnode2	data/nptypes.h	/^typedef struct NPnode2 *pNPnode2;$/;"	t	typeref:struct:NPnode2
pNPnodeData	data/nptypes.h	/^typedef struct NPnodeData * pNPnodeData;$/;"	t	typeref:struct:NPnodeData
pNPnodeList	data/nptypes.h	/^typedef struct NPnodeList * pNPnodeList;$/;"	t	typeref:struct:NPnodeList
pNPnodePropertyTracks	data/nptypes.h	/^typedef struct NPnodePropertyTracks * pNPnodePropertyTracks;$/;"	t	typeref:struct:NPnodePropertyTracks
pNPosc	data/nptypes.h	/^typedef struct NPosc* pNPosc;$/;"	t	typeref:struct:NPosc
pNPoscItem	data/nptypes.h	/^typedef struct NPoscItem* pNPoscItem;$/;"	t	typeref:struct:NPoscItem
pNPoscPackListener	io/net/nposcpack.h	/^typedef struct NPoscPackListener* pNPoscPackListener;$/;"	t	typeref:struct:NPoscPackListener
pNPoscPackSender	io/net/nposcpack.h	/^typedef struct NPoscPackSender* pNPoscPackSender;$/;"	t	typeref:struct:NPoscPackSender
pNPque	data/nptypes.h	/^typedef struct NPque* pNPque;$/;"	t	typeref:struct:NPque
pNPqueCmda	data/nptypes.h	/^typedef struct NPqueCmd* pNPqueCmda;$/;"	t	typeref:struct:NPqueCmd
pNPqueItem	data/nptypes.h	/^typedef struct NPqueItem* pNPqueItem;$/;"	t	typeref:struct:NPqueItem
pNPqueList	data/nptypes.h	/^typedef struct NPqueList* pNPqueList;$/;"	t	typeref:struct:NPqueList
pNPrecordSet	data/nptypes.h	/^typedef struct NPrecordSet* pNPrecordSet;$/;"	t	typeref:struct:NPrecordSet
pNPrecordTag	data/nptypes.h	/^typedef struct NPrecordTag *pNPrecordTag;$/;"	t	typeref:struct:NPrecordTag
pNPtag	data/nptypes.h	/^typedef struct NPtag *pNPtag;$/;"	t	typeref:struct:NPtag
pNPtags	data/nptypes.h	/^typedef struct NPtags * pNPtags;$/;"	t	typeref:struct:NPtags
pNPthreadFile	data/nptypes.h	/^typedef struct NPthreadFile *pNPthreadFile;$/;"	t	typeref:struct:NPthreadFile
pNPtool	data/nptypes.h	/^typedef struct NPtool * pNPtool;$/;"	t	typeref:struct:NPtool
pNPtrackDataSource	data/nptypes.h	/^typedef struct NPtrackDataSource * pNPtrackDataSource;$/;"	t	typeref:struct:NPtrackDataSource
pNPubyteRGBA	data/nptypes.h	/^typedef struct NPubyteRGBA *pNPubyteRGBA;$/;"	t	typeref:struct:NPubyteRGBA
pNPuser	data/nptypes.h	/^typedef struct NPuser* pNPuser;			\/\/!< @todo move 'tool' element to user->environment->tool$/;"	t	typeref:struct:NPuser
pNPuserEnvironment	data/nptypes.h	/^typedef struct NPuserEnvironment* pNPuserEnvironment;$/;"	t	typeref:struct:NPuserEnvironment
pNPxref	data/nptypes.h	/^typedef struct NPxref * pNPxref;$/;"	t	typeref:struct:NPxref
page	data/nptypes.h	/^	int			page;						\/\/!<active page, page = 0 for current$/;"	m	struct:NPconsole
palette	data/nptypes.h	/^	pNPubyteRGBA*	palette;		\/\/!<list of que items or commands$/;"	m	struct:NPmapColor
paramCount	data/npmap.c	/^	int paramCount;$/;"	m	struct:NPfuncDesc	file:
paramList	data/npmap.c	/^	void** paramList;$/;"	m	struct:NPfuncDesc	file:
params	data/nptypes.h	/^	char*		params;		\/\/\/< any additional field params, limits, etc.$/;"	m	struct:NPdbFields
parent	data/nptypes.h	/^	pNPnode		parent;						\/\/!<parent node, binary tree of nodes$/;"	m	struct:NPnode
parent	data/nptypes.h	/^	void*			parent;		\/\/\/< parent node$/;"	m	struct:NPnode2
parentID	data/nptypes.h	/^	int*		parentID;				\/\/!<maps node ID to parentID$/;"	m	struct:NPmap
pass	io/db/npauxdb.h	/^	char*	pass;$/;"	m	struct:NPdatabase
password	data/nptypes.h	/^	char		password[kNPpwdMax];	\/\/\/< this hosts password$/;"	m	struct:NPdbHost
password	io/db/npdbz.h	/^	char password[kNPurlMax]; \/\/ admin $/;"	m	struct:database
pause	data/nptypes.h	/^	bool		pause;$/;"	m	struct:NPch
permissions	data/nptypes.h	/^	int		permissions;		\/\/!<input output direction +1 = A->B, 0 = A<->B, -1 = B->A   \/\/!<$/;"	m	struct:NPmapLink
pickID	data/nptypes.h	/^	int			pickID;$/;"	m	struct:NPgl
pickMode	data/nptypes.h	/^	int			pickMode;				\/\/!<locks the mouse into cam mode$/;"	m	struct:NPmouse
pickPass	data/nptypes.h	/^	int			pickPass;$/;"	m	struct:NPgl
pinSelected	data/nptypes.h	/^	bool		pinSelected;$/;"	m	struct:NPmouse
pin_dl	io/gl/npgeometry.c	/^static GLint pin_dl;$/;"	v	file:
pin_wire_dl	io/gl/npgeometry.c	/^static GLint pin_wire_dl;$/;"	v	file:
ping	data/nptypes.h	/^	void* (*ping)			();$/;"	m	struct:NPdbFuncSet
pixelDepth	data/nptypes.h	/^	int			pixelDepth;$/;"	m	struct:NPgl
pointSize	data/nptypes.h	/^	float		pointSize;					\/\/!<draws dots, zero for off$/;"	m	struct:NPnode
port	data/nptypes.h	/^	int			port;					\/\/\/< port address$/;"	m	struct:NPdbHost
port	io/db/npauxdb.h	/^	unsigned int port;$/;"	m	struct:NPdatabase
port	io/db/npdbz.h	/^	int port;       \/\/ Default for MySQL is 3306$/;"	m	struct:database
position	data/nptypes.h	/^	NPintXY		position;		\/\/!<can set these and call npGlobalsUpdate()$/;"	m	struct:NPgl
position	data/nptypes.h	/^	NPintXY		position;$/;"	m	struct:NPconsole
prev	data/nptypes.h	/^	pNPnode		prev;						\/\/!<previous sibling in ring$/;"	m	struct:NPnode
prev	data/nptypes.h	/^	void*			prev;		\/\/\/< previous sibling, first sibling null.$/;"	m	struct:NPnode2
prevR	data/nptypes.h	/^	NPfloatXYZA prevR;			\/\/!<previous angle$/;"	m	struct:NPtool
prevT	data/nptypes.h	/^	NPfloatXYZ  prevT;			\/\/!<previous position$/;"	m	struct:NPtool
previous	data/nptypes.h	/^	NPintXYZ	previous;$/;"	m	struct:NPmouse
previousNode	data/nptypes.h	/^	pNPnode		previousNode;			\/\/!<used for clicking away...$/;"	m	struct:NPmap
primitiveDL	io/gl/npgeometry.c	/^GLint primitiveDL;$/;"	v
processCommands	io/net/nposcpack.cpp	/^	void processCommands( const char* oscAddress )$/;"	f	class:OscTrackPacketListener
processOscMessages	io/net/nposcpack.cpp	/^	void processOscMessages( const char* oscAddress, const char* typeTags,  osc::ReceivedMessageArgumentStream argumentStream, const IpEndpointName& remoteEndpoint )$/;"	f	class:OscTrackPacketListener
propertyTrackIndex	data/nptypes.h	/^	int			propertyTrackIndex;										\/\/!< next available propertyTrack array offset$/;"	m	struct:NPnodePropertyTracks
propertyTracks	data/nptypes.h	/^	int			propertyTracks[kNPmaxFloatProperties];					\/\/!< offset of the tracks that feed each peroperty$/;"	m	struct:NPnodePropertyTracks
proximity	data/nptypes.h	/^	NPfloatXYZ	proximity;					\/\/!<collision engine boundary extent$/;"	m	struct:NPnode
proximityMode	data/nptypes.h	/^	NPintXYZ	proximityMode;				\/\/!<particle, wave and matter interactions$/;"	m	struct:NPnode
pwd	data/nptypes.h	/^	char pwd[256];$/;"	m	struct:NPuser
q	io/db/npauxdb.h	/^	struct query *q;$/;"	m	struct:NPdatabase	typeref:struct:NPdatabase::query
q	io/db/npauxdb.h	/^	struct query *q;$/;"	m	struct:queue_node	typeref:struct:queue_node::query
quadArray	io/gl/npgeometry.c	/^	GLint*			quadArray;$/;"	m	struct:NPtorus	file:
quadArraySize	io/gl/npgeometry.c	/^	GLint			quadArraySize;$/;"	m	struct:NPtorus	file:
que	data/nptypes.h	/^	char		que[kNPmessageQueMax][kNPmessageLengthMax + 1]; \/\/!<+1 for null$/;"	m	struct:NPmessage
queIndex	data/nptypes.h	/^	int			queIndex;					\/\/!<the most recent message$/;"	m	struct:NPmessage
query	data/nptypes.h	/^	void* (*query)		    ();$/;"	m	struct:NPdbFuncSet
query	io/db/npdbz.h	/^	void* (*query)  ();$/;"	m	struct:dbFunction
queue	io/db/npauxdb.h	/^struct queue {$/;"	s
queue_node	io/db/npauxdb.h	/^struct queue_node {$/;"	s
r	data/nptypes.h	/^	float r,g,b,a;$/;"	m	struct:NPfloatRGBA
r	data/nptypes.h	/^	float r,g,b;$/;"	m	struct:NPfloatRGB
r	data/nptypes.h	/^	unsigned char r,g,b,a;$/;"	m	struct:NPubyteRGBA
radius	io/gl/npgeometry.c	/^	GLfloat			radius;$/;"	m	struct:NPcircle	file:
radiusRatioIndex	data/nptypes.h	/^	int			radiusRatioIndex;			\/\/!<sorts pre-loaded GPU toriods$/;"	m	struct:NPpin
ratio	data/nptypes.h	/^	float		ratio;						\/\/!<geometry ratio, torus innerRadius$/;"	m	struct:NPnode
readIndex	data/npmapfile.c	/^	int readIndex;		\/\/write lock from index to the lock, holds until processed$/;"	m	struct:NPbuffer	file:
recID	data/nptypes.h	/^	int*	recID;		\/\/\/< list of external table record id's to map$/;"	m	struct:NPmapID
recordCount	data/nptypes.h	/^	int			recordCount;$/;"	m	struct:NPtags
recordID	data/nptypes.h	/^	int			recordID;					\/\/!<DB recordID$/;"	m	struct:NPnode
recordID	data/nptypes.h	/^	int			recordID;			\/\/!<recordID of the node$/;"	m	struct:NPrecordTag
recordID	data/nptypes.h	/^	int			recordID;			\/\/!<recordID of the node$/;"	m	struct:NPtag
recordList	data/nptypes.h	/^	void**		recordList;		\/\/!<zz debug, change name?$/;"	m	struct:NPtags
refreshRate	data/nptypes.h	/^	float		refreshRate;$/;"	m	struct:NPgl
returnType	data/npmap.c	/^	int returnType;$/;"	m	struct:NPfuncDesc	file:
root	data/nptypes.h	/^	pNPnode		root;$/;"	m	struct:NPhud
rotate	data/nptypes.h	/^	NPfloatXYZ	rotate;						\/\/!<rotation angle in polar radians$/;"	m	struct:NPnode
rotate	data/nptypes.h	/^	NPfloatXYZA	rotate;			\/\/!<current angle$/;"	m	struct:NPtool
rotateA	data/nptypes.h	/^	NPfloatXYZA	rotateA;		\/\/!<support for 6DOF devices$/;"	m	struct:NPtool
rotateB	data/nptypes.h	/^	NPfloatXYZA rotateB;$/;"	m	struct:NPtool
rotateRate	data/nptypes.h	/^	NPfloatXYZ	rotateRate;					\/\/!<rotation rate$/;"	m	struct:NPnode
rotateTex	data/nptypes.h	/^	NPfloatXYZA	rotateTex;					\/\/!<orientation of the texture map$/;"	m	struct:NPpin
rotateVec	data/nptypes.h	/^	NPfloatXYZA	rotateVec;					\/\/!<orientation$/;"	m	struct:NPnode
route	data/nptypes.h	/^	void*			route;		\/*!< child branch route last travelled.$/;"	m	struct:NPnode2
rows	data/nptypes.h	/^	int			rows;		\/\/\/< number of rows in this table$/;"	m	struct:NPdbTable
running	data/nptypes.h	/^	bool			running;				\/\/\/< true if hosts are connected$/;"	m	struct:NPdbs
rxIP	data/nptypes.h	/^	char	rxIP[kNPurlMax];$/;"	m	struct:NPoscItem
rxIP	io/net/nposcpack.h	/^	char* rxIP;$/;"	m	struct:NPoscPackListener
rxPort	data/nptypes.h	/^	int		rxPort;$/;"	m	struct:NPoscItem
rxPort	io/net/nposcpack.h	/^	int rxPort;$/;"	m	struct:NPoscPackListener
rxURL	io/net/nposcpack.h	/^	char* rxURL;$/;"	m	struct:NPoscPackListener
s	data/nptypes.h	/^	bool x,y,z,s;$/;"	m	struct:NPboolXYZS
s	data/nptypes.h	/^	int x,y,z,s;$/;"	m	struct:NPintXYZS
saturation	data/nptypes.h	/^	float		saturation;$/;"	m	struct:NPvideo
saveSelect	data/nptypes.h	/^	bool		saveSelect;$/;"	m	struct:NPfile
saveUpdate	data/nptypes.h	/^	bool			saveUpdate;			\/\/\/< flag a single update this cycle$/;"	m	struct:NPdbs
saveUpdateRate	data/nptypes.h	/^	float			saveUpdateRate;		\/\/\/< auto save update rate, 0 is off$/;"	m	struct:NPdbs
saveUpdateRate	data/nptypes.h	/^	float		saveUpdateRate;			\/\/\/< auto save update rate, 0 is off$/;"	m	struct:NPdatabase
scale	data/nptypes.h	/^	NPfloatXYZ	scale;						\/\/!<scale node XYZ$/;"	m	struct:NPnode
scaleRate	data/nptypes.h	/^	NPfloatXYZ	scaleRate;					\/\/!<scale rate $/;"	m	struct:NPnode
scaleTex	data/nptypes.h	/^	NPfloatXYZ	scaleTex;$/;"	m	struct:NPpin
scaler	data/nptypes.h	/^	float x,y,z,scaler;$/;"	m	struct:NPfloatXYZS
screen	data/nptypes.h	/^	NPfloatXYZ	screen;						\/\/!<MB-LABEL screen pixel coordinates$/;"	m	struct:NPnode
screen	data/nptypes.h	/^	NPfloatXYZ	screen;$/;"	m	struct:NPconsole
screenGrab	data/nptypes.h	/^	int			screenGrab;		\/\/!<flag for screenGrab$/;"	m	struct:NPgl
screenSizeIndex	data/nptypes.h	/^	int			screenSizeIndex;			\/\/!<same as above for detail level$/;"	m	struct:NPpin
segments	data/nptypes.h	/^	NPintXYZ	segments;					\/\/!<geometry segments, facets, grid lines$/;"	m	struct:NPnode
segments	io/gl/npgeometry.c	/^	int				segments;$/;"	m	struct:NPcircle	file:
segments	io/gl/npgeometry.c	/^	int				segments;$/;"	m	struct:NPtorus	file:
select	data/nptypes.h	/^	void* (*select)		    ();$/;"	m	struct:NPdbFuncSet
select	io/db/npdbz.h	/^	void* (*select) ();$/;"	m	struct:dbFunction
selectAll	data/nptypes.h	/^	int			selectAll;				\/\/!<true when all nodes selected$/;"	m	struct:NPmap
selectIndex	data/nptypes.h	/^	int			selectIndex;				\/\/!<user selected line$/;"	m	struct:NPconsole
selectSet	data/nptypes.h	/^	NPboolXYZ	selectSet;				\/\/!<current selection set to add too$/;"	m	struct:NPmap
selectText	data/nptypes.h	/^	int			selectText;	$/;"	m	struct:NPconsole
selected	data/nptypes.h	/^	int			selected;					\/\/!<true if node currently selected$/;"	m	struct:NPconsole
selected	data/nptypes.h	/^	int			selected;					\/\/!<true if node currently selected$/;"	m	struct:NPnode
selectedGrid	data/nptypes.h	/^	pNPnode		selectedGrid;			\/\/!<selected grid$/;"	m	struct:NPmap
selectedHUD	data/nptypes.h	/^	pNPnode		selectedHUD;			\/\/!<the currently selected HUD item$/;"	m	struct:NPmap
selectedID	io/npgl.h	/^int selectedID;$/;"	v
selectedPinIndex	data/nptypes.h	/^	int			selectedPinIndex;		\/\/!<helpful to know which tree we are on$/;"	m	struct:NPmap
selectedPinNode	data/nptypes.h	/^	pNPnode		selectedPinNode;		\/\/!<currently selected node$/;"	m	struct:NPmap
senderSockets	io/net/nposcpack.cpp	/^static UdpTransmitSocket* senderSockets[ MAX_OSC_SENDERS ];$/;"	v	file:
senderStreams	io/net/nposcpack.cpp	/^static osc::OutboundPacketStream* senderStreams[ MAX_OSC_SENDERS ];$/;"	v	file:
sensorType	data/nptypes.h	/^	int			sensorType;					\/\/!<3CCD, Debayer pattern...$/;"	m	struct:NPcamera
setHi	data/nptypes.h	/^	NPfloatXYZ	setHi;						\/\/!<triggers$/;"	m	struct:NPnode
setLo	data/nptypes.h	/^	NPfloatXYZ	setLo;$/;"	m	struct:NPnode
setNumberToLoad	data/nptypes.h	/^	int			setNumberToLoad;$/;"	m	struct:NPch
shade	data/nptypes.h	/^	int			shade;$/;"	m	struct:NPgl
shader	data/nptypes.h	/^	int			shader;						\/\/!<the texture ID or procedural shader type$/;"	m	struct:NPnode
show	data/nptypes.h	/^	void* (*show)			();$/;"	m	struct:NPdbFuncSet
show	io/db/npdbz.h	/^	void* (*show)   ();$/;"	m	struct:dbFunction
singleClick	data/nptypes.h	/^	bool		singleClick;$/;"	m	struct:NPmouse
size	data/npmapfile.c	/^	int size;			\/\/end of the buffer, starts out at zero, stops at max$/;"	m	struct:NPbuffer	file:
size	data/nptypes.h	/^	int					size;	\/\/\/< allocated size of list$/;"	m	struct:NPmapNodeID
size	data/nptypes.h	/^	int				size;				\/\/\/< size in RAM of all db elements$/;"	m	struct:NPdbs
size	data/nptypes.h	/^	int				size;			\/\/!<active memory used$/;"	m	struct:NPmapColor
size	data/nptypes.h	/^	int			size;					\/\/!< memory used, add\/del should modify this, debug zz$/;"	m	struct:NPmap
size	data/nptypes.h	/^	int			size;					\/\/!< memory used, add\/del should modify this, debug zz$/;"	m	struct:NPmouse
size	data/nptypes.h	/^	int			size;			\/\/!<active memory used$/;"	m	struct:NPosc
size	data/nptypes.h	/^	int			size;			\/\/!<active memory used$/;"	m	struct:NPque
size	data/nptypes.h	/^	int			size;			\/\/!<active memory used$/;"	m	struct:NPqueList
size	data/nptypes.h	/^	int			size;		\/\/\/< size of this table in bytes$/;"	m	struct:NPdbTable
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPcamera
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPch
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPconnect
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPconsole
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPfile
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPgis
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPgl
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPgrid
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPhud
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPio
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPmessage
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPnode
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPnodeData
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPpin
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPpoints
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPrecordTag
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPsurface
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPtag
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPtags
size	data/nptypes.h	/^	int			size;$/;"	m	struct:NPvideo
size	data/nptypes.h	/^	int		size;			\/\/!<number of items in the list$/;"	m	struct:NPnodeList
size	data/nptypes.h	/^	int		size;$/;"	m	struct:Data
size	data/nptypes.h	/^	int		size;$/;"	m	struct:NPcpu
size	data/nptypes.h	/^	int		size;$/;"	m	struct:NPctrl
size	data/nptypes.h	/^	int		size;$/;"	m	struct:NPkey
size	data/nptypes.h	/^	int		size;$/;"	m	struct:NPoscItem
size	data/nptypes.h	/^	int		size;$/;"	m	struct:NPrecordSet
size	data/nptypes.h	/^	int size;			\/\/!< number of items in the list$/;"	m	struct:NPdatabases
size	data/nptypes.h	/^	int size;		\/\/!< size in bytes of this node structure and its data$/;"	m	struct:NPnode2
size	data/nptypes.h	/^	int size;$/;"	m	struct:NPdbFuncSet
size	data/nptypes.h	/^	int size;$/;"	m	struct:NPuserEnvironment
size	io/db/npdbz.h	/^	int size;$/;"	m	struct:csvStrObj
skipCount	data/nptypes.h	/^	int		skipCount;$/;"	m	struct:NPkey
slices	data/nptypes.h	/^	int			slices;						\/\/!<calculated from radiusRatioIndex$/;"	m	struct:NPpin
slices	io/gl/npgeometry.c	/^	int				slices;$/;"	m	struct:NPtorus	file:
slow	data/nptypes.h	/^	float	slow;						\/\/!< slow velocity, shift not pressed \/\/!<zz move this to io or npengine$/;"	m	struct:NPctrl
sockets	data/nptypes.h	/^	int sockets;			\/\/!<number of CPU sockets$/;"	m	struct:NPcpu
socketsPerNode	data/nptypes.h	/^	int socketsPerNode;		\/\/!<the number CPUs on a single board, shared RAM$/;"	m	struct:NPcpu
sort	data/nptypes.h	/^	void**		sort;					\/\/!<used for z-sort during GL draw$/;"	m	struct:NPmap
sort	data/nptypes.h	/^	void**		sort;$/;"	m	struct:NPtags
sortA	data/nptypes.h	/^	void**		sortA;					\/\/!<double buffered async sort$/;"	m	struct:NPmap
sortB	data/nptypes.h	/^	void**		sortB;					\/\/!<double buffered async sort			\/\/!<zzhp$/;"	m	struct:NPmap
sortCount	data/nptypes.h	/^	int			sortCount;														\/\/!<zzhp$/;"	m	struct:NPmap
sortCount	data/nptypes.h	/^	int			sortCount;$/;"	m	struct:NPtags
sortCount	io/gl/npgldraw.c	/^int sortCount = 0;	\/\/zzhp$/;"	v
sortCountA	data/nptypes.h	/^	int			sortCountA;$/;"	m	struct:NPmap
sortCountB	data/nptypes.h	/^	int			sortCountB;														\/\/!<zzhp$/;"	m	struct:NPmap
sortID	data/nptypes.h	/^	void**		sortID;					\/\/!<maps nodeID for sorting nodes$/;"	m	struct:NPmap
sortSwap	data/nptypes.h	/^	int			sortSwap;				\/\/!<0 for sortA and 1 for sortB			\/\/!<zzhp$/;"	m	struct:NPmap
sortSwapFlag	data/nptypes.h	/^	int			sortSwapFlag;			\/\/!<sort is done and ready for swap$/;"	m	struct:NPmap
spacing	data/nptypes.h	/^	NPfloatXYZ	spacing;$/;"	m	struct:NPgrid
stacks	data/nptypes.h	/^	int			stacks;						\/\/!<...and from the screenSizeIndex$/;"	m	struct:NPpin
startup	data/nptypes.h	/^	bool	startup;$/;"	m	struct:NPctrl
stereo3D	data/nptypes.h	/^	int			stereo3D;						\/\/!<stereoscopic 3D$/;"	m	struct:NPcamera
stereo3D	data/nptypes.h	/^	int			stereo3D;						\/\/!<stereoscopic 3D$/;"	m	struct:NPvideo
stereo3D	data/nptypes.h	/^	int			stereo3D;$/;"	m	struct:NPgl
storeResult	io/db/npdbz.h	/^	void* (*storeResult) ();$/;"	m	struct:dbFunction
store_result	data/nptypes.h	/^	void* (*store_result)	();$/;"	m	struct:NPdbFuncSet
subsample	data/nptypes.h	/^	int			subsample;		\/\/!<zzhp$/;"	m	struct:NPgl
syncNodes	data/nptypes.h	/^	bool		syncNodes;$/;"	m	struct:NPmap
syncTagsReady	data/nptypes.h	/^	bool		syncTagsReady;$/;"	m	struct:NPmap
systemNodes	data/nptypes.h	/^	int systemNodes;		\/\/!<number of system nodes in this partition$/;"	m	struct:NPcpu
systemRAM	data/nptypes.h	/^	long long systemRAM;	\/\/!<total RAM in this NUMA partition$/;"	m	struct:NPcpu
tableCount	data/nptypes.h	/^	int			tableCount;				\/\/\/< total number of tables$/;"	m	struct:NPdatabase
tableID	data/nptypes.h	/^	int			tableID;					\/\/!<DB table$/;"	m	struct:NPnode
tableID	data/nptypes.h	/^	int			tableID;			\/\/!<tableID of the node, may not need these, debug zz$/;"	m	struct:NPrecordTag
tableID	data/nptypes.h	/^	int			tableID;			\/\/!<tableID of the node, may not need these, debug zz$/;"	m	struct:NPtag
tableInUse	data/nptypes.h	/^	pNPdbTable	tableInUse;				\/\/\/< current table in use$/;"	m	struct:NPdatabase
tableParameters	io/db/npdbz.h	/^struct tableParameters {$/;"	s
tables	data/nptypes.h	/^	pNPdbTable* tables;					\/\/\/< contains row count$/;"	m	struct:NPdatabase
tag	data/npmap.c	/^	NPtag tag; \/\/char name[128]; \/\/char desc[2048];$/;"	m	struct:NPfuncDesc	file:
tag	data/nptypes.h	/^	pNPtag		tag;						\/\/!<ptrr to the nodes own text tag$/;"	m	struct:NPnode
tagMode	data/nptypes.h	/^	int			tagMode;					\/\/!<billboard tag$/;"	m	struct:NPnode
tagOffset	data/nptypes.h	/^	NPfloatXYZ	tagOffset;					\/\/!<origin relative to parent origin$/;"	m	struct:NPnode
tags	data/nptypes.h	/^	NPtags		tags;$/;"	m	struct:NPhud
tagsIndex	io/gl/nptags.c	/^int tagsIndex;	\/\/zzhp debug, move this to the global data struct$/;"	v
target	data/nptypes.h	/^	NPfloatXYZ	target;$/;"	m	struct:NPmouse
targetDest	data/nptypes.h	/^	NPfloatXYZ	targetDest;$/;"	m	struct:NPmouse
targetRadius	data/nptypes.h	/^	float		targetRadius;$/;"	m	struct:NPmouse
targetRadiusDest	data/nptypes.h	/^	float		targetRadiusDest;$/;"	m	struct:NPmouse
targeting	data/nptypes.h	/^	int			targeting;$/;"	m	struct:NPmouse
textureCount	data/nptypes.h	/^	int			textureCount;$/;"	m	struct:NPgl
textureID	data/nptypes.h	/^	int			textureID;					\/\/!<GL texture ID used for box background$/;"	m	struct:NPconsole
textureID	data/nptypes.h	/^	int			textureID;					\/\/!<GL texture ID$/;"	m	struct:NPnode
thickness	io/gl/npgeometry.c	/^	GLfloat			thickness;$/;"	m	struct:NPtorus	file:
threadRunning	io/npch.c	/^bool threadRunning = false;$/;"	v
threads	data/nptypes.h	/^	int threads;			\/\/!<total threads, hyper-threads$/;"	m	struct:NPcpu
threadsPerCPU	data/nptypes.h	/^	int threadsPerCPU;		\/\/!<typically either twice the core count or same as$/;"	m	struct:NPcpu
threadsPerCore	data/nptypes.h	/^	int threadsPerCore;		\/\/!<typically 1 or 2$/;"	m	struct:NPcpu
time	data/nptypes.h	/^	double		time;				\/\/!<system time in seconds$/;"	m	struct:NPio
timeStart	data/nptypes.h	/^	double		timeStart;			\/\/!<time at app start$/;"	m	struct:NPio
title	data/nptypes.h	/^	char		title[kNPtagTitleMax + 1];	\/\/!<one line with max width of 63 characters$/;"	m	struct:NPtag
title	data/nptypes.h	/^	char		title[kNPtagTitleMax + 3];	\/\/!<size + 3 for possible line endings$/;"	m	struct:NPrecordTag
titleSize	data/nptypes.h	/^	int			titleSize;			\/\/!<number of characters in title$/;"	m	struct:NPrecordTag
titleSize	data/nptypes.h	/^	int			titleSize;		\/\/!<number of characters in title$/;"	m	struct:NPtag
tool	data/nptypes.h	/^	int			tool;$/;"	m	struct:NPmouse
tool	data/nptypes.h	/^	pNPnode	tool;				\/\/!<$/;"	m	struct:NPuser
tool	data/nptypes.h	/^	pNPnode	tool;				\/\/!<$/;"	m	struct:NPuserEnvironment
topo	data/nptypes.h	/^	int			topo;						\/\/!<topography, cube, sphere, torus$/;"	m	struct:NPnode
torus_dl	io/gl/npgeometry.c	/^static GLint torus_dl;$/;"	v	file:
torus_wire_dl	io/gl/npgeometry.c	/^static GLint torus_wire_dl;$/;"	v	file:
totalCsvStrObjectsSize	io/db/npdbz.h	/^	int totalCsvStrObjectsSize;$/;"	m	struct:csvStrObjects
trackDataSource	data/nptypes.h	/^	NPtrackDataSource trackDataSource;$/;"	m	struct:NPch
trackFP	data/nptypes.h	/^	FILE*		trackFP;		\/\/!< for reading *Ch* files, used in a separate thread, and may remain open$/;"	m	struct:NPtrackDataSource
trackFileTokenBuffer	data/nptypes.h	/^	char		trackFileTokenBuffer[kNPmaxLineLength];$/;"	m	struct:NPch
trackFileTokens	data/nptypes.h	/^	char*		trackFileTokens[kNPmaxTokens];			$/;"	m	struct:NPch
trackFloatData	data/nptypes.h	/^	float**		trackFloatData;			\/\/!< list of pointers to "float" values, track data as "float"$/;"	m	struct:NPch
trackIntData	data/nptypes.h	/^	int**		trackIntData;			\/\/!< list of pointers to "int" values, track data as "int"$/;"	m	struct:NPch
trackNames	data/nptypes.h	/^	char**		trackNames;				\/\/!< each track has a name, name indicates node attribute (multiple allowed, separated by anything except ",")$/;"	m	struct:NPch
trackOffset	data/nptypes.h	/^	int			trackOffset;$/;"	m	struct:NPxref
trackUcharData	data/nptypes.h	/^	unsigned char** trackUcharData;		\/\/!< list of pointers to "unsigned char" values, track data as "unsigned char"$/;"	m	struct:NPch
translate	data/nptypes.h	/^	NPfloatXYZ	translate;					\/\/!<location relative to origin$/;"	m	struct:NPconsole
translate	data/nptypes.h	/^	NPfloatXYZ	translate;					\/\/!<location relative to origin$/;"	m	struct:NPnode
translate	data/nptypes.h	/^	NPfloatXYZ	translate;		\/\/!<current position... relative to world local or screen coords?$/;"	m	struct:NPtool
translateRate	data/nptypes.h	/^	NPfloatXYZ	translateRate;				\/\/!<node velocity$/;"	m	struct:NPnode
translateTex	data/nptypes.h	/^	NPfloatXYZ	translateTex;$/;"	m	struct:NPpin
translateVec	data/nptypes.h	/^	NPfloatXYZ	translateVec;				\/\/!<velocity unit vector$/;"	m	struct:NPnode
triggerHi	data/nptypes.h	/^	NPintXYZ	triggerHi;					\/\/!<triggers are multipurpose$/;"	m	struct:NPnode
triggerLo	data/nptypes.h	/^	NPintXYZ	triggerLo;$/;"	m	struct:NPnode
true	data/stdbool.h	29;"	d
txIP	data/nptypes.h	/^	char	txIP[kNPurlMax];	\/\/!<supports ipv4 ipv6 or URL$/;"	m	struct:NPoscItem
txIP	io/net/nposcpack.h	/^	char* txIP;		\/\/either IPv4 or IPv6 as a string "255.1.1.1"$/;"	m	struct:NPoscPackListener
txPort	data/nptypes.h	/^	int		txPort;$/;"	m	struct:NPoscItem
txPort	io/net/nposcpack.h	/^	int txPort;$/;"	m	struct:NPoscPackListener
txPorts	io/net/nposcpack.cpp	/^static int txPorts[ MAX_OSC_LISTENERS ];$/;"	v	file:
txURL	io/net/nposcpack.h	/^	char* txURL;	\/\/requires DNS lookup, unless is a numeric IP address$/;"	m	struct:NPoscPackListener
type	data/nptypes.h	/^	char		type[64];		\/\/\/< server type 'mysql', 'postgresql', etc.$/;"	m	struct:NPdbHost
type	data/nptypes.h	/^	int				type;		\/\/\/< node type defines the data pointer type$/;"	m	struct:NPnode2
type	data/nptypes.h	/^	int			type;						\/\/!<node type, point, pin, cam, video$/;"	m	struct:NPnode
type	data/nptypes.h	/^	int			type;					\/\/\/< function protype index$/;"	m	struct:NPdbFunction
type	data/nptypes.h	/^	int			type;			\/\/!<command or data (NP)type$/;"	m	struct:NPque
type	data/nptypes.h	/^	int			type;			\/\/!<command or data (np type)$/;"	m	struct:NPqueList
type	data/nptypes.h	/^	int			type;		\/\/\/< table type: node, tag, chmap, etc.$/;"	m	struct:NPdbTable
type	data/nptypes.h	/^	int			type;$/;"	m	struct:NPcamera
type	data/nptypes.h	/^	int			type;$/;"	m	struct:NPdataItem
type	data/nptypes.h	/^	int			type;$/;"	m	struct:NPgis
type	data/nptypes.h	/^	int			type;$/;"	m	struct:NPgrid
type	data/nptypes.h	/^	int			type;$/;"	m	struct:NPnodeData
type	data/nptypes.h	/^	int			type;$/;"	m	struct:NPpin
type	data/nptypes.h	/^	int			type;$/;"	m	struct:NPpoints
type	data/nptypes.h	/^	int			type;$/;"	m	struct:NPsurface
type	data/nptypes.h	/^	int			type;$/;"	m	struct:NPvideo
type	data/nptypes.h	/^	int		type;			\/\/!<function ptr type$/;"	m	struct:NPqueCmd
type	data/nptypes.h	/^	int		type;			\/\/!<mapPtr type... either data or cmd funcPtr \/\/!<zz streamline$/;"	m	struct:NPqueItem
type	data/nptypes.h	/^	int		type;$/;"	m	struct:NPmapType
type	data/nptypes.h	/^	int		type;$/;"	m	struct:NPnodeList
type	data/nptypes.h	/^	int		type;$/;"	m	struct:NPrecordSet
type	data/nptypes.h	/^	int type;					\/\/!<same as mouse->tool$/;"	m	struct:NPtool
type	data/nptypes.h	/^	int*		type;		\/\/\/< field type constant$/;"	m	struct:NPdbFields
type	io/npkey.c	/^	int		type;$/;"	m	struct:NPkeyMap	file:
typeA	data/nptypes.h	/^	int		typeA;						\/\/!<mapPtr type <-auto-> OSC typeTag$/;"	m	struct:NPmapPair
typeA	data/nptypes.h	/^	int		typeA;$/;"	m	struct:NPmapLink
typeMap	data/nptypes.h	/^	pNPmapType	typeMap[kNPdataTypeMax];$/;"	m	struct:NPmap
typeMapBase	data/nptypes.h	/^	pNPmapType	typeMapBase;$/;"	m	struct:NPmap
typeMapCamera	data/nptypes.h	/^	pNPmapType	typeMapCamera;$/;"	m	struct:NPmap
typeMapChMap	data/nptypes.h	/^	pNPmapType	typeMapChMap;			\/\/!< debug db \/\/!<zzssql$/;"	m	struct:NPmap
typeMapGlobals	data/nptypes.h	/^	pNPmapLink	typeMapGlobals;$/;"	m	struct:NPmap
typeMapGrid	data/nptypes.h	/^	pNPmapType	typeMapGrid;$/;"	m	struct:NPmap
typeMapNode	data/nptypes.h	/^	pNPmapType	typeMapNode;$/;"	m	struct:NPmap
typeMapOSC	data/nptypes.h	/^	pNPmapLink	typeMapOSC;$/;"	m	struct:NPmap
typeMapPalette	data/nptypes.h	/^	pNPmapType	typeMapPalette;				\/\/!<zz color$/;"	m	struct:NPmap
typeMapPin	data/nptypes.h	/^	pNPmapType	typeMapPin;$/;"	m	struct:NPmap
typeMapTag	data/nptypes.h	/^	pNPmapType	typeMapTag;				\/\/!< debug db \/\/!<zzssql $/;"	m	struct:NPmap
typeStr	data/nptypes.h	/^	char*		typeStr;	\/\/\/< field type as DB string format$/;"	m	struct:NPdbFields
typeTagA	data/nptypes.h	/^	char	typeTagA[kNPnameMax];$/;"	m	struct:NPmapLink
typeTagB	data/nptypes.h	/^	char	typeTagB[kNPnameMax];			\/\/!<OSC type tag or data type$/;"	m	struct:NPmapLink
typeTagB	data/nptypes.h	/^	char	typeTagB[kNPnameMax];		\/\/!<OSC type tags can be converted to type_id$/;"	m	struct:NPmapPair
ucharTracks	data/nptypes.h	/^	NPnodePropertyTracks	ucharTracks;\/\/!< tracks associated with "unsigned char" Node properties$/;"	m	struct:NPch
udp	data/nptypes.h	/^	NPoscPackListener udp[kNPoscListMax];		\/\/!<zz osc$/;"	m	struct:NPosc
udpLines	io/net/nposcpack.cpp	/^	LineList* udpLines;$/;"	m	class:CsvTrackPacketListener	file:
unitType	data/nptypes.h	/^	NPintXYZS	unitType;			\/\/!<ft, m, F, C, kg\/m^3, m\/s^2, R,G,B...$/;"	m	struct:NPlabel
unix_socket	io/db/npauxdb.h	/^	char*	unix_socket;$/;"	m	struct:NPdatabase
updateData	data/nptypes.h	/^	bool		updateData;				\/\/!< true when we need to update data (either read from track to update node, or vice versa)$/;"	m	struct:NPch
updateNodeFromMysqlRow	io/db/npdbz.c	/^void updateNodeFromMysqlRow (MYSQL_ROW *row, void* dataRef) \/\/ Generalize here$/;"	f
updateNodesFromMysqlResult	io/db/npdbz.c	/^void updateNodesFromMysqlResult(MYSQL_RES *result, void* dataRef)$/;"	f
url	data/nptypes.h	/^	char		url[kNPurlMax];$/;"	m	struct:NPio
use	data/nptypes.h	/^	void* (*use)			();$/;"	m	struct:NPdbFuncSet
use	io/db/npdbz.h	/^	void* (*use)    ();$/;"	m	struct:dbFunction
user	data/nptypes.h	/^	char		user[kNPuserNameMax];	\/\/\/< this hosts user name$/;"	m	struct:NPdbHost
user	data/nptypes.h	/^	pNPuser user[kNPuserMax];			\/\/!< List of users, stores session info.$/;"	m	struct:NPctrl
user	io/db/npauxdb.h	/^	char*	user;$/;"	m	struct:NPdatabase
user	io/db/npdbz.h	/^	char user[kNPurlMax];     \/\/ root$/;"	m	struct:database
userCount	data/nptypes.h	/^	int userCount;$/;"	m	struct:NPctrl
userSelectedPath	data/nptypes.h	/^	char		userSelectedPath[kNPmaxPath];$/;"	m	struct:NPfile
vArray	io/gl/npgeometry.c	/^	NPfloatXY*		vArray;$/;"	m	struct:NPcircle	file:
vArray	io/gl/npgeometry.c	/^	NPfloatXYZ*		vArray;$/;"	m	struct:NPtorus	file:
vArraySize	io/gl/npgeometry.c	/^	GLint			vArraySize;$/;"	m	struct:NPtorus	file:
value	data/nptypes.h	/^	char	value[kNPelementMax];$/;"	m	struct:NPmapLink
value	io/db/npauxdb.h	/^	char* value;$/;"	m	struct:fieldvalue
vertexArray	data/nptypes.h	/^	float		*vertexArray;				\/\/!<the array of vertices$/;"	m	struct:NPgis
vertexArray	data/nptypes.h	/^	float		*vertexArray;				\/\/!<the array of vertices$/;"	m	struct:NPsurface
vertexArray	data/nptypes.h	/^	float**			vertexArray;				\/\/!<the array of data points$/;"	m	struct:NPpoints
vertexCount	data/nptypes.h	/^	int			vertexCount;				\/\/!<$/;"	m	struct:NPgis
vertexCount	data/nptypes.h	/^	int			vertexCount;				\/\/!<$/;"	m	struct:NPsurface
vertexCount	data/nptypes.h	/^	int			vertexCount;				\/\/!<number of points in the node$/;"	m	struct:NPpoints
voidFnPtr	data/nptypes.h	/^typedef void (*voidFnPtr)(void*);	\/\/!<zz-JJ$/;"	t
width	data/nptypes.h	/^	int			width;						\/\/!<res in pixels$/;"	m	struct:NPcamera
width	data/nptypes.h	/^	int			width;						\/\/!<res in pixels$/;"	m	struct:NPvideo
width	data/nptypes.h	/^	int			width;			\/\/!<current draw size, both window and fullscreen$/;"	m	struct:NPgl
window	data/nptypes.h	/^	NPintXYZ	window;					\/\/!<window position in pixels$/;"	m	struct:NPmouse
windowID	data/nptypes.h	/^	int			windowID;		\/\/!<multiple GL contexts can share a windowID$/;"	m	struct:NPgl
windowSize	data/nptypes.h	/^	NPintXY		windowSize;		\/\/!<non-fullscreen window size and position$/;"	m	struct:NPgl
world	data/nptypes.h	/^	NPfloatXYZ	world;						\/\/!<child node world coordinates$/;"	m	struct:NPnode
write	data/nptypes.h	/^	char*		write;$/;"	m	struct:NPio
writeIndex	data/npmapfile.c	/^	int writeIndex;		\/\/most current data entry, $/;"	m	struct:NPbuffer	file:
x	data/nptypes.h	/^	bool x,y,z,s;$/;"	m	struct:NPboolXYZS
x	data/nptypes.h	/^	bool x,y,z;$/;"	m	struct:NPboolXYZ
x	data/nptypes.h	/^	float x,y,z,angle;$/;"	m	struct:NPfloatXYZA
x	data/nptypes.h	/^	float x,y,z,scaler;$/;"	m	struct:NPfloatXYZS
x	data/nptypes.h	/^	float x,y,z;$/;"	m	struct:NPfloatXYZ
x	data/nptypes.h	/^	float x,y;$/;"	m	struct:NPfloatXY
x	data/nptypes.h	/^	int			x;						\/\/!<raw coordinate$/;"	m	struct:NPmouse
x	data/nptypes.h	/^	int x,y,z,s;$/;"	m	struct:NPintXYZS
x	data/nptypes.h	/^	int x,y,z;$/;"	m	struct:NPintXYZ
x	data/nptypes.h	/^	int x,y;$/;"	m	struct:NPintXY
xref	data/nptypes.h	/^	NPxref		xref[kNPmaxTrackToAttributeMappings];$/;"	m	struct:NPch
xrefIndex	data/nptypes.h	/^	int			xrefIndex;$/;"	m	struct:NPch
y	data/nptypes.h	/^	bool x,y,z,s;$/;"	m	struct:NPboolXYZS
y	data/nptypes.h	/^	bool x,y,z;$/;"	m	struct:NPboolXYZ
y	data/nptypes.h	/^	float x,y,z,angle;$/;"	m	struct:NPfloatXYZA
y	data/nptypes.h	/^	float x,y,z,scaler;$/;"	m	struct:NPfloatXYZS
y	data/nptypes.h	/^	float x,y,z;$/;"	m	struct:NPfloatXYZ
y	data/nptypes.h	/^	float x,y;$/;"	m	struct:NPfloatXY
y	data/nptypes.h	/^	int			y;$/;"	m	struct:NPmouse
y	data/nptypes.h	/^	int x,y,z,s;$/;"	m	struct:NPintXYZS
y	data/nptypes.h	/^	int x,y,z;$/;"	m	struct:NPintXYZ
y	data/nptypes.h	/^	int x,y;$/;"	m	struct:NPintXY
z	data/nptypes.h	/^	bool x,y,z,s;$/;"	m	struct:NPboolXYZS
z	data/nptypes.h	/^	bool x,y,z;$/;"	m	struct:NPboolXYZ
z	data/nptypes.h	/^	float x,y,z,angle;$/;"	m	struct:NPfloatXYZA
z	data/nptypes.h	/^	float x,y,z,scaler;$/;"	m	struct:NPfloatXYZS
z	data/nptypes.h	/^	float x,y,z;$/;"	m	struct:NPfloatXYZ
z	data/nptypes.h	/^	int			z;						\/\/!<typically the scroll wheel$/;"	m	struct:NPmouse
z	data/nptypes.h	/^	int x,y,z,s;$/;"	m	struct:NPintXYZS
z	data/nptypes.h	/^	int x,y,z;$/;"	m	struct:NPintXYZ
